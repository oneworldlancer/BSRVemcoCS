using System;
using System.Collections.Generic;
using BSRVemcoCS.DBModels;
using Microsoft.EntityFrameworkCore;
using BSRVemcoCS.DBModels;

namespace BSRVemcoCS.DBContext;

public partial class BSRDBModelContext : DbContext
{
    public BSRDBModelContext()
    {
    }

    public BSRDBModelContext(DbContextOptions<BSRDBModelContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AdultUserTokenPurchase> AdultUserTokenPurchases { get; set; }

    public virtual DbSet<AspNetRole1> AspNetRoles1 { get; set; }

    public virtual DbSet<AspNetRoleClaim> AspNetRoleClaims { get; set; }

    public virtual DbSet<AspNetUser1> AspNetUsers1 { get; set; }

    public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }

    public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }

    public virtual DbSet<AspNetUserToken> AspNetUserTokens { get; set; }

    public virtual DbSet<AspnetApplication> AspnetApplications { get; set; }

    public virtual DbSet<AspnetMembership> AspnetMemberships { get; set; }

    public virtual DbSet<AspnetPath> AspnetPaths { get; set; }

    public virtual DbSet<AspnetPersonalizationAllUser> AspnetPersonalizationAllUsers { get; set; }

    public virtual DbSet<AspnetPersonalizationPerUser> AspnetPersonalizationPerUsers { get; set; }

    public virtual DbSet<AspnetProfile> AspnetProfiles { get; set; }

    public virtual DbSet<AspnetRole> AspnetRoles { get; set; }

    public virtual DbSet<AspnetSchemaVersion> AspnetSchemaVersions { get; set; }

    public virtual DbSet<AspnetUser> AspnetUsers { get; set; }

    public virtual DbSet<AspnetWebEventEvent> AspnetWebEventEvents { get; set; }

    public virtual DbSet<BsrvemcoAppBuildingInformationCriterionList> BsrvemcoAppBuildingInformationCriterionLists { get; set; }

    public virtual DbSet<BsrvemcoAppBuildingInformationList> BsrvemcoAppBuildingInformationLists { get; set; }

    public virtual DbSet<BsrvemcoAppBuildingTableList> BsrvemcoAppBuildingTableLists { get; set; }

    public virtual DbSet<BsrvemcoAppCmsList> BsrvemcoAppCmsLists { get; set; }

    public virtual DbSet<BsrvemcoAppCmsPageList> BsrvemcoAppCmsPageLists { get; set; }

    public virtual DbSet<BsrvemcoAppRoleList> BsrvemcoAppRoleLists { get; set; }

    public virtual DbSet<BsrvemcoDeviceList> BsrvemcoDeviceLists { get; set; }

    public virtual DbSet<BsrvemcoDeviceLocation> BsrvemcoDeviceLocations { get; set; }

    public virtual DbSet<BsrvemcoGroupCategoryList> BsrvemcoGroupCategoryLists { get; set; }

    public virtual DbSet<BsrvemcoGroupRoleList> BsrvemcoGroupRoleLists { get; set; }

    public virtual DbSet<BsrvemcoUserAccountList> BsrvemcoUserAccountLists { get; set; }

    public virtual DbSet<BsrvemcoUserApplicationLanguageList> BsrvemcoUserApplicationLanguageLists { get; set; }

    public virtual DbSet<BsrvemcoUserApplicationLanguageTranslateList> BsrvemcoUserApplicationLanguageTranslateLists { get; set; }

    public virtual DbSet<BsrvemcoUserAvatarImageList> BsrvemcoUserAvatarImageLists { get; set; }

    public virtual DbSet<BsrvemcoUserBackgroundImageList> BsrvemcoUserBackgroundImageLists { get; set; }

    public virtual DbSet<BsrvemcoUserBuildingDiagramHistoryList> BsrvemcoUserBuildingDiagramHistoryLists { get; set; }

    public virtual DbSet<BsrvemcoUserBuildingDiagramList> BsrvemcoUserBuildingDiagramLists { get; set; }

    public virtual DbSet<BsrvemcoUserBuildingDocumentHistoryList> BsrvemcoUserBuildingDocumentHistoryLists { get; set; }

    public virtual DbSet<BsrvemcoUserBuildingDocumentList> BsrvemcoUserBuildingDocumentLists { get; set; }

    public virtual DbSet<BsrvemcoUserBuildingInformationList> BsrvemcoUserBuildingInformationLists { get; set; }

    public virtual DbSet<BsrvemcoUserBuildingList> BsrvemcoUserBuildingLists { get; set; }

    public virtual DbSet<BsrvemcoUserCompanyList> BsrvemcoUserCompanyLists { get; set; }

    public virtual DbSet<BsrvemcoUserContactFriendList> BsrvemcoUserContactFriendLists { get; set; }

    public virtual DbSet<BsrvemcoUserContactList> BsrvemcoUserContactLists { get; set; }

    public virtual DbSet<BsrvemcoUserDeviceList> BsrvemcoUserDeviceLists { get; set; }

    public virtual DbSet<BsrvemcoUserDeviceListHistory> BsrvemcoUserDeviceListHistories { get; set; }

    public virtual DbSet<BsrvemcoUserDeviceListOnline> BsrvemcoUserDeviceListOnlines { get; set; }

    public virtual DbSet<BsrvemcoUserEmailAddressList> BsrvemcoUserEmailAddressLists { get; set; }

    public virtual DbSet<BsrvemcoUserFeedback> BsrvemcoUserFeedbacks { get; set; }

    public virtual DbSet<BsrvemcoUserGroup> BsrvemcoUserGroups { get; set; }

    public virtual DbSet<BsrvemcoUserGroupAdministratorList> BsrvemcoUserGroupAdministratorLists { get; set; }

    public virtual DbSet<BsrvemcoUserGroupAvatarImageList> BsrvemcoUserGroupAvatarImageLists { get; set; }

    public virtual DbSet<BsrvemcoUserGroupAvatarImageListHistory> BsrvemcoUserGroupAvatarImageListHistories { get; set; }

    public virtual DbSet<BsrvemcoUserGroupCategoryList> BsrvemcoUserGroupCategoryLists { get; set; }

    public virtual DbSet<BsrvemcoUserGroupList> BsrvemcoUserGroupLists { get; set; }

    public virtual DbSet<BsrvemcoUserGroupRoleList> BsrvemcoUserGroupRoleLists { get; set; }

    public virtual DbSet<BsrvemcoUserImage> BsrvemcoUserImages { get; set; }

    public virtual DbSet<BsrvemcoUserList> BsrvemcoUserLists { get; set; }

    public virtual DbSet<BsrvemcoUserLocation> BsrvemcoUserLocations { get; set; }

    public virtual DbSet<BsrvemcoUserLoginList> BsrvemcoUserLoginLists { get; set; }

    public virtual DbSet<BsrvemcoUserMobileNumberList> BsrvemcoUserMobileNumberLists { get; set; }

    public virtual DbSet<BsrvemcoUserProfile> BsrvemcoUserProfiles { get; set; }

    public virtual DbSet<BsrvemcoUserProfilePrivacy> BsrvemcoUserProfilePrivacies { get; set; }

    public virtual DbSet<BsrvemcoUserRateu> BsrvemcoUserRateus { get; set; }

    public virtual DbSet<BsrvemcoUserRoleList> BsrvemcoUserRoleLists { get; set; }

    public virtual DbSet<BsrvemcoUserScreenCallShowEventList> BsrvemcoUserScreenCallShowEventLists { get; set; }

    public virtual DbSet<BsrvemcoUserScreenCallShowMessageList> BsrvemcoUserScreenCallShowMessageLists { get; set; }

    public virtual DbSet<BsrvemcoUserScreenChatShowEventList> BsrvemcoUserScreenChatShowEventLists { get; set; }

    public virtual DbSet<BsrvemcoUserScreenChatShowEventTranslateList> BsrvemcoUserScreenChatShowEventTranslateLists { get; set; }

    public virtual DbSet<BsrvemcoUserScreenChatShowLoginList> BsrvemcoUserScreenChatShowLoginLists { get; set; }

    public virtual DbSet<BsrvemcoUserScreenChatShowMessageList> BsrvemcoUserScreenChatShowMessageLists { get; set; }

    public virtual DbSet<BsrvemcoUserScreenChatShowSeenList> BsrvemcoUserScreenChatShowSeenLists { get; set; }

    public virtual DbSet<BsrvemcoUserScreenChatShowShareAudio> BsrvemcoUserScreenChatShowShareAudios { get; set; }

    public virtual DbSet<BsrvemcoUserScreenChatShowShareAudioTrace> BsrvemcoUserScreenChatShowShareAudioTraces { get; set; }

    public virtual DbSet<BsrvemcoUserScreenChatShowShareAudioUserList> BsrvemcoUserScreenChatShowShareAudioUserLists { get; set; }

    public virtual DbSet<BsrvemcoUserScreenChatShowShareDocument> BsrvemcoUserScreenChatShowShareDocuments { get; set; }

    public virtual DbSet<BsrvemcoUserScreenChatShowShareDocumentStatic> BsrvemcoUserScreenChatShowShareDocumentStatics { get; set; }

    public virtual DbSet<BsrvemcoUserScreenChatShowShareDocumentTrace> BsrvemcoUserScreenChatShowShareDocumentTraces { get; set; }

    public virtual DbSet<BsrvemcoUserScreenChatShowShareDocumentUserList> BsrvemcoUserScreenChatShowShareDocumentUserLists { get; set; }

    public virtual DbSet<BsrvemcoUserScreenChatShowShareImage> BsrvemcoUserScreenChatShowShareImages { get; set; }

    public virtual DbSet<BsrvemcoUserScreenChatShowShareImageStatic> BsrvemcoUserScreenChatShowShareImageStatics { get; set; }

    public virtual DbSet<BsrvemcoUserScreenChatShowShareImageTrace> BsrvemcoUserScreenChatShowShareImageTraces { get; set; }

    public virtual DbSet<BsrvemcoUserScreenChatShowShareImageUserList> BsrvemcoUserScreenChatShowShareImageUserLists { get; set; }

    public virtual DbSet<BsrvemcoUserScreenChatShowShareVideo> BsrvemcoUserScreenChatShowShareVideos { get; set; }

    public virtual DbSet<BsrvemcoUserScreenChatShowShareVideoTrace> BsrvemcoUserScreenChatShowShareVideoTraces { get; set; }

    public virtual DbSet<BsrvemcoUserScreenChatShowShareVideoUserList> BsrvemcoUserScreenChatShowShareVideoUserLists { get; set; }

    public virtual DbSet<BsrvemcoUserScreenChatShowShareVideoYoutube> BsrvemcoUserScreenChatShowShareVideoYoutubes { get; set; }

    public virtual DbSet<BsrvemcoUserSession> BsrvemcoUserSessions { get; set; }

    public virtual DbSet<BsrvemcoUserSetting> BsrvemcoUserSettings { get; set; }

    public virtual DbSet<BsrvemcoUserYoutubeChannel> BsrvemcoUserYoutubeChannels { get; set; }

    public virtual DbSet<BsrvemcoUserYoutubevideo> BsrvemcoUserYoutubevideos { get; set; }

    public virtual DbSet<Image> Images { get; set; }

    public virtual DbSet<TlknApplicationUpdateHistoryList> TlknApplicationUpdateHistoryLists { get; set; }

    public virtual DbSet<TlknApplicationUpdateList> TlknApplicationUpdateLists { get; set; }

    public virtual DbSet<TlknApplicationVersionHistoryList> TlknApplicationVersionHistoryLists { get; set; }

    public virtual DbSet<TlknApplicationVersionList> TlknApplicationVersionLists { get; set; }

    public virtual DbSet<TlknCss> TlknCsses { get; set; }

    public virtual DbSet<TlknDeviceList> TlknDeviceLists { get; set; }

    public virtual DbSet<TlknEmotion> TlknEmotions { get; set; }

    public virtual DbSet<TlknEmotionCategoryList> TlknEmotionCategoryLists { get; set; }

    public virtual DbSet<TlknErrorReport> TlknErrorReports { get; set; }

    public virtual DbSet<TlknGroup> TlknGroups { get; set; }

    public virtual DbSet<TlknPaymentInvoice> TlknPaymentInvoices { get; set; }

    public virtual DbSet<TlknPaymentPaybackList> TlknPaymentPaybackLists { get; set; }

    public virtual DbSet<TlknPaymentTicket> TlknPaymentTickets { get; set; }

    public virtual DbSet<TlknResourceCategoryList> TlknResourceCategoryLists { get; set; }

    public virtual DbSet<TlknResourceList> TlknResourceLists { get; set; }

    public virtual DbSet<TlknResourceSectionList> TlknResourceSectionLists { get; set; }

    public virtual DbSet<TlknRssFeedList> TlknRssFeedLists { get; set; }

    public virtual DbSet<TlknSession> TlknSessions { get; set; }

    public virtual DbSet<TlknSetting> TlknSettings { get; set; }

    public virtual DbSet<TlknSettingImage> TlknSettingImages { get; set; }

    public virtual DbSet<TlknShopCategoryList> TlknShopCategoryLists { get; set; }

    public virtual DbSet<TlknStickerCategoryList> TlknStickerCategoryLists { get; set; }

    public virtual DbSet<TlknStickerImageList> TlknStickerImageLists { get; set; }

    public virtual DbSet<TlknStickerSetList> TlknStickerSetLists { get; set; }

    public virtual DbSet<TlknThemeCategoryList> TlknThemeCategoryLists { get; set; }

    public virtual DbSet<TlknThemeList> TlknThemeLists { get; set; }

    public virtual DbSet<TlknThemeSetList> TlknThemeSetLists { get; set; }

    public virtual DbSet<TlknTokenList> TlknTokenLists { get; set; }

    public virtual DbSet<TlknUserBlacklist> TlknUserBlacklists { get; set; }

    public virtual DbSet<TlknUserBroadcastFavoriteList> TlknUserBroadcastFavoriteLists { get; set; }

    public virtual DbSet<TlknUserBroadcastFreeGroupshow> TlknUserBroadcastFreeGroupshows { get; set; }

    public virtual DbSet<TlknUserBroadcastFreePrivateshow> TlknUserBroadcastFreePrivateshows { get; set; }

    public virtual DbSet<TlknUserBroadcastFreeVideo> TlknUserBroadcastFreeVideos { get; set; }

    public virtual DbSet<TlknUserBroadcastGroupshowArchiveList> TlknUserBroadcastGroupshowArchiveLists { get; set; }

    public virtual DbSet<TlknUserBroadcastGroupshowCameraEventList> TlknUserBroadcastGroupshowCameraEventLists { get; set; }

    public virtual DbSet<TlknUserBroadcastGroupshowFavoriteList> TlknUserBroadcastGroupshowFavoriteLists { get; set; }

    public virtual DbSet<TlknUserBroadcastGroupshowFreeVideoList> TlknUserBroadcastGroupshowFreeVideoLists { get; set; }

    public virtual DbSet<TlknUserBroadcastGroupshowInvitationRequestHistoryList> TlknUserBroadcastGroupshowInvitationRequestHistoryLists { get; set; }

    public virtual DbSet<TlknUserBroadcastGroupshowInvitationRequestList> TlknUserBroadcastGroupshowInvitationRequestLists { get; set; }

    public virtual DbSet<TlknUserBroadcastGroupshowLoginList> TlknUserBroadcastGroupshowLoginLists { get; set; }

    public virtual DbSet<TlknUserBroadcastGroupshowMessageList> TlknUserBroadcastGroupshowMessageLists { get; set; }

    public virtual DbSet<TlknUserBroadcastGroupshowOnlineList> TlknUserBroadcastGroupshowOnlineLists { get; set; }

    public virtual DbSet<TlknUserBroadcastGroupshowRequestList> TlknUserBroadcastGroupshowRequestLists { get; set; }

    public virtual DbSet<TlknUserBroadcastGroupshowSessionTicketList> TlknUserBroadcastGroupshowSessionTicketLists { get; set; }

    public virtual DbSet<TlknUserBroadcastGroupshowTimeConsume> TlknUserBroadcastGroupshowTimeConsumes { get; set; }

    public virtual DbSet<TlknUserBroadcastGroupshowVideoList> TlknUserBroadcastGroupshowVideoLists { get; set; }

    public virtual DbSet<TlknUserBroadcastGroupshowVideoTicketList> TlknUserBroadcastGroupshowVideoTicketLists { get; set; }

    public virtual DbSet<TlknUserBroadcastOnline> TlknUserBroadcastOnlines { get; set; }

    public virtual DbSet<TlknUserBroadcastPrivateshowArchiveList> TlknUserBroadcastPrivateshowArchiveLists { get; set; }

    public virtual DbSet<TlknUserBroadcastPrivateshowCameraEventList> TlknUserBroadcastPrivateshowCameraEventLists { get; set; }

    public virtual DbSet<TlknUserBroadcastPrivateshowFavoriteList> TlknUserBroadcastPrivateshowFavoriteLists { get; set; }

    public virtual DbSet<TlknUserBroadcastPrivateshowFreeVideoList> TlknUserBroadcastPrivateshowFreeVideoLists { get; set; }

    public virtual DbSet<TlknUserBroadcastPrivateshowInvitationRequestHistoryList> TlknUserBroadcastPrivateshowInvitationRequestHistoryLists { get; set; }

    public virtual DbSet<TlknUserBroadcastPrivateshowInvitationRequestList> TlknUserBroadcastPrivateshowInvitationRequestLists { get; set; }

    public virtual DbSet<TlknUserBroadcastPrivateshowLoginList> TlknUserBroadcastPrivateshowLoginLists { get; set; }

    public virtual DbSet<TlknUserBroadcastPrivateshowMessageList> TlknUserBroadcastPrivateshowMessageLists { get; set; }

    public virtual DbSet<TlknUserBroadcastPrivateshowOnlineList> TlknUserBroadcastPrivateshowOnlineLists { get; set; }

    public virtual DbSet<TlknUserBroadcastPrivateshowRequestList> TlknUserBroadcastPrivateshowRequestLists { get; set; }

    public virtual DbSet<TlknUserBroadcastPrivateshowSessionTicketList> TlknUserBroadcastPrivateshowSessionTicketLists { get; set; }

    public virtual DbSet<TlknUserBroadcastPrivateshowTimeConsume> TlknUserBroadcastPrivateshowTimeConsumes { get; set; }

    public virtual DbSet<TlknUserBroadcastPrivateshowVideoList> TlknUserBroadcastPrivateshowVideoLists { get; set; }

    public virtual DbSet<TlknUserBroadcastPrivateshowVideoTicketList> TlknUserBroadcastPrivateshowVideoTicketLists { get; set; }

    public virtual DbSet<TlknUserChatCss> TlknUserChatCsses { get; set; }

    public virtual DbSet<TlknUserDatingMatchEventList> TlknUserDatingMatchEventLists { get; set; }

    public virtual DbSet<TlknUserDatingMatchLikeList> TlknUserDatingMatchLikeLists { get; set; }

    public virtual DbSet<TlknUserDatingMatchMutualList> TlknUserDatingMatchMutualLists { get; set; }

    public virtual DbSet<TlknUserDatingThinglikeCategory> TlknUserDatingThinglikeCategories { get; set; }

    public virtual DbSet<TlknUserDeviceList> TlknUserDeviceLists { get; set; }

    public virtual DbSet<TlknUserEventInvitationList> TlknUserEventInvitationLists { get; set; }

    public virtual DbSet<TlknUserEventList> TlknUserEventLists { get; set; }

    public virtual DbSet<TlknUserFileAction> TlknUserFileActions { get; set; }

    public virtual DbSet<TlknUserFileRemoteList> TlknUserFileRemoteLists { get; set; }

    public virtual DbSet<TlknUserForumCategoryList> TlknUserForumCategoryLists { get; set; }

    public virtual DbSet<TlknUserForumCommentEventList> TlknUserForumCommentEventLists { get; set; }

    public virtual DbSet<TlknUserForumCommentList> TlknUserForumCommentLists { get; set; }

    public virtual DbSet<TlknUserForumCommentReplyEventList> TlknUserForumCommentReplyEventLists { get; set; }

    public virtual DbSet<TlknUserForumCommentReplyList> TlknUserForumCommentReplyLists { get; set; }

    public virtual DbSet<TlknUserForumEventList> TlknUserForumEventLists { get; set; }

    public virtual DbSet<TlknUserForumMessageList> TlknUserForumMessageLists { get; set; }

    public virtual DbSet<TlknUserForumMessageViewList> TlknUserForumMessageViewLists { get; set; }

    public virtual DbSet<TlknUserForumMyPinMessageList> TlknUserForumMyPinMessageLists { get; set; }

    public virtual DbSet<TlknUserForumMyPostMessageList> TlknUserForumMyPostMessageLists { get; set; }

    public virtual DbSet<TlknUserForumQueryList> TlknUserForumQueryLists { get; set; }

    public virtual DbSet<TlknUserFriend> TlknUserFriends { get; set; }

    public virtual DbSet<TlknUserFriendTemp> TlknUserFriendTemps { get; set; }

    public virtual DbSet<TlknUserGalleryImageList> TlknUserGalleryImageLists { get; set; }

    public virtual DbSet<TlknUserGalleryImageListx> TlknUserGalleryImageListxes { get; set; }

    public virtual DbSet<TlknUserGalleryList> TlknUserGalleryLists { get; set; }

    public virtual DbSet<TlknUserGiphyImageList> TlknUserGiphyImageLists { get; set; }

    public virtual DbSet<TlknUserGroupFriend> TlknUserGroupFriends { get; set; }

    public virtual DbSet<TlknUserGroupshow> TlknUserGroupshows { get; set; }

    public virtual DbSet<TlknUserGroupshowArchive> TlknUserGroupshowArchives { get; set; }

    public virtual DbSet<TlknUserGroupshowCameraEvent> TlknUserGroupshowCameraEvents { get; set; }

    public virtual DbSet<TlknUserGroupshowFavorite> TlknUserGroupshowFavorites { get; set; }

    public virtual DbSet<TlknUserGroupshowInvitation> TlknUserGroupshowInvitations { get; set; }

    public virtual DbSet<TlknUserGroupshowLogin> TlknUserGroupshowLogins { get; set; }

    public virtual DbSet<TlknUserGroupshowMessage> TlknUserGroupshowMessages { get; set; }

    public virtual DbSet<TlknUserGroupshowOnline> TlknUserGroupshowOnlines { get; set; }

    public virtual DbSet<TlknUserGroupshowRequest> TlknUserGroupshowRequests { get; set; }

    public virtual DbSet<TlknUserGroupshowTicket> TlknUserGroupshowTickets { get; set; }

    public virtual DbSet<TlknUserGroupshowTimeConsume> TlknUserGroupshowTimeConsumes { get; set; }

    public virtual DbSet<TlknUserGroupshowVideo> TlknUserGroupshowVideos { get; set; }

    public virtual DbSet<TlknUserGroupshowVideoTicket> TlknUserGroupshowVideoTickets { get; set; }

    public virtual DbSet<TlknUserInviteshowHistory> TlknUserInviteshowHistories { get; set; }

    public virtual DbSet<TlknUserInviteshowLogin> TlknUserInviteshowLogins { get; set; }

    public virtual DbSet<TlknUserLocationRemoteList> TlknUserLocationRemoteLists { get; set; }

    public virtual DbSet<TlknUserLocationTrackFilter> TlknUserLocationTrackFilters { get; set; }

    public virtual DbSet<TlknUserLocationTrackOnlineList> TlknUserLocationTrackOnlineLists { get; set; }

    public virtual DbSet<TlknUserMobileNumberListHistory> TlknUserMobileNumberListHistories { get; set; }

    public virtual DbSet<TlknUserNotificationAlert> TlknUserNotificationAlerts { get; set; }

    public virtual DbSet<TlknUserNotificationOfflineMessage> TlknUserNotificationOfflineMessages { get; set; }

    public virtual DbSet<TlknUserOfflineMatchList> TlknUserOfflineMatchLists { get; set; }

    public virtual DbSet<TlknUserOfflineRequestList> TlknUserOfflineRequestLists { get; set; }

    public virtual DbSet<TlknUserPaymentEarnTokenList> TlknUserPaymentEarnTokenLists { get; set; }

    public virtual DbSet<TlknUserPaymentInvoiceItemList> TlknUserPaymentInvoiceItemLists { get; set; }

    public virtual DbSet<TlknUserPaymentInvoiceList> TlknUserPaymentInvoiceLists { get; set; }

    public virtual DbSet<TlknUserPaymentInvoiceOrderList> TlknUserPaymentInvoiceOrderLists { get; set; }

    public virtual DbSet<TlknUserPaymentList> TlknUserPaymentLists { get; set; }

    public virtual DbSet<TlknUserPaymentOrderStatus> TlknUserPaymentOrderStatuses { get; set; }

    public virtual DbSet<TlknUserPaymentPaybackHistoryList> TlknUserPaymentPaybackHistoryLists { get; set; }

    public virtual DbSet<TlknUserPaymentPaybackList> TlknUserPaymentPaybackLists { get; set; }

    public virtual DbSet<TlknUserPostAttachCommentEventList> TlknUserPostAttachCommentEventLists { get; set; }

    public virtual DbSet<TlknUserPostAttachCommentList> TlknUserPostAttachCommentLists { get; set; }

    public virtual DbSet<TlknUserPostAttachCommentReplyEventList> TlknUserPostAttachCommentReplyEventLists { get; set; }

    public virtual DbSet<TlknUserPostAttachCommentReplyList> TlknUserPostAttachCommentReplyLists { get; set; }

    public virtual DbSet<TlknUserPostAttachEventList> TlknUserPostAttachEventLists { get; set; }

    public virtual DbSet<TlknUserPostAttachList> TlknUserPostAttachLists { get; set; }

    public virtual DbSet<TlknUserPostCommentEventList> TlknUserPostCommentEventLists { get; set; }

    public virtual DbSet<TlknUserPostCommentList> TlknUserPostCommentLists { get; set; }

    public virtual DbSet<TlknUserPostCommentReplyEventList> TlknUserPostCommentReplyEventLists { get; set; }

    public virtual DbSet<TlknUserPostCommentReplyList> TlknUserPostCommentReplyLists { get; set; }

    public virtual DbSet<TlknUserPostEventList> TlknUserPostEventLists { get; set; }

    public virtual DbSet<TlknUserPostLineList> TlknUserPostLineLists { get; set; }

    public virtual DbSet<TlknUserPostMessage> TlknUserPostMessages { get; set; }

    public virtual DbSet<TlknUserPostMessageLineList> TlknUserPostMessageLineLists { get; set; }

    public virtual DbSet<TlknUserPostMessageList> TlknUserPostMessageLists { get; set; }

    public virtual DbSet<TlknUserPostShareFilter> TlknUserPostShareFilters { get; set; }

    public virtual DbSet<TlknUserPostShareImage> TlknUserPostShareImages { get; set; }

    public virtual DbSet<TlknUserPostShareImageTrace> TlknUserPostShareImageTraces { get; set; }

    public virtual DbSet<TlknUserPostShareImageUserList> TlknUserPostShareImageUserLists { get; set; }

    public virtual DbSet<TlknUserPostShareSetting> TlknUserPostShareSettings { get; set; }

    public virtual DbSet<TlknUserPostShareVideo> TlknUserPostShareVideos { get; set; }

    public virtual DbSet<TlknUserPostShareVideoTrace> TlknUserPostShareVideoTraces { get; set; }

    public virtual DbSet<TlknUserPostShareVideoUserList> TlknUserPostShareVideoUserLists { get; set; }

    public virtual DbSet<TlknUserPostShareVideoYoutube> TlknUserPostShareVideoYoutubes { get; set; }

    public virtual DbSet<TlknUserPostTraceList> TlknUserPostTraceLists { get; set; }

    public virtual DbSet<TlknUserPrivateshow> TlknUserPrivateshows { get; set; }

    public virtual DbSet<TlknUserPrivateshowInvitation> TlknUserPrivateshowInvitations { get; set; }

    public virtual DbSet<TlknUserPrivateshowLogin> TlknUserPrivateshowLogins { get; set; }

    public virtual DbSet<TlknUserPrivateshowOnline> TlknUserPrivateshowOnlines { get; set; }

    public virtual DbSet<TlknUserPrivateshowTicket> TlknUserPrivateshowTickets { get; set; }

    public virtual DbSet<TlknUserPrivateshowVideo> TlknUserPrivateshowVideos { get; set; }

    public virtual DbSet<TlknUserProfilePrivacyUserList> TlknUserProfilePrivacyUserLists { get; set; }

    public virtual DbSet<TlknUserProfileViewerList> TlknUserProfileViewerLists { get; set; }

    public virtual DbSet<TlknUserProfileVisibleFilter> TlknUserProfileVisibleFilters { get; set; }

    public virtual DbSet<TlknUserPurchasePaymentHistoryList> TlknUserPurchasePaymentHistoryLists { get; set; }

    public virtual DbSet<TlknUserPurchasePaymentList> TlknUserPurchasePaymentLists { get; set; }

    public virtual DbSet<TlknUserPurchasePaymentSuspendList> TlknUserPurchasePaymentSuspendLists { get; set; }

    public virtual DbSet<TlknUserPurchasePaymentTicketTokenList> TlknUserPurchasePaymentTicketTokenLists { get; set; }

    public virtual DbSet<TlknUserRequestList> TlknUserRequestLists { get; set; }

    public virtual DbSet<TlknUserScreenCallShow> TlknUserScreenCallShows { get; set; }

    public virtual DbSet<TlknUserScreenCallShowTicket> TlknUserScreenCallShowTickets { get; set; }

    public virtual DbSet<TlknUserScreenChatShow> TlknUserScreenChatShows { get; set; }

    public virtual DbSet<TlknUserScreenChatShowGroupOnline> TlknUserScreenChatShowGroupOnlines { get; set; }

    public virtual DbSet<TlknUserScreenChatShowGroupUserTemp> TlknUserScreenChatShowGroupUserTemps { get; set; }

    public virtual DbSet<TlknUserScreenChatShowInvitation> TlknUserScreenChatShowInvitations { get; set; }

    public virtual DbSet<TlknUserScreenChatShowInvite> TlknUserScreenChatShowInvites { get; set; }

    public virtual DbSet<TlknUserScreenChatShowLogin> TlknUserScreenChatShowLogins { get; set; }

    public virtual DbSet<TlknUserScreenChatShowMessage> TlknUserScreenChatShowMessages { get; set; }

    public virtual DbSet<TlknUserScreenChatShowOwnerTemp> TlknUserScreenChatShowOwnerTemps { get; set; }

    public virtual DbSet<TlknUserScreenChatShowSeparatorLine> TlknUserScreenChatShowSeparatorLines { get; set; }

    public virtual DbSet<TlknUserScreenChatShowTicket> TlknUserScreenChatShowTickets { get; set; }

    public virtual DbSet<TlknUserSession> TlknUserSessions { get; set; }

    public virtual DbSet<TlknUserShareContactList> TlknUserShareContactLists { get; set; }

    public virtual DbSet<TlknUserShareFile> TlknUserShareFiles { get; set; }

    public virtual DbSet<TlknUserShareFileTrace> TlknUserShareFileTraces { get; set; }

    public virtual DbSet<TlknUserShareFileUserList> TlknUserShareFileUserLists { get; set; }

    public virtual DbSet<TlknUserShareImage> TlknUserShareImages { get; set; }

    public virtual DbSet<TlknUserShareImageTrace> TlknUserShareImageTraces { get; set; }

    public virtual DbSet<TlknUserShareImageUserList> TlknUserShareImageUserLists { get; set; }

    public virtual DbSet<TlknUserShareLocation> TlknUserShareLocations { get; set; }

    public virtual DbSet<TlknUserShareVideo> TlknUserShareVideos { get; set; }

    public virtual DbSet<TlknUserShareVideoTrace> TlknUserShareVideoTraces { get; set; }

    public virtual DbSet<TlknUserShareVideoUserList> TlknUserShareVideoUserLists { get; set; }

    public virtual DbSet<TlknUserShopStickerList> TlknUserShopStickerLists { get; set; }

    public virtual DbSet<TlknUserShopThemeList> TlknUserShopThemeLists { get; set; }

    public virtual DbSet<TlknUserShopWallpaperList> TlknUserShopWallpaperLists { get; set; }

    public virtual DbSet<TlknUserShowFile> TlknUserShowFiles { get; set; }

    public virtual DbSet<TlknUserShowHistory> TlknUserShowHistories { get; set; }

    public virtual DbSet<TlknUserShowLogin> TlknUserShowLogins { get; set; }

    public virtual DbSet<TlknUserShowYoutubevideo> TlknUserShowYoutubevideos { get; set; }

    public virtual DbSet<TlknUserSound> TlknUserSounds { get; set; }

    public virtual DbSet<TlknUserSoundEvent> TlknUserSoundEvents { get; set; }

    public virtual DbSet<TlknUserStickerCategoryList> TlknUserStickerCategoryLists { get; set; }

    public virtual DbSet<TlknUserStickerCountList> TlknUserStickerCountLists { get; set; }

    public virtual DbSet<TlknUserStickerImageList> TlknUserStickerImageLists { get; set; }

    public virtual DbSet<TlknUserStickerLikeList> TlknUserStickerLikeLists { get; set; }

    public virtual DbSet<TlknUserStickerPreviewList> TlknUserStickerPreviewLists { get; set; }

    public virtual DbSet<TlknUserStickerRateList> TlknUserStickerRateLists { get; set; }

    public virtual DbSet<TlknUserStickerSetList> TlknUserStickerSetLists { get; set; }

    public virtual DbSet<TlknUserStickerShareList> TlknUserStickerShareLists { get; set; }

    public virtual DbSet<TlknUserStickerTopList> TlknUserStickerTopLists { get; set; }

    public virtual DbSet<TlknUserStickerViewList> TlknUserStickerViewLists { get; set; }

    public virtual DbSet<TlknUserSubscriptionMessageList> TlknUserSubscriptionMessageLists { get; set; }

    public virtual DbSet<TlknUserSubscriptionPaymentHistoryList> TlknUserSubscriptionPaymentHistoryLists { get; set; }

    public virtual DbSet<TlknUserSubscriptionPaymentList> TlknUserSubscriptionPaymentLists { get; set; }

    public virtual DbSet<TlknUserSubscriptionPaymentSuspendList> TlknUserSubscriptionPaymentSuspendLists { get; set; }

    public virtual DbSet<TlknUserSubscriptionPaymentTicketTokenList> TlknUserSubscriptionPaymentTicketTokenLists { get; set; }

    public virtual DbSet<TlknUserSuggestList> TlknUserSuggestLists { get; set; }

    public virtual DbSet<TlknUserTempList> TlknUserTempLists { get; set; }

    public virtual DbSet<TlknUserThemeCategoryList> TlknUserThemeCategoryLists { get; set; }

    public virtual DbSet<TlknUserThemeCountList> TlknUserThemeCountLists { get; set; }

    public virtual DbSet<TlknUserThemeList> TlknUserThemeLists { get; set; }

    public virtual DbSet<TlknUserThemeSetList> TlknUserThemeSetLists { get; set; }

    public virtual DbSet<TlknUserTokenCreditBalance> TlknUserTokenCreditBalances { get; set; }

    public virtual DbSet<TlknUserTokenEarn> TlknUserTokenEarns { get; set; }

    public virtual DbSet<TlknUserTokenPurchaseList> TlknUserTokenPurchaseLists { get; set; }

    public virtual DbSet<TlknUserTokenSpend> TlknUserTokenSpends { get; set; }

    public virtual DbSet<TlknUserTokenStatus> TlknUserTokenStatuses { get; set; }

    public virtual DbSet<TlknUserTokenTransactionLineList> TlknUserTokenTransactionLineLists { get; set; }

    public virtual DbSet<TlknUserTokenTransactionList> TlknUserTokenTransactionLists { get; set; }

    public virtual DbSet<TlknUserTokenTransfer> TlknUserTokenTransfers { get; set; }

    public virtual DbSet<TlknUserTokenTransferBalance> TlknUserTokenTransferBalances { get; set; }

    public virtual DbSet<TlknUserTraceAction> TlknUserTraceActions { get; set; }

    public virtual DbSet<TlknUserTraceCallStatus> TlknUserTraceCallStatuses { get; set; }

    public virtual DbSet<TlknUserTracePageStatus> TlknUserTracePageStatuses { get; set; }

    public virtual DbSet<TlknUserTraceStatus> TlknUserTraceStatuses { get; set; }

    public virtual DbSet<TlknUserVideoshow> TlknUserVideoshows { get; set; }

    public virtual DbSet<TlknUserVideoshowArchive> TlknUserVideoshowArchives { get; set; }

    public virtual DbSet<TlknUserVideoshowInvitation> TlknUserVideoshowInvitations { get; set; }

    public virtual DbSet<TlknUserVideoshowLive> TlknUserVideoshowLives { get; set; }

    public virtual DbSet<TlknUserVideoshowLogin> TlknUserVideoshowLogins { get; set; }

    public virtual DbSet<TlknUserVideoshowMessage> TlknUserVideoshowMessages { get; set; }

    public virtual DbSet<TlknUserVideoshowTicket> TlknUserVideoshowTickets { get; set; }

    public virtual DbSet<TlknUserVideoshowVideo> TlknUserVideoshowVideos { get; set; }

    public virtual DbSet<TlknUserVideoshowVideoTicket> TlknUserVideoshowVideoTickets { get; set; }

    public virtual DbSet<TlknUserViewerList> TlknUserViewerLists { get; set; }

    public virtual DbSet<TlknUserVoiceshow> TlknUserVoiceshows { get; set; }

    public virtual DbSet<TlknUserVoiceshowArchive> TlknUserVoiceshowArchives { get; set; }

    public virtual DbSet<TlknUserVoiceshowInvitation> TlknUserVoiceshowInvitations { get; set; }

    public virtual DbSet<TlknUserVoiceshowLive> TlknUserVoiceshowLives { get; set; }

    public virtual DbSet<TlknUserVoiceshowLogin> TlknUserVoiceshowLogins { get; set; }

    public virtual DbSet<TlknUserVoiceshowMessage> TlknUserVoiceshowMessages { get; set; }

    public virtual DbSet<TlknUserVoiceshowTicket> TlknUserVoiceshowTickets { get; set; }

    public virtual DbSet<TlknUserVoiceshowVideo> TlknUserVoiceshowVideos { get; set; }

    public virtual DbSet<TlknUserVoiceshowVideoTicket> TlknUserVoiceshowVideoTickets { get; set; }

    public virtual DbSet<TlknUserWallpaperCategoryList> TlknUserWallpaperCategoryLists { get; set; }

    public virtual DbSet<TlknUserWallpaperCountList> TlknUserWallpaperCountLists { get; set; }

    public virtual DbSet<TlknUserWallpaperImageList> TlknUserWallpaperImageLists { get; set; }

    public virtual DbSet<TlknUserWallpaperLikeList> TlknUserWallpaperLikeLists { get; set; }

    public virtual DbSet<TlknUserWallpaperPreviewList> TlknUserWallpaperPreviewLists { get; set; }

    public virtual DbSet<TlknUserWallpaperRateList> TlknUserWallpaperRateLists { get; set; }

    public virtual DbSet<TlknUserWallpaperSetList> TlknUserWallpaperSetLists { get; set; }

    public virtual DbSet<TlknUserWallpaperShareList> TlknUserWallpaperShareLists { get; set; }

    public virtual DbSet<TlknUserWallpaperTopList> TlknUserWallpaperTopLists { get; set; }

    public virtual DbSet<TlknUserWallpaperViewList> TlknUserWallpaperViewLists { get; set; }

    public virtual DbSet<TlknWallpaperCategoryList> TlknWallpaperCategoryLists { get; set; }

    public virtual DbSet<TlknWallpaperImageList> TlknWallpaperImageLists { get; set; }

    public virtual DbSet<TlknWallpaperSetList> TlknWallpaperSetLists { get; set; }

    public virtual DbSet<TlnkUserCamera> TlnkUserCameras { get; set; }

    public virtual DbSet<TlnkUserCameraViewer> TlnkUserCameraViewers { get; set; }

    public virtual DbSet<UserLogin> UserLogins { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=SHAYMAA-LAP\\HOBY333EXPRESS;Initial Catalog=BSRVEMCODB;Integrated Security=True;Trusted_Connection=True;TrustServerCertificate=True;");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AdultUserTokenPurchase>(entity =>
        {
            entity.HasKey(e => e.UpurchaseId);

            entity.ToTable("ADULT_USER_TOKEN_PURCHASE");

            entity.Property(e => e.UpurchaseId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("UPurchaseID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.PaymentStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentTicketId).HasColumnName("PaymentTicketID");
            entity.Property(e => e.PaymentTicketStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PurchaseId)
                .ValueGeneratedOnAdd()
                .HasColumnName("PurchaseID");
            entity.Property(e => e.PurchaseOrderId).HasColumnName("PurchaseOrderID");
            entity.Property(e => e.SiteTokenCostTotalValue).HasColumnType("money");
            entity.Property(e => e.SiteTokenPricePerOneValue).HasColumnType("money");
            entity.Property(e => e.TokenCostTotalValue).HasColumnType("money");
            entity.Property(e => e.TokenPricePerOneValue).HasColumnType("money");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<AspNetRole1>(entity =>
        {
            entity.ToTable("AspNetRoles");

            entity.HasIndex(e => e.NormalizedName, "RoleNameIndex")
                .IsUnique()
                .HasFilter("([NormalizedName] IS NOT NULL)");

            entity.Property(e => e.Name).HasMaxLength(256);
            entity.Property(e => e.NormalizedName).HasMaxLength(256);
        });

        modelBuilder.Entity<AspNetRoleClaim>(entity =>
        {
            entity.HasIndex(e => e.RoleId, "IX_AspNetRoleClaims_RoleId");

            entity.HasOne(d => d.Role).WithMany(p => p.AspNetRoleClaims).HasForeignKey(d => d.RoleId);
        });

        modelBuilder.Entity<AspNetUser1>(entity =>
        {
            entity.ToTable("AspNetUsers");

            entity.HasIndex(e => e.NormalizedEmail, "EmailIndex");

            entity.HasIndex(e => e.NormalizedUserName, "UserNameIndex")
                .IsUnique()
                .HasFilter("([NormalizedUserName] IS NOT NULL)");

            entity.Property(e => e.Email).HasMaxLength(256);
            entity.Property(e => e.FirstName).HasMaxLength(256);
            entity.Property(e => e.IsApproved).HasDefaultValueSql("((0))");
            entity.Property(e => e.LastName).HasMaxLength(256);
            entity.Property(e => e.NormalizedEmail).HasMaxLength(256);
            entity.Property(e => e.NormalizedUserName).HasMaxLength(256);
            entity.Property(e => e.PasswordAnswer).HasMaxLength(128);
            entity.Property(e => e.PasswordQuestion).HasMaxLength(256);
            entity.Property(e => e.UserName).HasMaxLength(256);

            entity.HasMany(d => d.Roles).WithMany(p => p.Users)
                .UsingEntity<Dictionary<string, object>>(
                    "AspNetUserRole",
                    r => r.HasOne<AspNetRole1>().WithMany().HasForeignKey("RoleId"),
                    l => l.HasOne<AspNetUser1>().WithMany().HasForeignKey("UserId"),
                    j =>
                    {
                        j.HasKey("UserId", "RoleId");
                        j.ToTable("AspNetUserRoles");
                        j.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");
                    });
        });

        modelBuilder.Entity<AspNetUserClaim>(entity =>
        {
            entity.HasIndex(e => e.UserId, "IX_AspNetUserClaims_UserId");

            entity.HasOne(d => d.User).WithMany(p => p.AspNetUserClaims).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<AspNetUserLogin>(entity =>
        {
            entity.HasKey(e => new { e.LoginProvider, e.ProviderKey });

            entity.HasIndex(e => e.UserId, "IX_AspNetUserLogins_UserId");

            entity.HasOne(d => d.User).WithMany(p => p.AspNetUserLogins).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<AspNetUserToken>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.LoginProvider, e.Name });

            entity.HasOne(d => d.User).WithMany(p => p.AspNetUserTokens).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<AspnetApplication>(entity =>
        {
            entity.HasKey(e => e.ApplicationId)
                .HasName("PK__aspnet_A__C93A4C98FE4F0752")
                .IsClustered(false);

            entity.ToTable("aspnet_Applications");

            entity.HasIndex(e => e.LoweredApplicationName, "UQ__aspnet_A__17477DE4BEEC64EF").IsUnique();

            entity.HasIndex(e => e.ApplicationName, "UQ__aspnet_A__30910331F558F1E1").IsUnique();

            entity.Property(e => e.ApplicationId).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ApplicationName).HasMaxLength(256);
            entity.Property(e => e.Description).HasMaxLength(256);
            entity.Property(e => e.LoweredApplicationName).HasMaxLength(256);
        });

        modelBuilder.Entity<AspnetMembership>(entity =>
        {
            entity.HasKey(e => e.UserId)
                .HasName("PK__aspnet_M__1788CC4DE6D8B777")
                .IsClustered(false);

            entity.ToTable("aspnet_Membership");

            entity.Property(e => e.UserId).ValueGeneratedNever();
            entity.Property(e => e.Comment).HasColumnType("ntext");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Email).HasMaxLength(256);
            entity.Property(e => e.FailedPasswordAnswerAttemptWindowStart).HasColumnType("datetime");
            entity.Property(e => e.FailedPasswordAttemptWindowStart).HasColumnType("datetime");
            entity.Property(e => e.LastLockoutDate).HasColumnType("datetime");
            entity.Property(e => e.LastLoginDate).HasColumnType("datetime");
            entity.Property(e => e.LastPasswordChangedDate).HasColumnType("datetime");
            entity.Property(e => e.LoweredEmail).HasMaxLength(256);
            entity.Property(e => e.MobilePin)
                .HasMaxLength(16)
                .HasColumnName("MobilePIN");
            entity.Property(e => e.Password).HasMaxLength(128);
            entity.Property(e => e.PasswordAnswer).HasMaxLength(128);
            entity.Property(e => e.PasswordQuestion).HasMaxLength(256);
            entity.Property(e => e.PasswordSalt).HasMaxLength(128);

            entity.HasOne(d => d.Application).WithMany(p => p.AspnetMemberships)
                .HasForeignKey(d => d.ApplicationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__aspnet_Me__Appli__21AD7A6A");

            entity.HasOne(d => d.User).WithOne(p => p.AspnetMembership)
                .HasForeignKey<AspnetMembership>(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__aspnet_Me__UserI__22A19EA3");
        });

        modelBuilder.Entity<AspnetPath>(entity =>
        {
            entity.HasKey(e => e.PathId)
                .HasName("PK__aspnet_P__CD67DC58BB3C0922")
                .IsClustered(false);

            entity.ToTable("aspnet_Paths");

            entity.Property(e => e.PathId).HasDefaultValueSql("(newid())");
            entity.Property(e => e.LoweredPath).HasMaxLength(256);
            entity.Property(e => e.Path).HasMaxLength(256);

            entity.HasOne(d => d.Application).WithMany(p => p.AspnetPaths)
                .HasForeignKey(d => d.ApplicationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__aspnet_Pa__Appli__2395C2DC");
        });

        modelBuilder.Entity<AspnetPersonalizationAllUser>(entity =>
        {
            entity.HasKey(e => e.PathId).HasName("PK__aspnet_P__CD67DC59C47CBBC2");

            entity.ToTable("aspnet_PersonalizationAllUsers");

            entity.Property(e => e.PathId).ValueGeneratedNever();
            entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.PageSettings).HasColumnType("image");

            entity.HasOne(d => d.Path).WithOne(p => p.AspnetPersonalizationAllUser)
                .HasForeignKey<AspnetPersonalizationAllUser>(d => d.PathId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__aspnet_Pe__PathI__2489E715");
        });

        modelBuilder.Entity<AspnetPersonalizationPerUser>(entity =>
        {
            entity.HasKey(e => e.Id)
                .HasName("PK__aspnet_P__3214EC06C49223EA")
                .IsClustered(false);

            entity.ToTable("aspnet_PersonalizationPerUser");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.PageSettings).HasColumnType("image");

            entity.HasOne(d => d.Path).WithMany(p => p.AspnetPersonalizationPerUsers)
                .HasForeignKey(d => d.PathId)
                .HasConstraintName("FK__aspnet_Pe__PathI__257E0B4E");

            entity.HasOne(d => d.User).WithMany(p => p.AspnetPersonalizationPerUsers)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__aspnet_Pe__UserI__26722F87");
        });

        modelBuilder.Entity<AspnetProfile>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__aspnet_P__1788CC4C64FA5374");

            entity.ToTable("aspnet_Profile");

            entity.Property(e => e.UserId).ValueGeneratedNever();
            entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.PropertyNames).HasColumnType("ntext");
            entity.Property(e => e.PropertyValuesBinary).HasColumnType("image");
            entity.Property(e => e.PropertyValuesString).HasColumnType("ntext");

            entity.HasOne(d => d.User).WithOne(p => p.AspnetProfile)
                .HasForeignKey<AspnetProfile>(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__aspnet_Pr__UserI__276653C0");
        });

        modelBuilder.Entity<AspnetRole>(entity =>
        {
            entity.HasKey(e => e.RoleId)
                .HasName("PK__aspnet_R__8AFACE1BE8E98FDF")
                .IsClustered(false);

            entity.ToTable("aspnet_Roles");

            entity.Property(e => e.RoleId).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Description).HasMaxLength(256);
            entity.Property(e => e.LoweredRoleName).HasMaxLength(256);
            entity.Property(e => e.RoleName).HasMaxLength(256);

            entity.HasOne(d => d.Application).WithMany(p => p.AspnetRoles)
                .HasForeignKey(d => d.ApplicationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__aspnet_Ro__Appli__285A77F9");
        });

        modelBuilder.Entity<AspnetSchemaVersion>(entity =>
        {
            entity.HasKey(e => new { e.Feature, e.CompatibleSchemaVersion }).HasName("PK__aspnet_S__5A1E6BC12A735407");

            entity.ToTable("aspnet_SchemaVersions");

            entity.Property(e => e.Feature).HasMaxLength(128);
            entity.Property(e => e.CompatibleSchemaVersion).HasMaxLength(128);
        });

        modelBuilder.Entity<AspnetUser>(entity =>
        {
            entity.HasKey(e => e.UserId)
                .HasName("PK__aspnet_U__1788CC4D0B8535E0")
                .IsClustered(false);

            entity.ToTable("aspnet_Users");

            entity.Property(e => e.UserId).HasDefaultValueSql("(newid())");
            entity.Property(e => e.LastActivityDate).HasColumnType("datetime");
            entity.Property(e => e.LoweredUserName).HasMaxLength(256);
            entity.Property(e => e.MobileAlias).HasMaxLength(16);
            entity.Property(e => e.UserName).HasMaxLength(256);

            entity.HasOne(d => d.Application).WithMany(p => p.AspnetUsers)
                .HasForeignKey(d => d.ApplicationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__aspnet_Us__Appli__294E9C32");

            entity.HasMany(d => d.Roles).WithMany(p => p.Users)
                .UsingEntity<Dictionary<string, object>>(
                    "AspnetUsersInRole",
                    r => r.HasOne<AspnetRole>().WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__aspnet_Us__RoleI__2A42C06B"),
                    l => l.HasOne<AspnetUser>().WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__aspnet_Us__UserI__2B36E4A4"),
                    j =>
                    {
                        j.HasKey("UserId", "RoleId").HasName("PK__aspnet_U__AF2760ADB968B1E6");
                        j.ToTable("aspnet_UsersInRoles");
                    });
        });

        modelBuilder.Entity<AspnetWebEventEvent>(entity =>
        {
            entity.HasKey(e => e.EventId).HasName("PK__aspnet_W__7944C810AB326D3D");

            entity.ToTable("aspnet_WebEvent_Events");

            entity.Property(e => e.EventId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ApplicationPath).HasMaxLength(256);
            entity.Property(e => e.ApplicationVirtualPath).HasMaxLength(256);
            entity.Property(e => e.Details).HasColumnType("ntext");
            entity.Property(e => e.EventOccurrence).HasColumnType("decimal(19, 0)");
            entity.Property(e => e.EventSequence).HasColumnType("decimal(19, 0)");
            entity.Property(e => e.EventTime).HasColumnType("datetime");
            entity.Property(e => e.EventTimeUtc).HasColumnType("datetime");
            entity.Property(e => e.EventType).HasMaxLength(256);
            entity.Property(e => e.ExceptionType).HasMaxLength(256);
            entity.Property(e => e.MachineName).HasMaxLength(256);
            entity.Property(e => e.Message).HasMaxLength(1024);
            entity.Property(e => e.RequestUrl).HasMaxLength(1024);
        });

        modelBuilder.Entity<BsrvemcoAppBuildingInformationCriterionList>(entity =>
        {
            entity.HasKey(e => e.AppbuildingInformationCriterionId);

            entity.ToTable("BSRVEMCO_APP_BUILDING_INFORMATION_CRITERION_LIST");

            entity.Property(e => e.AppbuildingInformationCriterionId).HasColumnName("APPBuildingInformationCriterionID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.AppinformationCode)
                .HasDefaultValueSql("((0))")
                .HasColumnName("APPInformationCode");
            entity.Property(e => e.AppinformationTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("APPInformationTokenID");
            entity.Property(e => e.ApptableCode)
                .HasDefaultValueSql("((0))")
                .HasColumnName("APPTableCode");
            entity.Property(e => e.ApptableTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("APPTableTokenID");
            entity.Property(e => e.CriterionCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.CriterionDescription).HasDefaultValueSql("((0))");
            entity.Property(e => e.CriterionName).HasDefaultValueSql("((0))");
            entity.Property(e => e.CriterionText).HasDefaultValueSql("((0))");
            entity.Property(e => e.CriterionTitle).HasDefaultValueSql("((0))");
            entity.Property(e => e.CriterionTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CriterionTokenID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<BsrvemcoAppBuildingInformationList>(entity =>
        {
            entity.HasKey(e => e.AppbuildingInformationId);

            entity.ToTable("BSRVEMCO_APP_BUILDING_INFORMATION_LIST");

            entity.Property(e => e.AppbuildingInformationId).HasColumnName("APPBuildingInformationID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.AppinformationCode)
                .HasDefaultValueSql("((0))")
                .HasColumnName("APPInformationCode");
            entity.Property(e => e.AppinformationTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("APPInformationTokenID");
            entity.Property(e => e.ApptableCode)
                .HasDefaultValueSql("((0))")
                .HasColumnName("APPTableCode");
            entity.Property(e => e.ApptableTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("APPTableTokenID");
            entity.Property(e => e.Commentary).HasDefaultValueSql("((0))");
            entity.Property(e => e.Criterion).HasDefaultValueSql("((0))");
            entity.Property(e => e.InformationDescription).HasDefaultValueSql("((0))");
            entity.Property(e => e.InformationName).HasDefaultValueSql("((0))");
            entity.Property(e => e.InformationText).HasDefaultValueSql("((0))");
            entity.Property(e => e.InformationTitle).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RiskControlMeasure).HasDefaultValueSql("((0))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.Score).HasDefaultValueSql("((0))");
            entity.Property(e => e.ScoreAdjusted).HasDefaultValueSql("((0))");
            entity.Property(e => e.ScoreManaged).HasDefaultValueSql("((0))");
            entity.Property(e => e.ScoreOriginal).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeoutAppNotification).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeoutSystemNotification).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeoutYearCount).HasDefaultValueSql("((0))");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<BsrvemcoAppBuildingTableList>(entity =>
        {
            entity.HasKey(e => e.UbuildingTableId);

            entity.ToTable("BSRVEMCO_APP_BUILDING_TABLE_LIST");

            entity.Property(e => e.UbuildingTableId).HasColumnName("UBuildingTableID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.ApptableCode)
                .HasDefaultValueSql("((0))")
                .HasColumnName("APPTableCode");
            entity.Property(e => e.ApptableTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("APPTableTokenID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.TableDescription).HasDefaultValueSql("((0))");
            entity.Property(e => e.TableName).HasDefaultValueSql("((0))");
            entity.Property(e => e.TableText).HasDefaultValueSql("((0))");
            entity.Property(e => e.TableTitle).HasDefaultValueSql("((0))");
            entity.Property(e => e.TableTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("TableTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<BsrvemcoAppCmsList>(entity =>
        {
            entity.HasKey(e => e.UappCmsid);

            entity.ToTable("BSRVEMCO_APP_CMS_LIST");

            entity.Property(e => e.UappCmsid).HasColumnName("UAppCMSID");
            entity.Property(e => e.AppCmscode)
                .HasDefaultValueSql("((0))")
                .HasColumnName("AppCMSCode");
            entity.Property(e => e.AppCmsname)
                .HasDefaultValueSql("((0))")
                .HasColumnName("AppCMSName");
            entity.Property(e => e.AppCmstokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("AppCMSTokenID");
            entity.Property(e => e.Cmscode)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CMSCode");
            entity.Property(e => e.Cmshtmlcontent)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CMSHTMLContent");
            entity.Property(e => e.Cmsname)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CMSName");
            entity.Property(e => e.CmsstyleCss)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CMSStyleCSS");
            entity.Property(e => e.Cmstitle)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CMSTitle");
            entity.Property(e => e.CmstokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CMSTokenID");
            entity.Property(e => e.Cmsvalue)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CMSValue");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSystemUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.OwnerMobileNumberTokenId).HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId).HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<BsrvemcoAppCmsPageList>(entity =>
        {
            entity.HasKey(e => e.UappPageId);

            entity.ToTable("BSRVEMCO_APP_CMS_PAGE_LIST");

            entity.Property(e => e.UappPageId).HasColumnName("UAppPageID");
            entity.Property(e => e.AppPageCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.AppPageName).HasDefaultValueSql("((0))");
            entity.Property(e => e.AppPageTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("AppPageTokenID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSystemUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.OwnerMobileNumberTokenId).HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId).HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.PageCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.PageHtmlcontent)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PageHTMLContent");
            entity.Property(e => e.PageName).HasDefaultValueSql("((0))");
            entity.Property(e => e.PageStyleCss)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PageStyleCSS");
            entity.Property(e => e.PageTitle).HasDefaultValueSql("((0))");
            entity.Property(e => e.PageTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PageTokenID");
            entity.Property(e => e.PageValue).HasDefaultValueSql("((0))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<BsrvemcoAppRoleList>(entity =>
        {
            entity.HasKey(e => e.UappRoleId);

            entity.ToTable("BSRVEMCO_APP_ROLE_LIST");

            entity.Property(e => e.UappRoleId).HasColumnName("UAppRoleID");
            entity.Property(e => e.AppRoleCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.AppRoleName).HasDefaultValueSql("((0))");
            entity.Property(e => e.AppRoleTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("AppRoleTokenID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSystemUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.OwnerMobileNumberTokenId).HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId).HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RoleCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.RoleName).HasDefaultValueSql("((0))");
            entity.Property(e => e.RoleTitle).HasDefaultValueSql("((0))");
            entity.Property(e => e.RoleValue).HasDefaultValueSql("((0))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserRole).HasDefaultValueSql("((0))");
        });

        modelBuilder.Entity<BsrvemcoDeviceList>(entity =>
        {
            entity.HasKey(e => e.UdeviceId);

            entity.ToTable("BSRVEMCO_DEVICE_LIST");

            entity.Property(e => e.UdeviceId).HasColumnName("UDeviceID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'track')");
            entity.Property(e => e.AndroidId).HasColumnName("AndroidID");
            entity.Property(e => e.DatabaseServerTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DatabaseServerTokenID");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.DeviceId).HasColumnName("DeviceID");
            entity.Property(e => e.Gcmid).HasColumnName("GCMID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MembershipType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PlatformOsid)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PlatformOSID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<BsrvemcoDeviceLocation>(entity =>
        {
            entity.HasKey(e => e.DeviceLocationId).HasName("PK_TLKN_DEVICE_LOCATION");

            entity.ToTable("BSRVEMCO_DEVICE_LOCATION");

            entity.Property(e => e.DeviceLocationId).HasColumnName("DeviceLocationID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.AddressLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.AddressLine1).HasDefaultValueSql("((0))");
            entity.Property(e => e.AddressLine2).HasDefaultValueSql("((0))");
            entity.Property(e => e.CityName).HasDefaultValueSql("((0))");
            entity.Property(e => e.CountryCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.CountryName).HasDefaultValueSql("((0))");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.Latitude).HasDefaultValueSql("((0))");
            entity.Property(e => e.Longitude).HasDefaultValueSql("((0))");
            entity.Property(e => e.OwnerMobileNumberTokenId).HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId).HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.PostalCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.StateName).HasDefaultValueSql("((0))");
            entity.Property(e => e.StreetLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.StreetLine1).HasDefaultValueSql("((0))");
            entity.Property(e => e.StreetLine2).HasDefaultValueSql("((0))");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<BsrvemcoGroupCategoryList>(entity =>
        {
            entity.HasKey(e => e.CategoryId);

            entity.ToTable("BSRVEMCO_GROUP_CATEGORY_LIST");

            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.CategoryCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.CategoryOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.CategoryTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CategoryTokenID");
            entity.Property(e => e.CategoryType).HasDefaultValueSql("((0))");
            entity.Property(e => e.DatabaseServerTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DatabaseServerTokenID");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystemCategory).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.OwnerMobileNumberTokenId).HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId).HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<BsrvemcoGroupRoleList>(entity =>
        {
            entity.HasKey(e => e.UgroupRoleId);

            entity.ToTable("BSRVEMCO_GROUP_ROLE_LIST");

            entity.Property(e => e.UgroupRoleId).HasColumnName("UGroupRoleID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.AvatarName).HasDefaultValueSql("((0))");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.CategoryTokenId).HasColumnName("CategoryTokenID");
            entity.Property(e => e.DatabaseServerTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DatabaseServerTokenID");
            entity.Property(e => e.GroupCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.GroupDescription).HasDefaultValueSql("((0))");
            entity.Property(e => e.GroupKey).HasDefaultValueSql("((0))");
            entity.Property(e => e.GroupName).HasDefaultValueSql("((0))");
            entity.Property(e => e.GroupOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.GroupRoleCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.GroupRoleName).HasDefaultValueSql("((0))");
            entity.Property(e => e.GroupRoleTitle).HasDefaultValueSql("((0))");
            entity.Property(e => e.GroupRoleTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupRoleTokenID");
            entity.Property(e => e.GroupRoleType).HasDefaultValueSql("((0))");
            entity.Property(e => e.GroupTitle).HasDefaultValueSql("((0))");
            entity.Property(e => e.GroupTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupTokenID");
            entity.Property(e => e.GroupType).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsCustomTitle).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<BsrvemcoUserAccountList>(entity =>
        {
            entity.HasKey(e => e.UaccountId).HasName("PK_TLKN_USER_ACCOUNT");

            entity.ToTable("BSRVEMCO_USER_ACCOUNT_LIST");

            entity.Property(e => e.UaccountId).HasColumnName("UAccountID");
            entity.Property(e => e.AccountIsEnable).HasDefaultValueSql("((0))");
            entity.Property(e => e.AccountIsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActionDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.ActionDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.ActionMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.ActionYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.BusinessJoinDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.BusinessJoinDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.BusinessJoinMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.BusinessJoinYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.DatingJoinDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.DatingJoinDate1)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.DatingJoinDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.DatingJoinMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.DatingJoinYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'personal')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.ExitDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.ExitMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.ExitYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBusiness).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystemUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.JoinDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.JoinMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.JoinYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.OwnerMobileNumberTokenId).HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId).HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RoleCode).HasDefaultValueSql("(N'free')");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.VisibleOnlineDateTimeMilliSec).HasDefaultValueSql("(N'0')");
        });

        modelBuilder.Entity<BsrvemcoUserApplicationLanguageList>(entity =>
        {
            entity.HasKey(e => e.UappLanguageId);

            entity.ToTable("BSRVEMCO_USER_APPLICATION_LANGUAGE_LIST");

            entity.Property(e => e.UappLanguageId).HasColumnName("UAppLanguageID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'trackl')");
            entity.Property(e => e.AndroidId).HasColumnName("AndroidID");
            entity.Property(e => e.CellIdentityGsm).HasColumnName("CellIdentityGSM");
            entity.Property(e => e.CountryIsocode).HasColumnName("CountryISOCode");
            entity.Property(e => e.DatabaseServerTokenId).HasColumnName("DatabaseServerTokenID");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.DeviceId).HasColumnName("DeviceID");
            entity.Property(e => e.Gcmid).HasColumnName("GCMID");
            entity.Property(e => e.GroupIdlevel1).HasColumnName("GroupIDLevel1");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDeviceOnRegister).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MembershipType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.MmsUaprofUrl).HasColumnName("MmsUAProfUrl");
            entity.Property(e => e.MobileNumberFormatUs).HasColumnName("MobileNumberFormatUS");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.MobileNumberOutUs).HasColumnName("MobileNumberOutUS");
            entity.Property(e => e.NetworkCountryIso).HasColumnName("NetworkCountryISO");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.PlatformOsid)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PlatformOSID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.SessionTokenId).HasColumnName("SessionTokenID");
            entity.Property(e => e.SimcountryIso).HasColumnName("SIMCountryISO");
            entity.Property(e => e.Simoperator).HasColumnName("SIMOperator");
            entity.Property(e => e.SimserialNumber).HasColumnName("SIMSerialNumber");
            entity.Property(e => e.Simstate).HasColumnName("SIMState");
            entity.Property(e => e.SubscriberId).HasColumnName("SubscriberID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<BsrvemcoUserApplicationLanguageTranslateList>(entity =>
        {
            entity.HasKey(e => e.UappLanguageTranslationId);

            entity.ToTable("BSRVEMCO_USER_APPLICATION_LANGUAGE_TRANSLATE_LIST");

            entity.Property(e => e.UappLanguageTranslationId).HasColumnName("UAppLanguageTranslationID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'trackl')");
            entity.Property(e => e.AndroidId).HasColumnName("AndroidID");
            entity.Property(e => e.CellIdentityGsm).HasColumnName("CellIdentityGSM");
            entity.Property(e => e.CountryIsocode).HasColumnName("CountryISOCode");
            entity.Property(e => e.DatabaseServerTokenId).HasColumnName("DatabaseServerTokenID");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.DeviceId).HasColumnName("DeviceID");
            entity.Property(e => e.Gcmid).HasColumnName("GCMID");
            entity.Property(e => e.GroupIdlevel1).HasColumnName("GroupIDLevel1");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDeviceOnRegister).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MembershipType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.MmsUaprofUrl).HasColumnName("MmsUAProfUrl");
            entity.Property(e => e.MobileNumberFormatUs).HasColumnName("MobileNumberFormatUS");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.MobileNumberOutUs).HasColumnName("MobileNumberOutUS");
            entity.Property(e => e.NetworkCountryIso).HasColumnName("NetworkCountryISO");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.PlatformOsid)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PlatformOSID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.SessionTokenId).HasColumnName("SessionTokenID");
            entity.Property(e => e.SimcountryIso).HasColumnName("SIMCountryISO");
            entity.Property(e => e.Simoperator).HasColumnName("SIMOperator");
            entity.Property(e => e.SimserialNumber).HasColumnName("SIMSerialNumber");
            entity.Property(e => e.Simstate).HasColumnName("SIMState");
            entity.Property(e => e.SubscriberId).HasColumnName("SubscriberID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<BsrvemcoUserAvatarImageList>(entity =>
        {
            entity.HasKey(e => e.UavatarImageId).HasName("PK_TLKN_USER_AVATAR_IMAGE_LIST");

            entity.ToTable("BSRVEMCO_USER_AVATAR_IMAGE_LIST");

            entity.Property(e => e.UavatarImageId).HasColumnName("UAvatarImageID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.GalleryId).HasColumnName("GalleryID");
            entity.Property(e => e.ImageLargeUrl).HasColumnName("ImageLargeURL");
            entity.Property(e => e.ImageMidUrl).HasColumnName("ImageMidURL");
            entity.Property(e => e.ImageSmallAwayUrl).HasColumnName("ImageSmallAwayURL");
            entity.Property(e => e.ImageSmallLiveUrl).HasColumnName("ImageSmallLiveURL");
            entity.Property(e => e.ImageSmallUrl).HasColumnName("ImageSmallURL");
            entity.Property(e => e.ImageTokenId).HasColumnName("ImageTokenID");
            entity.Property(e => e.ImageUrl).HasColumnName("ImageURL");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonalAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsProfile).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystemUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.OwnerMobileNumberTokenId).HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId).HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<BsrvemcoUserBackgroundImageList>(entity =>
        {
            entity.HasKey(e => e.UbackgroundImageId).HasName("PK_TLKN_USER_BACKGROUND_IMAGE_LIST");

            entity.ToTable("BSRVEMCO_USER_BACKGROUND_IMAGE_LIST");

            entity.Property(e => e.UbackgroundImageId).HasColumnName("UBackgroundImageID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.GalleryId).HasColumnName("GalleryID");
            entity.Property(e => e.ImageLargeUrl).HasColumnName("ImageLargeURL");
            entity.Property(e => e.ImageMidUrl).HasColumnName("ImageMidURL");
            entity.Property(e => e.ImageSmallAwayUrl).HasColumnName("ImageSmallAwayURL");
            entity.Property(e => e.ImageSmallLiveUrl).HasColumnName("ImageSmallLiveURL");
            entity.Property(e => e.ImageSmallUrl).HasColumnName("ImageSmallURL");
            entity.Property(e => e.ImageTokenId).HasColumnName("ImageTokenID");
            entity.Property(e => e.ImageUrl).HasColumnName("ImageURL");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonalAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsProfile).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystemUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.OwnerMobileNumberTokenId).HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId).HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<BsrvemcoUserBuildingDiagramHistoryList>(entity =>
        {
            entity.HasKey(e => e.UbuildingDiagramHistoryId);

            entity.ToTable("BSRVEMCO_USER_BUILDING_DIAGRAM_HISTORY_LIST");

            entity.Property(e => e.UbuildingDiagramHistoryId).HasColumnName("UBuildingDiagramHistoryID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.AppTableTokenId1scoreTotal)
                .HasDefaultValueSql("((0))")
                .HasColumnName("AppTableTokenID1ScoreTotal");
            entity.Property(e => e.AppTableTokenId2scoreTotal)
                .HasDefaultValueSql("((0))")
                .HasColumnName("AppTableTokenID2ScoreTotal");
            entity.Property(e => e.AppTableTokenId3scoreTotal)
                .HasDefaultValueSql("((0))")
                .HasColumnName("AppTableTokenID3ScoreTotal");
            entity.Property(e => e.AppTableTokenId4scoreAverage)
                .HasDefaultValueSql("((0))")
                .HasColumnName("AppTableTokenID4ScoreAverage");
            entity.Property(e => e.AppTableTokenId4scoreTotal)
                .HasDefaultValueSql("((0))")
                .HasColumnName("AppTableTokenID4ScoreTotal");
            entity.Property(e => e.ApptableCode1)
                .HasDefaultValueSql("((0))")
                .HasColumnName("APPTableCode1");
            entity.Property(e => e.ApptableCode2)
                .HasDefaultValueSql("((0))")
                .HasColumnName("APPTableCode2");
            entity.Property(e => e.ApptableCode3)
                .HasDefaultValueSql("((0))")
                .HasColumnName("APPTableCode3");
            entity.Property(e => e.ApptableCode4)
                .HasDefaultValueSql("((0))")
                .HasColumnName("APPTableCode4");
            entity.Property(e => e.ApptableTokenId1)
                .HasDefaultValueSql("((0))")
                .HasColumnName("APPTableTokenID1");
            entity.Property(e => e.ApptableTokenId2)
                .HasDefaultValueSql("((0))")
                .HasColumnName("APPTableTokenID2");
            entity.Property(e => e.ApptableTokenId3)
                .HasDefaultValueSql("((0))")
                .HasColumnName("APPTableTokenID3");
            entity.Property(e => e.ApptableTokenId4)
                .HasDefaultValueSql("((0))")
                .HasColumnName("APPTableTokenID4");
            entity.Property(e => e.ApptableTokenId5)
                .HasDefaultValueSql("((0))")
                .HasColumnName("APPTableTokenID5");
            entity.Property(e => e.ApptableTokenId6)
                .HasDefaultValueSql("((0))")
                .HasColumnName("APPTableTokenID6");
            entity.Property(e => e.ApptableTokenId7)
                .HasDefaultValueSql("((0))")
                .HasColumnName("APPTableTokenID7");
            entity.Property(e => e.BuildingAddress).HasDefaultValueSql("((0))");
            entity.Property(e => e.BuildingDate).HasDefaultValueSql("((0))");
            entity.Property(e => e.BuildingDay).HasDefaultValueSql("((0))");
            entity.Property(e => e.BuildingMonth).HasDefaultValueSql("((0))");
            entity.Property(e => e.BuildingName).HasDefaultValueSql("((0))");
            entity.Property(e => e.BuildingTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("BuildingTokenID");
            entity.Property(e => e.BuildingYear).HasDefaultValueSql("((0))");
            entity.Property(e => e.CompanyTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CompanyTokenID");
            entity.Property(e => e.ImageTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ImageTokenID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScoreRiskAverage).HasDefaultValueSql("((0))");
            entity.Property(e => e.ScoreTotalQuality).HasDefaultValueSql("((0))");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<BsrvemcoUserBuildingDiagramList>(entity =>
        {
            entity.HasKey(e => e.UbuildingDiagramId);

            entity.ToTable("BSRVEMCO_USER_BUILDING_DIAGRAM_LIST");

            entity.Property(e => e.UbuildingDiagramId).HasColumnName("UBuildingDiagramID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.AppTableTokenId1scoreTotal)
                .HasDefaultValueSql("((0))")
                .HasColumnName("AppTableTokenID1ScoreTotal");
            entity.Property(e => e.AppTableTokenId2scoreTotal)
                .HasDefaultValueSql("((0))")
                .HasColumnName("AppTableTokenID2ScoreTotal");
            entity.Property(e => e.AppTableTokenId3scoreTotal)
                .HasDefaultValueSql("((0))")
                .HasColumnName("AppTableTokenID3ScoreTotal");
            entity.Property(e => e.AppTableTokenId4scoreAverage)
                .HasDefaultValueSql("((0))")
                .HasColumnName("AppTableTokenID4ScoreAverage");
            entity.Property(e => e.AppTableTokenId4scoreTotal)
                .HasDefaultValueSql("((0))")
                .HasColumnName("AppTableTokenID4ScoreTotal");
            entity.Property(e => e.ApptableCode1)
                .HasDefaultValueSql("((0))")
                .HasColumnName("APPTableCode1");
            entity.Property(e => e.ApptableCode2)
                .HasDefaultValueSql("((0))")
                .HasColumnName("APPTableCode2");
            entity.Property(e => e.ApptableCode3)
                .HasDefaultValueSql("((0))")
                .HasColumnName("APPTableCode3");
            entity.Property(e => e.ApptableCode4)
                .HasDefaultValueSql("((0))")
                .HasColumnName("APPTableCode4");
            entity.Property(e => e.ApptableTokenId1)
                .HasDefaultValueSql("((0))")
                .HasColumnName("APPTableTokenID1");
            entity.Property(e => e.ApptableTokenId2)
                .HasDefaultValueSql("((0))")
                .HasColumnName("APPTableTokenID2");
            entity.Property(e => e.ApptableTokenId3)
                .HasDefaultValueSql("((0))")
                .HasColumnName("APPTableTokenID3");
            entity.Property(e => e.ApptableTokenId4)
                .HasDefaultValueSql("((0))")
                .HasColumnName("APPTableTokenID4");
            entity.Property(e => e.ApptableTokenId5)
                .HasDefaultValueSql("((0))")
                .HasColumnName("APPTableTokenID5");
            entity.Property(e => e.ApptableTokenId6)
                .HasDefaultValueSql("((0))")
                .HasColumnName("APPTableTokenID6");
            entity.Property(e => e.ApptableTokenId7)
                .HasDefaultValueSql("((0))")
                .HasColumnName("APPTableTokenID7");
            entity.Property(e => e.BuildingAddress).HasDefaultValueSql("((0))");
            entity.Property(e => e.BuildingDate).HasDefaultValueSql("((0))");
            entity.Property(e => e.BuildingDay).HasDefaultValueSql("((0))");
            entity.Property(e => e.BuildingMonth).HasDefaultValueSql("((0))");
            entity.Property(e => e.BuildingName).HasDefaultValueSql("((0))");
            entity.Property(e => e.BuildingTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("BuildingTokenID");
            entity.Property(e => e.BuildingYear).HasDefaultValueSql("((0))");
            entity.Property(e => e.CompanyTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CompanyTokenID");
            entity.Property(e => e.ImageTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ImageTokenID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScoreRiskAverage).HasDefaultValueSql("((0))");
            entity.Property(e => e.ScoreTotalQuality).HasDefaultValueSql("((0))");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<BsrvemcoUserBuildingDocumentHistoryList>(entity =>
        {
            entity.HasKey(e => e.UbuildingDocumentHistoryId);

            entity.ToTable("BSRVEMCO_USER_BUILDING_DOCUMENT_HISTORY_LIST");

            entity.Property(e => e.UbuildingDocumentHistoryId).HasColumnName("UBuildingDocumentHistoryID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.AppinformationTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("APPInformationTokenID");
            entity.Property(e => e.BuildingTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("BuildingTokenID");
            entity.Property(e => e.CompanyTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CompanyTokenID");
            entity.Property(e => e.DocumentCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.DocumentDescription).HasDefaultValueSql("((0))");
            entity.Property(e => e.DocumentExtension).HasDefaultValueSql("((0))");
            entity.Property(e => e.DocumentName).HasDefaultValueSql("((0))");
            entity.Property(e => e.DocumentSize).HasDefaultValueSql("((0))");
            entity.Property(e => e.DocumentTitle).HasDefaultValueSql("((0))");
            entity.Property(e => e.DocumentTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DocumentTokenID");
            entity.Property(e => e.DocumentType).HasDefaultValueSql("((0))");
            entity.Property(e => e.InformationTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("InformationTokenID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.TimeoutAppNotification).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeoutSystemNotification).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeoutUserNotification).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeoutUserUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeoutUserUploadEnd).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeoutUserUploadStart).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeoutYearCount).HasDefaultValueSql("((0))");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<BsrvemcoUserBuildingDocumentList>(entity =>
        {
            entity.HasKey(e => e.UbuildingDocumentId);

            entity.ToTable("BSRVEMCO_USER_BUILDING_DOCUMENT_LIST");

            entity.Property(e => e.UbuildingDocumentId).HasColumnName("UBuildingDocumentID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.AppinformationTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("APPInformationTokenID");
            entity.Property(e => e.BuildingTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("BuildingTokenID");
            entity.Property(e => e.CompanyTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CompanyTokenID");
            entity.Property(e => e.DocumentCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.DocumentDescription).HasDefaultValueSql("((0))");
            entity.Property(e => e.DocumentExtension).HasDefaultValueSql("((0))");
            entity.Property(e => e.DocumentName).HasDefaultValueSql("((0))");
            entity.Property(e => e.DocumentSize).HasDefaultValueSql("((0))");
            entity.Property(e => e.DocumentTitle).HasDefaultValueSql("((0))");
            entity.Property(e => e.DocumentTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DocumentTokenID");
            entity.Property(e => e.DocumentType).HasDefaultValueSql("((0))");
            entity.Property(e => e.InformationTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("InformationTokenID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.TimeoutAppNotification).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeoutSystemNotification).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeoutUserNotification).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeoutUserUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeoutUserUploadEnd).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeoutUserUploadStart).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeoutYearCount).HasDefaultValueSql("((0))");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<BsrvemcoUserBuildingInformationList>(entity =>
        {
            entity.HasKey(e => e.UbuildingInformationId);

            entity.ToTable("BSRVEMCO_USER_BUILDING_INFORMATION_LIST");

            entity.Property(e => e.UbuildingInformationId).HasColumnName("UBuildingInformationID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.AppinformationCode)
                .HasDefaultValueSql("((0))")
                .HasColumnName("APPInformationCode");
            entity.Property(e => e.AppinformationTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("APPInformationTokenID");
            entity.Property(e => e.ApptableCode)
                .HasDefaultValueSql("((0))")
                .HasColumnName("APPTableCode");
            entity.Property(e => e.ApptableTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("APPTableTokenID");
            entity.Property(e => e.BuildingTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("BuildingTokenID");
            entity.Property(e => e.Commentary).HasDefaultValueSql("((0))");
            entity.Property(e => e.CompanyTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CompanyTokenID");
            entity.Property(e => e.Criterion).HasDefaultValueSql("((0))");
            entity.Property(e => e.DocumentCount).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ImageTokenID");
            entity.Property(e => e.InformationDescription).HasDefaultValueSql("((0))");
            entity.Property(e => e.InformationName).HasDefaultValueSql("((0))");
            entity.Property(e => e.InformationScore).HasDefaultValueSql("((0))");
            entity.Property(e => e.InformationText).HasDefaultValueSql("((0))");
            entity.Property(e => e.InformationTitle).HasDefaultValueSql("((0))");
            entity.Property(e => e.InformationTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("InformationTokenID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RiskControlMeasure).HasDefaultValueSql("((0))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.Score).HasDefaultValueSql("((0))");
            entity.Property(e => e.ScoreAdjusted).HasDefaultValueSql("((0))");
            entity.Property(e => e.ScoreManaged).HasDefaultValueSql("((0))");
            entity.Property(e => e.ScoreOriginal).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeoutAppNotification).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeoutSystemNotification).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeoutUserNotification).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeoutUserUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeoutUserUploadEnd).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeoutUserUploadStart).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeoutYearCount).HasDefaultValueSql("((0))");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<BsrvemcoUserBuildingList>(entity =>
        {
            entity.HasKey(e => e.UbuildingId);

            entity.ToTable("BSRVEMCO_USER_BUILDING_LIST");

            entity.Property(e => e.UbuildingId).HasColumnName("UBuildingID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.BuildingAddress).HasDefaultValueSql("((0))");
            entity.Property(e => e.BuildingDate).HasDefaultValueSql("((0))");
            entity.Property(e => e.BuildingDay).HasDefaultValueSql("((0))");
            entity.Property(e => e.BuildingMonth).HasDefaultValueSql("((0))");
            entity.Property(e => e.BuildingName).HasDefaultValueSql("((0))");
            entity.Property(e => e.BuildingTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("BuildingTokenID");
            entity.Property(e => e.BuildingYear).HasDefaultValueSql("((0))");
            entity.Property(e => e.CompanyTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CompanyTokenID");
            entity.Property(e => e.ImageTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ImageTokenID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<BsrvemcoUserCompanyList>(entity =>
        {
            entity.HasKey(e => e.UcompanyId);

            entity.ToTable("BSRVEMCO_USER_COMPANY_LIST");

            entity.Property(e => e.UcompanyId).HasColumnName("UCompanyID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.CompanyName).HasDefaultValueSql("((0))");
            entity.Property(e => e.CompanyTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CompanyTokenID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<BsrvemcoUserContactFriendList>(entity =>
        {
            entity.HasKey(e => e.UmatchMutualId);

            entity.ToTable("BSRVEMCO_USER_CONTACT_FRIEND_LIST");

            entity.Property(e => e.UmatchMutualId).HasColumnName("UMatchMutualID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.DatingMatchEventTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DatingMatchEventTokenID");
            entity.Property(e => e.EventDateTimeEnd).HasColumnType("smalldatetime");
            entity.Property(e => e.EventDateTimeReset).HasColumnType("smalldatetime");
            entity.Property(e => e.EventDateTimeStart)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.GroupTokenId).HasColumnName("GroupTokenID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingMatchConnect).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMatch).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsNewOwner).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNewRemote).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystemUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsViewOwner).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsViewRemote).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisibleOwner).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisibleRemote).HasDefaultValueSql("((1))");
            entity.Property(e => e.MatchLikeStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerMobileNumberTokenId).HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.OwnerUserTokenId).HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RemoteMobileNumberTokenId).HasColumnName("RemoteMobileNumberTokenID");
            entity.Property(e => e.RemoteUserTokenId).HasColumnName("RemoteUserTokenID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDateTimeMilliSecEnd).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDateTimeMilliSecReset).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDateTimeMilliSecStart).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserMobileNumberId).HasColumnName("UserMobileNumberID");
        });

        modelBuilder.Entity<BsrvemcoUserContactList>(entity =>
        {
            entity.HasKey(e => e.UmatchMutualId);

            entity.ToTable("BSRVEMCO_USER_CONTACT_LIST");

            entity.Property(e => e.UmatchMutualId).HasColumnName("UMatchMutualID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.DatingMatchEventTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DatingMatchEventTokenID");
            entity.Property(e => e.EventDateTimeEnd).HasColumnType("smalldatetime");
            entity.Property(e => e.EventDateTimeReset).HasColumnType("smalldatetime");
            entity.Property(e => e.EventDateTimeStart)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingMatchConnect).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMatch).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsNewOwner).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNewRemote).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystemUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsViewOwner).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsViewRemote).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisibleOwner).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisibleRemote).HasDefaultValueSql("((1))");
            entity.Property(e => e.MatchLikeStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDateTimeMilliSecEnd).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDateTimeMilliSecReset).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDateTimeMilliSecStart).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserMobileNumberId).HasColumnName("UserMobileNumberID");
        });

        modelBuilder.Entity<BsrvemcoUserDeviceList>(entity =>
        {
            entity.HasKey(e => e.UdeviceId);

            entity.ToTable("BSRVEMCO_USER_DEVICE_LIST");

            entity.Property(e => e.UdeviceId).HasColumnName("UDeviceID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'trackl')");
            entity.Property(e => e.AndroidId).HasColumnName("AndroidID");
            entity.Property(e => e.CellIdentityGsm).HasColumnName("CellIdentityGSM");
            entity.Property(e => e.CountryIsocode).HasColumnName("CountryISOCode");
            entity.Property(e => e.DatabaseServerTokenId).HasColumnName("DatabaseServerTokenID");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.DeviceId).HasColumnName("DeviceID");
            entity.Property(e => e.Gcmid).HasColumnName("GCMID");
            entity.Property(e => e.GroupIdlevel1).HasColumnName("GroupIDLevel1");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDeviceOnRegister).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MembershipType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.MmsUaprofUrl).HasColumnName("MmsUAProfUrl");
            entity.Property(e => e.MobileNumberFormatUs).HasColumnName("MobileNumberFormatUS");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.MobileNumberOutUs).HasColumnName("MobileNumberOutUS");
            entity.Property(e => e.NetworkCountryIso).HasColumnName("NetworkCountryISO");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.PlatformOsid)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PlatformOSID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.SessionTokenId).HasColumnName("SessionTokenID");
            entity.Property(e => e.SimcountryIso).HasColumnName("SIMCountryISO");
            entity.Property(e => e.Simoperator).HasColumnName("SIMOperator");
            entity.Property(e => e.SimserialNumber).HasColumnName("SIMSerialNumber");
            entity.Property(e => e.Simstate).HasColumnName("SIMState");
            entity.Property(e => e.SubscriberId).HasColumnName("SubscriberID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<BsrvemcoUserDeviceListHistory>(entity =>
        {
            entity.HasKey(e => e.UdeviceId);

            entity.ToTable("BSRVEMCO_USER_DEVICE_LIST_HISTORY");

            entity.Property(e => e.UdeviceId).HasColumnName("UDeviceID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'trackl')");
            entity.Property(e => e.AndroidId).HasColumnName("AndroidID");
            entity.Property(e => e.CellIdentityGsm).HasColumnName("CellIdentityGSM");
            entity.Property(e => e.CountryIsocode).HasColumnName("CountryISOCode");
            entity.Property(e => e.DatabaseServerTokenId).HasColumnName("DatabaseServerTokenID");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.DeviceId).HasColumnName("DeviceID");
            entity.Property(e => e.Gcmid).HasColumnName("GCMID");
            entity.Property(e => e.GroupIdlevel1).HasColumnName("GroupIDLevel1");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDeviceOnRegister).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MembershipType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.MmsUaprofUrl).HasColumnName("MmsUAProfUrl");
            entity.Property(e => e.MobileNumberFormatUs).HasColumnName("MobileNumberFormatUS");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.MobileNumberOutUs).HasColumnName("MobileNumberOutUS");
            entity.Property(e => e.NetworkCountryIso).HasColumnName("NetworkCountryISO");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.PlatformOsid)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PlatformOSID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.SessionTokenId).HasColumnName("SessionTokenID");
            entity.Property(e => e.SimcountryIso).HasColumnName("SIMCountryISO");
            entity.Property(e => e.Simoperator).HasColumnName("SIMOperator");
            entity.Property(e => e.SimserialNumber).HasColumnName("SIMSerialNumber");
            entity.Property(e => e.Simstate).HasColumnName("SIMState");
            entity.Property(e => e.SubscriberId).HasColumnName("SubscriberID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<BsrvemcoUserDeviceListOnline>(entity =>
        {
            entity.HasKey(e => e.UdeviceId);

            entity.ToTable("BSRVEMCO_USER_DEVICE_LIST_ONLINE");

            entity.Property(e => e.UdeviceId).HasColumnName("UDeviceID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'trackl')");
            entity.Property(e => e.AndroidId).HasColumnName("AndroidID");
            entity.Property(e => e.CellIdentityGsm).HasColumnName("CellIdentityGSM");
            entity.Property(e => e.CountryIsocode).HasColumnName("CountryISOCode");
            entity.Property(e => e.DatabaseServerTokenId).HasColumnName("DatabaseServerTokenID");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.DeviceId).HasColumnName("DeviceID");
            entity.Property(e => e.Gcmid).HasColumnName("GCMID");
            entity.Property(e => e.GroupIdlevel1).HasColumnName("GroupIDLevel1");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDeviceOnRegister).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MembershipType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.MmsUaprofUrl).HasColumnName("MmsUAProfUrl");
            entity.Property(e => e.MobileNumberFormatUs).HasColumnName("MobileNumberFormatUS");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.MobileNumberOutUs).HasColumnName("MobileNumberOutUS");
            entity.Property(e => e.NetworkCountryIso).HasColumnName("NetworkCountryISO");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.PlatformOsid)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PlatformOSID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.SessionTokenId).HasColumnName("SessionTokenID");
            entity.Property(e => e.SimcountryIso).HasColumnName("SIMCountryISO");
            entity.Property(e => e.Simoperator).HasColumnName("SIMOperator");
            entity.Property(e => e.SimserialNumber).HasColumnName("SIMSerialNumber");
            entity.Property(e => e.Simstate).HasColumnName("SIMState");
            entity.Property(e => e.SubscriberId).HasColumnName("SubscriberID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<BsrvemcoUserEmailAddressList>(entity =>
        {
            entity.HasKey(e => e.EmailId).HasName("PK_TLKN_USER_EMAIL_ADDRESS_LIST");

            entity.ToTable("BSRVEMCO_USER_EMAIL_ADDRESS_LIST");

            entity.Property(e => e.EmailId).HasColumnName("EmailID");
            entity.Property(e => e.AndroidId).HasColumnName("AndroidID");
            entity.Property(e => e.CellIdentityGsm).HasColumnName("CellIdentityGSM");
            entity.Property(e => e.CountryIsocode).HasColumnName("CountryISOCode");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.DeviceId).HasColumnName("DeviceID");
            entity.Property(e => e.EmailTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("EmailTokenID");
            entity.Property(e => e.Gcmid).HasColumnName("GCMID");
            entity.Property(e => e.GroupIdlevel1).HasColumnName("GroupIDLevel1");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDefault).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDeviceOnRegister).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSystemUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVerify).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MmsUaprofUrl).HasColumnName("MmsUAProfUrl");
            entity.Property(e => e.MobileNumberFormatUs).HasColumnName("MobileNumberFormatUS");
            entity.Property(e => e.MobileNumberOutUs).HasColumnName("MobileNumberOutUS");
            entity.Property(e => e.NetworkCountryIso).HasColumnName("NetworkCountryISO");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.SimcountryIso).HasColumnName("SIMCountryISO");
            entity.Property(e => e.Simoperator).HasColumnName("SIMOperator");
            entity.Property(e => e.SimserialNumber).HasColumnName("SIMSerialNumber");
            entity.Property(e => e.Simstate).HasColumnName("SIMState");
            entity.Property(e => e.SubscriberId).HasColumnName("SubscriberID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<BsrvemcoUserFeedback>(entity =>
        {
            entity.HasKey(e => e.FeedBackId).HasName("PK_TLKN_USER_FEEDBACK");

            entity.ToTable("BSRVEMCO_USER_FEEDBACK");

            entity.Property(e => e.FeedBackId).HasColumnName("FeedBackID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.OwnerMobileNumberTokenId).HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId).HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate).HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.WhatLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.WhatNotLike).HasDefaultValueSql("((0))");
        });

        modelBuilder.Entity<BsrvemcoUserGroup>(entity =>
        {
            entity.HasKey(e => e.GroupId).HasName("PK_TLKN_USER_GROUP_1");

            entity.ToTable("BSRVEMCO_USER_GROUP");

            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.AvatarName).HasDefaultValueSql("((0))");
            entity.Property(e => e.CategoryId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CategoryID");
            entity.Property(e => e.DatabaseServerTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DatabaseServerTokenID");
            entity.Property(e => e.GroupCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.GroupName).HasDefaultValueSql("((0))");
            entity.Property(e => e.GroupTitle).HasDefaultValueSql("((0))");
            entity.Property(e => e.GroupTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupTokenID");
            entity.Property(e => e.GroupType).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageData).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageDescription).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageMimeType).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageName).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageTitle).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageType).HasDefaultValueSql("((0))");
            entity.Property(e => e.InviteOwnerMobileNumberId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("InviteOwnerMobileNumberID");
            entity.Property(e => e.InviteOwnerUserId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("InviteOwnerUserID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MobileNumberId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("MobileNumberID");
            entity.Property(e => e.MobileNumberId1)
                .HasDefaultValueSql("((0))")
                .HasColumnName("MobileNumberID1");
            entity.Property(e => e.MobileNumberId2)
                .HasDefaultValueSql("((0))")
                .HasColumnName("MobileNumberID2");
            entity.Property(e => e.MobileNumberId3)
                .HasDefaultValueSql("((0))")
                .HasColumnName("MobileNumberID3");
            entity.Property(e => e.MobileNumberId4)
                .HasDefaultValueSql("((0))")
                .HasColumnName("MobileNumberID4");
            entity.Property(e => e.MobileNumberId5)
                .HasDefaultValueSql("((0))")
                .HasColumnName("MobileNumberID5");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("UserID");
            entity.Property(e => e.UserId1)
                .HasDefaultValueSql("((0))")
                .HasColumnName("UserID1");
            entity.Property(e => e.UserId2)
                .HasDefaultValueSql("((0))")
                .HasColumnName("UserID2");
            entity.Property(e => e.UserId3)
                .HasDefaultValueSql("((0))")
                .HasColumnName("UserID3");
            entity.Property(e => e.UserId4)
                .HasDefaultValueSql("((0))")
                .HasColumnName("UserID4");
            entity.Property(e => e.UserId5)
                .HasDefaultValueSql("((0))")
                .HasColumnName("UserID5");
        });

        modelBuilder.Entity<BsrvemcoUserGroupAdministratorList>(entity =>
        {
            entity.HasKey(e => e.UgroupAdministratorId);

            entity.ToTable("BSRVEMCO_USER_GROUP_ADMINISTRATOR_LIST");

            entity.Property(e => e.UgroupAdministratorId).HasColumnName("UGroupAdministratorID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.AvatarName).HasDefaultValueSql("((0))");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.CategoryTokenId).HasColumnName("CategoryTokenID");
            entity.Property(e => e.DatabaseServerTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DatabaseServerTokenID");
            entity.Property(e => e.GroupCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.GroupDescription).HasDefaultValueSql("((0))");
            entity.Property(e => e.GroupKey).HasDefaultValueSql("((0))");
            entity.Property(e => e.GroupName).HasDefaultValueSql("((0))");
            entity.Property(e => e.GroupOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.GroupRoleCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.GroupRoleName).HasDefaultValueSql("((0))");
            entity.Property(e => e.GroupRoleTitle).HasDefaultValueSql("((0))");
            entity.Property(e => e.GroupRoleTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupRoleTokenID");
            entity.Property(e => e.GroupRoleType).HasDefaultValueSql("((0))");
            entity.Property(e => e.GroupTitle).HasDefaultValueSql("((0))");
            entity.Property(e => e.GroupTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupTokenID");
            entity.Property(e => e.GroupType).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsCustomTitle).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<BsrvemcoUserGroupAvatarImageList>(entity =>
        {
            entity.HasKey(e => e.UgroupAvatarImageId);

            entity.ToTable("BSRVEMCO_USER_GROUP_AVATAR_IMAGE_LIST");

            entity.Property(e => e.UgroupAvatarImageId).HasColumnName("UGroupAvatarImageID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.GalleryId).HasColumnName("GalleryID");
            entity.Property(e => e.GroupTokenId).HasColumnName("GroupTokenID");
            entity.Property(e => e.ImageLargeUrl).HasColumnName("ImageLargeURL");
            entity.Property(e => e.ImageMidUrl).HasColumnName("ImageMidURL");
            entity.Property(e => e.ImageSmallAwayUrl).HasColumnName("ImageSmallAwayURL");
            entity.Property(e => e.ImageSmallLiveUrl).HasColumnName("ImageSmallLiveURL");
            entity.Property(e => e.ImageSmallUrl).HasColumnName("ImageSmallURL");
            entity.Property(e => e.ImageTokenId).HasColumnName("ImageTokenID");
            entity.Property(e => e.ImageUrl).HasColumnName("ImageURL");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonalAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsProfile).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystemUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.OwnerMobileNumberTokenId).HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId).HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<BsrvemcoUserGroupAvatarImageListHistory>(entity =>
        {
            entity.HasKey(e => e.UgroupAvatarImageIdhistory);

            entity.ToTable("BSRVEMCO_USER_GROUP_AVATAR_IMAGE_LIST_HISTORY");

            entity.Property(e => e.UgroupAvatarImageIdhistory).HasColumnName("UGroupAvatarImageIDHistory");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.GalleryId).HasColumnName("GalleryID");
            entity.Property(e => e.GroupTokenId).HasColumnName("GroupTokenID");
            entity.Property(e => e.ImageLargeUrl).HasColumnName("ImageLargeURL");
            entity.Property(e => e.ImageMidUrl).HasColumnName("ImageMidURL");
            entity.Property(e => e.ImageSmallAwayUrl).HasColumnName("ImageSmallAwayURL");
            entity.Property(e => e.ImageSmallLiveUrl).HasColumnName("ImageSmallLiveURL");
            entity.Property(e => e.ImageSmallUrl).HasColumnName("ImageSmallURL");
            entity.Property(e => e.ImageTokenId).HasColumnName("ImageTokenID");
            entity.Property(e => e.ImageUrl).HasColumnName("ImageURL");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonalAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsProfile).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystemUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.OwnerMobileNumberTokenId).HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId).HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<BsrvemcoUserGroupCategoryList>(entity =>
        {
            entity.HasKey(e => e.UcategoryId).HasName("PK_TLKN_USER_GROUP_CATEGORY");

            entity.ToTable("BSRVEMCO_USER_GROUP_CATEGORY_LIST");

            entity.Property(e => e.UcategoryId).HasColumnName("UCategoryID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.CategoryCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.CategoryOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.CategoryTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CategoryTokenID");
            entity.Property(e => e.CategoryType).HasDefaultValueSql("((0))");
            entity.Property(e => e.DatabaseServerTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DatabaseServerTokenID");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsDefaultCategory).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystemCategory).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.OwnerMobileNumberTokenId).HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId).HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<BsrvemcoUserGroupList>(entity =>
        {
            entity.HasKey(e => e.UgroupId).HasName("PK_TLKN_USER_GROUP_LIST");

            entity.ToTable("BSRVEMCO_USER_GROUP_LIST");

            entity.Property(e => e.UgroupId).HasColumnName("UGroupID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.AvatarName).HasDefaultValueSql("((0))");
            entity.Property(e => e.CategoryId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CategoryID");
            entity.Property(e => e.CategoryTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CategoryTokenID");
            entity.Property(e => e.DatabaseServerTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DatabaseServerTokenID");
            entity.Property(e => e.GroupCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.GroupDescription).HasDefaultValueSql("((0))");
            entity.Property(e => e.GroupName).HasDefaultValueSql("((0))");
            entity.Property(e => e.GroupOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.GroupTitle).HasDefaultValueSql("((0))");
            entity.Property(e => e.GroupTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupTokenID");
            entity.Property(e => e.GroupType).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsCustomTitle).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<BsrvemcoUserGroupRoleList>(entity =>
        {
            entity.HasKey(e => e.UgroupRoleId);

            entity.ToTable("BSRVEMCO_USER_GROUP_ROLE_LIST");

            entity.Property(e => e.UgroupRoleId).HasColumnName("UGroupRoleID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.AvatarName).HasDefaultValueSql("((0))");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.CategoryTokenId).HasColumnName("CategoryTokenID");
            entity.Property(e => e.DatabaseServerTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DatabaseServerTokenID");
            entity.Property(e => e.GroupCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.GroupDescription).HasDefaultValueSql("((0))");
            entity.Property(e => e.GroupKey).HasDefaultValueSql("((0))");
            entity.Property(e => e.GroupName).HasDefaultValueSql("((0))");
            entity.Property(e => e.GroupOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.GroupRoleCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.GroupRoleName).HasDefaultValueSql("((0))");
            entity.Property(e => e.GroupRoleTitle).HasDefaultValueSql("((0))");
            entity.Property(e => e.GroupRoleTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupRoleTokenID");
            entity.Property(e => e.GroupRoleType).HasDefaultValueSql("((0))");
            entity.Property(e => e.GroupTitle).HasDefaultValueSql("((0))");
            entity.Property(e => e.GroupTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupTokenID");
            entity.Property(e => e.GroupType).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsCustomTitle).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<BsrvemcoUserImage>(entity =>
        {
            entity.HasKey(e => e.ImageId).HasName("PK_TLKN_USER_PROFILE_IMAGE");

            entity.ToTable("BSRVEMCO_USER_IMAGE");

            entity.Property(e => e.ImageId).HasColumnName("ImageID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.GalleryId).HasColumnName("GalleryID");
            entity.Property(e => e.ImageLargeUrl).HasColumnName("ImageLargeURL");
            entity.Property(e => e.ImageMidUrl).HasColumnName("ImageMidURL");
            entity.Property(e => e.ImageSmallAwayUrl).HasColumnName("ImageSmallAwayURL");
            entity.Property(e => e.ImageSmallLiveUrl).HasColumnName("ImageSmallLiveURL");
            entity.Property(e => e.ImageSmallUrl).HasColumnName("ImageSmallURL");
            entity.Property(e => e.ImageTokenId).HasColumnName("ImageTokenID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonalAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsProfile).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystemUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.OwnerMobileNumberTokenId).HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId).HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<BsrvemcoUserList>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK_TLKN_USER");

            entity.ToTable("BSRVEMCO_USER_LIST");

            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'NotApproved')");
            entity.Property(e => e.ActiveViewed).HasDefaultValueSql("((0))");
            entity.Property(e => e.AppRoleCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.AppRoleName).HasDefaultValueSql("((0))");
            entity.Property(e => e.AppRoleTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("AppRoleTokenID");
            entity.Property(e => e.BirthDate).HasColumnType("smalldatetime");
            entity.Property(e => e.BirthDateDay).HasDefaultValueSql("((0))");
            entity.Property(e => e.BirthDateMonth).HasDefaultValueSql("((0))");
            entity.Property(e => e.BirthDateYear).HasDefaultValueSql("((0))");
            entity.Property(e => e.CityId).HasColumnName("CityID");
            entity.Property(e => e.CompanyName).HasDefaultValueSql("((0))");
            entity.Property(e => e.CompanyTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CompanyTokenID");
            entity.Property(e => e.CountryFlagUrl).HasColumnName("CountryFlagURL");
            entity.Property(e => e.CountryId).HasColumnName("CountryID");
            entity.Property(e => e.DatabaseServerTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DatabaseServerTokenID");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.Gcmid).HasColumnName("GCMID");
            entity.Property(e => e.Guid)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GUID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsAutoLogin).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDeviceOnline).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsEmailVerify).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsFirstLogin).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsModerator).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRemeberMe).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystemUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsValidateEmailAddress).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsValidateMobileNumber).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsWebmaster).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoginStatus).HasDefaultValueSql("(N'offline')");
            entity.Property(e => e.MembershipType).HasDefaultValueSql("((0))");
            entity.Property(e => e.Notes).HasDefaultValueSql("(N'N/A')");
            entity.Property(e => e.OnlineStatus).HasDefaultValueSql("(N'offline')");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RoleCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.RoleName).HasDefaultValueSql("((0))");
            entity.Property(e => e.RoleTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RoleTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.Street).HasDefaultValueSql("((0))");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserGcmid).HasColumnName("UserGCMID");
            entity.Property(e => e.UserLoginStatus).HasDefaultValueSql("(N'online')");
            entity.Property(e => e.UserMoodStatus).HasDefaultValueSql("(N'Hello Tlkn2')");
            entity.Property(e => e.UserNotificationKeyId).HasColumnName("UserNotificationKeyID");
            entity.Property(e => e.UserRole)
                .HasMaxLength(50)
                .HasDefaultValueSql("(N'user')");
            entity.Property(e => e.VisibleStatus).HasDefaultValueSql("(N'offline')");
        });

        modelBuilder.Entity<BsrvemcoUserLocation>(entity =>
        {
            entity.HasKey(e => e.UlocationId).HasName("PK_TLKN_USER_LOCATION");

            entity.ToTable("BSRVEMCO_USER_LOCATION");

            entity.Property(e => e.UlocationId).HasColumnName("ULocationID");
            entity.Property(e => e.AddressLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.AddressLine1).HasDefaultValueSql("((0))");
            entity.Property(e => e.AddressLine2).HasDefaultValueSql("((0))");
            entity.Property(e => e.CityName).HasDefaultValueSql("((0))");
            entity.Property(e => e.CountryCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.CountryName).HasDefaultValueSql("((0))");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.Latitude).HasDefaultValueSql("((0))");
            entity.Property(e => e.Longitude).HasDefaultValueSql("((0))");
            entity.Property(e => e.OwnerMobileNumberTokenId).HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId).HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.PostalCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.StateName).HasDefaultValueSql("((0))");
            entity.Property(e => e.StreetLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.StreetLine1).HasDefaultValueSql("((0))");
            entity.Property(e => e.StreetLine2).HasDefaultValueSql("((0))");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<BsrvemcoUserLoginList>(entity =>
        {
            entity.HasKey(e => e.UserLoginId).HasName("PK_TLKN_USER_DEVICE_ONLINE_LIST");

            entity.ToTable("BSRVEMCO_USER_LOGIN_LIST");

            entity.Property(e => e.UserLoginId).HasColumnName("UserLoginID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.AndroidId).HasColumnName("AndroidID");
            entity.Property(e => e.CellIdentityGsm).HasColumnName("CellIdentityGSM");
            entity.Property(e => e.CountryIsocode).HasColumnName("CountryISOCode");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.DeviceId).HasColumnName("DeviceID");
            entity.Property(e => e.Gcmid).HasColumnName("GCMID");
            entity.Property(e => e.GroupIdlevel1).HasColumnName("GroupIDLevel1");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDeviceOnRegister).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsShowLastActivity).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.LastActivityDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LastActivityDay).HasDefaultValueSql("((0))");
            entity.Property(e => e.LastActivityMonth).HasDefaultValueSql("((0))");
            entity.Property(e => e.LastActivityYear).HasDefaultValueSql("((0))");
            entity.Property(e => e.MmsUaprofUrl).HasColumnName("MmsUAProfUrl");
            entity.Property(e => e.MobileNumberFormatUs).HasColumnName("MobileNumberFormatUS");
            entity.Property(e => e.MobileNumberOutUs).HasColumnName("MobileNumberOutUS");
            entity.Property(e => e.NetworkCountryIso).HasColumnName("NetworkCountryISO");
            entity.Property(e => e.OwnerMobileNumberTokenId).HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId).HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.SimcountryIso).HasColumnName("SIMCountryISO");
            entity.Property(e => e.Simoperator).HasColumnName("SIMOperator");
            entity.Property(e => e.SimserialNumber).HasColumnName("SIMSerialNumber");
            entity.Property(e => e.Simstate).HasColumnName("SIMState");
            entity.Property(e => e.StatusUpdateDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.StatusUpdateDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.StatusUpdateMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.StatusUpdateYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.SubscriberId).HasColumnName("SubscriberID");
            entity.Property(e => e.UdeviceId).HasColumnName("UDeviceID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDateTimeUtc)
                .HasColumnType("smalldatetime")
                .HasColumnName("UploadDateTimeUTC");
            entity.Property(e => e.UploadDateUtc)
                .HasColumnType("smalldatetime")
                .HasColumnName("UploadDateUTC");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadDayUtc)
                .HasColumnType("money")
                .HasColumnName("UploadDayUTC");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadMonthUtc).HasColumnName("UploadMonthUTC");
            entity.Property(e => e.UploadTimeUtc).HasColumnName("UploadTimeUTC");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UploadYearUtc).HasColumnName("UploadYearUTC");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.VisibleOnlineDateTimeMilliSec).HasDefaultValueSql("(N'0')");
        });

        modelBuilder.Entity<BsrvemcoUserMobileNumberList>(entity =>
        {
            entity.HasKey(e => e.MobileNumberId).HasName("PK_TLKN_USER_MOBILE_NUMBER_LIST");

            entity.ToTable("BSRVEMCO_USER_MOBILE_NUMBER_LIST");

            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.AndroidId).HasColumnName("AndroidID");
            entity.Property(e => e.CellIdentityGsm).HasColumnName("CellIdentityGSM");
            entity.Property(e => e.CountryIsocode).HasColumnName("CountryISOCode");
            entity.Property(e => e.DatabaseServerTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DatabaseServerTokenID");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.DeviceId).HasColumnName("DeviceID");
            entity.Property(e => e.Gcmid).HasColumnName("GCMID");
            entity.Property(e => e.GroupIdlevel1).HasColumnName("GroupIDLevel1");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDeviceOnRegister).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSystemUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVerify).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MmsUaprofUrl).HasColumnName("MmsUAProfUrl");
            entity.Property(e => e.MobileNumberFormatUs).HasColumnName("MobileNumberFormatUS");
            entity.Property(e => e.MobileNumberOutUs).HasColumnName("MobileNumberOutUS");
            entity.Property(e => e.NetworkCountryIso).HasColumnName("NetworkCountryISO");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.SimcountryIso).HasColumnName("SIMCountryISO");
            entity.Property(e => e.Simoperator).HasColumnName("SIMOperator");
            entity.Property(e => e.SimserialNumber).HasColumnName("SIMSerialNumber");
            entity.Property(e => e.Simstate).HasColumnName("SIMState");
            entity.Property(e => e.SubscriberId).HasColumnName("SubscriberID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<BsrvemcoUserProfile>(entity =>
        {
            entity.HasKey(e => e.UprofileId).HasName("PK_TLKN_USER_PROFILE");

            entity.ToTable("BSRVEMCO_USER_PROFILE");

            entity.Property(e => e.UprofileId).HasColumnName("UProfileID");
            entity.Property(e => e.AutoClick).HasDefaultValueSql("((1))");
            entity.Property(e => e.BirthDate).HasColumnType("smalldatetime");
            entity.Property(e => e.BirthDateDay).HasDefaultValueSql("((0))");
            entity.Property(e => e.BirthDateMonth).HasDefaultValueSql("((0))");
            entity.Property(e => e.BirthDateYear).HasDefaultValueSql("((0))");
            entity.Property(e => e.BodyId).HasColumnName("BodyID");
            entity.Property(e => e.DatingAvatarColorCode).HasDefaultValueSql("(N'#c0c0c0')");
            entity.Property(e => e.DatingFor).HasDefaultValueSql("(N'friendship')");
            entity.Property(e => e.DatingJoinDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.DatingJoinDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.DatingJoinMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.DatingJoinYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.DatingOrientation).HasDefaultValueSql("(N'straight')");
            entity.Property(e => e.DatingWith).HasDefaultValueSql("(N'anyone')");
            entity.Property(e => e.DrinkId).HasColumnName("DrinkID");
            entity.Property(e => e.DrugId).HasColumnName("DrugID");
            entity.Property(e => e.EthnicityId).HasColumnName("EthnicityID");
            entity.Property(e => e.EyeId).HasColumnName("EyeID");
            entity.Property(e => e.GenderId).HasColumnName("GenderID");
            entity.Property(e => e.HairId).HasColumnName("HairID");
            entity.Property(e => e.HeightMeasureText).HasDefaultValueSql("(N'inches')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBusiness).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystemUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.MaritalStatusId).HasColumnName("MaritalStatusID");
            entity.Property(e => e.OwnerMobileNumberTokenId).HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId).HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.PersonalAvatarColorCode).HasDefaultValueSql("(N'#c0c0c0')");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.SexualId).HasColumnName("SexualID");
            entity.Property(e => e.SmokeId).HasColumnName("SmokeID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.VideoIsSubmit).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoYouTubeUrl).HasColumnName("VideoYouTubeURL");
        });

        modelBuilder.Entity<BsrvemcoUserProfilePrivacy>(entity =>
        {
            entity.HasKey(e => e.ProfilePrivacyId).HasName("PK_TLKN_USER_PROFILE_PRIVACY");

            entity.ToTable("BSRVEMCO_USER_PROFILE_PRIVACY");

            entity.Property(e => e.ProfilePrivacyId).HasColumnName("ProfilePrivacyID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.OwnerMobileNumberTokenId).HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId).HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<BsrvemcoUserRateu>(entity =>
        {
            entity.HasKey(e => e.RateId).HasName("PK_TLKN_USER_RATE");

            entity.ToTable("BSRVEMCO_USER_RATEUS");

            entity.Property(e => e.RateId).HasColumnName("RateID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.OwnerMobileNumberTokenId).HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId).HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RateValue).HasDefaultValueSql("((4))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate).HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
        });

        modelBuilder.Entity<BsrvemcoUserRoleList>(entity =>
        {
            entity.HasKey(e => e.UroleId).HasName("PK_TLKN_USER_ROLE");

            entity.ToTable("BSRVEMCO_USER_ROLE_LIST");

            entity.Property(e => e.UroleId).HasColumnName("URoleID");
            entity.Property(e => e.AppRoleCode).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.AppRoleName).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.AppRoleTokenId)
                .HasDefaultValueSql("(N'personal')")
                .HasColumnName("AppRoleTokenID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSystemUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.OwnerMobileNumberTokenId).HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId).HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RoleCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.RoleName).HasDefaultValueSql("((0))");
            entity.Property(e => e.RoleTitle).HasDefaultValueSql("((0))");
            entity.Property(e => e.RoleValue).HasDefaultValueSql("((0))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserRole).HasDefaultValueSql("((0))");
        });

        modelBuilder.Entity<BsrvemcoUserScreenCallShowEventList>(entity =>
        {
            entity.HasKey(e => e.MsgScreenCallShowId);

            entity.ToTable("BSRVEMCO_USER_SCREEN_CALL_SHOW_EVENT_LIST");

            entity.Property(e => e.MsgScreenCallShowId).HasColumnName("MsgScreenCallShowID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'tracking')");
            entity.Property(e => e.CallCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.CallDirection).HasDefaultValueSql("((0))");
            entity.Property(e => e.CallDuration).HasDefaultValueSql("((0))");
            entity.Property(e => e.CallState).HasDefaultValueSql("((0))");
            entity.Property(e => e.CallStatus).HasDefaultValueSql("((0))");
            entity.Property(e => e.CallStatusIn)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CallStatusIN");
            entity.Property(e => e.CallStatusOut)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CallStatusOUT");
            entity.Property(e => e.CallTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CallTokenID");
            entity.Property(e => e.CallType).HasDefaultValueSql("((0))");
            entity.Property(e => e.DatabaseServerTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DatabaseServerTokenID");
            entity.Property(e => e.DateText).HasDefaultValueSql("((0))");
            entity.Property(e => e.DateTime).HasDefaultValueSql("((0))");
            entity.Property(e => e.DateTimeMilliSec).HasDefaultValueSql("((0))");
            entity.Property(e => e.DateTimeText).HasDefaultValueSql("((0))");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FileId).HasColumnName("FileID");
            entity.Property(e => e.FileIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.FromApplicationRoleCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.FromMobileNumberId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("FromMobileNumberTokenID");
            entity.Property(e => e.FromProjectRoleCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.FromUserId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("FromUserID");
            entity.Property(e => e.FromUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("FromUserTokenID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.GroupTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupTokenID");
            entity.Property(e => e.GroupType).HasDefaultValueSql("(N'private')");
            entity.Property(e => e.ImageDefaultServerId).HasColumnName("ImageDefaultServerID");
            entity.Property(e => e.ImageDefaultServerUrl).HasColumnName("ImageDefaultServerURL");
            entity.Property(e => e.ImageFromMobileNumberId).HasColumnName("ImageFromMobileNumberID");
            entity.Property(e => e.ImageFromUserId).HasColumnName("ImageFromUserID");
            entity.Property(e => e.ImageIsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageIsLoading).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageIsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.ImageThumServerUrl).HasColumnName("ImageThumServerURL");
            entity.Property(e => e.ImageToMobileNumberId).HasColumnName("ImageToMobileNumberID");
            entity.Property(e => e.ImageToUserId).HasColumnName("ImageToUserID");
            entity.Property(e => e.InviteCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.InviteOwnerMobileNumberId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("InviteOwnerMobileNumberID");
            entity.Property(e => e.InviteOwnerUserId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("InviteOwnerUserID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.InviteType).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsCreateNewChatLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDelivered).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsHistoryLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNewMessage).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSessionClosedLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsShareLocationAskRemoteEnable).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSpaceLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSubjectLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.LocationCountryFlagUrl).HasColumnName("LocationCountryFlagURL");
            entity.Property(e => e.LocationRequestFromRemoteUserId).HasColumnName("LocationRequestFromRemoteUserID");
            entity.Property(e => e.LocationRequestToRemoteUserId).HasColumnName("LocationRequestToRemoteUserID");
            entity.Property(e => e.MembershipType).HasDefaultValueSql("((0))");
            entity.Property(e => e.MessageCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.MessageText).HasDefaultValueSql("((0))");
            entity.Property(e => e.MessageTextCallIn)
                .HasDefaultValueSql("((0))")
                .HasColumnName("MessageTextCallIN");
            entity.Property(e => e.MessageTextCallOut).HasDefaultValueSql("((0))");
            entity.Property(e => e.MessageTextOriginal).HasDefaultValueSql("((0))");
            entity.Property(e => e.MessageTextOriginalCode).HasDefaultValueSql("(N'en')");
            entity.Property(e => e.MessageTextTranslateCode).HasDefaultValueSql("(N'en')");
            entity.Property(e => e.MessageTextTranslated).HasDefaultValueSql("((0))");
            entity.Property(e => e.MessageTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("MessageTokenID");
            entity.Property(e => e.MessageType).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("MobileNumberID");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.PrivateGroupTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PrivateGroupTokenID");
            entity.Property(e => e.ProjectTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ProjectTokenID");
            entity.Property(e => e.RemoteMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RemoteMobileNumberTokenID");
            entity.Property(e => e.RemoteUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RemoteUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenCallShowTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ScreenCallShowTokenID");
            entity.Property(e => e.ScreenChatShowId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ServerDateDay).HasDefaultValueSql("((0))");
            entity.Property(e => e.ServerDateMonth).HasDefaultValueSql("((0))");
            entity.Property(e => e.ServerDateYear).HasDefaultValueSql("((0))");
            entity.Property(e => e.ServerDay).HasDefaultValueSql("((0))");
            entity.Property(e => e.ServerMonth).HasDefaultValueSql("((0))");
            entity.Property(e => e.ServerYear).HasDefaultValueSql("((0))");
            entity.Property(e => e.StaticMapUrl).HasColumnName("StaticMapURL");
            entity.Property(e => e.SuggestContactListFromRemoteUserId).HasColumnName("SuggestContactListFromRemoteUserID");
            entity.Property(e => e.SuggestContactListMobileNumberId).HasColumnName("SuggestContactListMobileNumberID");
            entity.Property(e => e.SuggestContactListToRemoteUserId).HasColumnName("SuggestContactListToRemoteUserID");
            entity.Property(e => e.SuggestContactListUserId).HasColumnName("SuggestContactListUserID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.ToApplicationRoleCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.ToMobileNumberId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ToMobileNumberTokenID");
            entity.Property(e => e.ToProjectRoleCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.ToUserId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ToUserID");
            entity.Property(e => e.ToUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ToUserTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDateTimeUtc)
                .HasColumnType("smalldatetime")
                .HasColumnName("UploadDateTimeUTC");
            entity.Property(e => e.UploadDateUtc)
                .HasColumnType("smalldatetime")
                .HasColumnName("UploadDateUTC");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadDayUtc)
                .HasColumnType("money")
                .HasColumnName("UploadDayUTC");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadMonthUtc).HasColumnName("UploadMonthUTC");
            entity.Property(e => e.UploadTimeUtc).HasColumnName("UploadTimeUTC");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UploadYearUtc).HasColumnName("UploadYearUTC");
            entity.Property(e => e.UserDateDay).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserDateMonth).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserDateYear).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserDay).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("UserID");
            entity.Property(e => e.UserMonth).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserName).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserSessionId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("UserSessionID");
            entity.Property(e => e.UserType).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserYear).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoDefaultServerId).HasColumnName("VideoDefaultServerID");
            entity.Property(e => e.VideoDefaultServerUrl).HasColumnName("VideoDefaultServerURL");
            entity.Property(e => e.VideoFromMobileNumberId).HasColumnName("VideoFromMobileNumberID");
            entity.Property(e => e.VideoFromUserId).HasColumnName("VideoFromUserID");
            entity.Property(e => e.VideoIsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoIsLoading).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoIsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.VideoShowInviteId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("VideoShowInviteID");
            entity.Property(e => e.VideoThumServerUrl).HasColumnName("VideoThumServerURL");
            entity.Property(e => e.VideoToMobileNumberId).HasColumnName("VideoToMobileNumberID");
            entity.Property(e => e.VideoToUserId).HasColumnName("VideoToUserID");
            entity.Property(e => e.VisibleStatus).HasDefaultValueSql("((0))");
            entity.Property(e => e.VoiceDefaultServerId).HasColumnName("VoiceDefaultServerID");
            entity.Property(e => e.VoiceDefaultServerUrl).HasColumnName("VoiceDefaultServerURL");
            entity.Property(e => e.VoiceFromMobileNumberId).HasColumnName("VoiceFromMobileNumberID");
            entity.Property(e => e.VoiceFromUserId).HasColumnName("VoiceFromUserID");
            entity.Property(e => e.VoiceIsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.VoiceIsLoading).HasDefaultValueSql("((0))");
            entity.Property(e => e.VoiceIsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.VoiceIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.VoiceShowInviteId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("VoiceShowInviteID");
            entity.Property(e => e.VoiceThumServerUrl).HasColumnName("VoiceThumServerURL");
            entity.Property(e => e.VoiceToMobileNumberId).HasColumnName("VoiceToMobileNumberID");
            entity.Property(e => e.VoiceToUserId).HasColumnName("VoiceToUserID");
        });

        modelBuilder.Entity<BsrvemcoUserScreenCallShowMessageList>(entity =>
        {
            entity.HasKey(e => e.MsgScreenCallShowId).HasName("PK_SAFEPASS_USER_PROJECT_SCREEN_CALL_SHOW_MESSAGE_LIST");

            entity.ToTable("BSRVEMCO_USER_SCREEN_CALL_SHOW_MESSAGE_LIST");

            entity.Property(e => e.MsgScreenCallShowId).HasColumnName("MsgScreenCallShowID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'tracking')");
            entity.Property(e => e.CallCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.CallDirection).HasDefaultValueSql("((0))");
            entity.Property(e => e.CallDuration).HasDefaultValueSql("((0))");
            entity.Property(e => e.CallState).HasDefaultValueSql("((0))");
            entity.Property(e => e.CallStatus).HasDefaultValueSql("((0))");
            entity.Property(e => e.CallStatusIn)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CallStatusIN");
            entity.Property(e => e.CallStatusOut)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CallStatusOUT");
            entity.Property(e => e.CallTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CallTokenID");
            entity.Property(e => e.CallType).HasDefaultValueSql("((0))");
            entity.Property(e => e.DatabaseServerTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DatabaseServerTokenID");
            entity.Property(e => e.DateText).HasDefaultValueSql("((0))");
            entity.Property(e => e.DateTime).HasDefaultValueSql("((0))");
            entity.Property(e => e.DateTimeText).HasDefaultValueSql("((0))");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FileId).HasColumnName("FileID");
            entity.Property(e => e.FileIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.FromApplicationRoleCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.FromMobileNumberId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("FromMobileNumberTokenID");
            entity.Property(e => e.FromProjectRoleCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.FromUserId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("FromUserID");
            entity.Property(e => e.FromUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("FromUserTokenID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.GroupTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupTokenID");
            entity.Property(e => e.GroupType).HasDefaultValueSql("(N'private')");
            entity.Property(e => e.ImageDefaultServerId).HasColumnName("ImageDefaultServerID");
            entity.Property(e => e.ImageDefaultServerUrl).HasColumnName("ImageDefaultServerURL");
            entity.Property(e => e.ImageFromMobileNumberId).HasColumnName("ImageFromMobileNumberID");
            entity.Property(e => e.ImageFromUserId).HasColumnName("ImageFromUserID");
            entity.Property(e => e.ImageIsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageIsLoading).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageIsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.ImageThumServerUrl).HasColumnName("ImageThumServerURL");
            entity.Property(e => e.ImageToMobileNumberId).HasColumnName("ImageToMobileNumberID");
            entity.Property(e => e.ImageToUserId).HasColumnName("ImageToUserID");
            entity.Property(e => e.InviteCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.InviteOwnerMobileNumberId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("InviteOwnerMobileNumberID");
            entity.Property(e => e.InviteOwnerUserId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("InviteOwnerUserID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.InviteType).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsCreateNewChatLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDelivered).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsHistoryLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNewMessage).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSessionClosedLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsShareLocationAskRemoteEnable).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSpaceLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSubjectLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.LocationCountryFlagUrl).HasColumnName("LocationCountryFlagURL");
            entity.Property(e => e.LocationRequestFromRemoteUserId).HasColumnName("LocationRequestFromRemoteUserID");
            entity.Property(e => e.LocationRequestToRemoteUserId).HasColumnName("LocationRequestToRemoteUserID");
            entity.Property(e => e.MembershipType).HasDefaultValueSql("((0))");
            entity.Property(e => e.MessageCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.MessageText).HasDefaultValueSql("((0))");
            entity.Property(e => e.MessageTextCallIn)
                .HasDefaultValueSql("((0))")
                .HasColumnName("MessageTextCallIN");
            entity.Property(e => e.MessageTextCallOut).HasDefaultValueSql("((0))");
            entity.Property(e => e.MessageTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("MessageTokenID");
            entity.Property(e => e.MessageType).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("MobileNumberID");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.PrivateGroupTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PrivateGroupTokenID");
            entity.Property(e => e.ProjectTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ProjectTokenID");
            entity.Property(e => e.RemoteMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RemoteMobileNumberTokenID");
            entity.Property(e => e.RemoteUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RemoteUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenCallShowTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ScreenCallShowTokenID");
            entity.Property(e => e.ScreenChatShowId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ServerDateDay).HasDefaultValueSql("((0))");
            entity.Property(e => e.ServerDateMonth).HasDefaultValueSql("((0))");
            entity.Property(e => e.ServerDateYear).HasDefaultValueSql("((0))");
            entity.Property(e => e.StaticMapUrl).HasColumnName("StaticMapURL");
            entity.Property(e => e.SuggestContactListFromRemoteUserId).HasColumnName("SuggestContactListFromRemoteUserID");
            entity.Property(e => e.SuggestContactListMobileNumberId).HasColumnName("SuggestContactListMobileNumberID");
            entity.Property(e => e.SuggestContactListToRemoteUserId).HasColumnName("SuggestContactListToRemoteUserID");
            entity.Property(e => e.SuggestContactListUserId).HasColumnName("SuggestContactListUserID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.ToApplicationRoleCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.ToMobileNumberId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ToMobileNumberTokenID");
            entity.Property(e => e.ToProjectRoleCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.ToUserId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ToUserID");
            entity.Property(e => e.ToUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ToUserTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDateTimeUtc)
                .HasColumnType("smalldatetime")
                .HasColumnName("UploadDateTimeUTC");
            entity.Property(e => e.UploadDateUtc)
                .HasColumnType("smalldatetime")
                .HasColumnName("UploadDateUTC");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadDayUtc)
                .HasColumnType("money")
                .HasColumnName("UploadDayUTC");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadMonthUtc).HasColumnName("UploadMonthUTC");
            entity.Property(e => e.UploadTimeUtc).HasColumnName("UploadTimeUTC");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UploadYearUtc).HasColumnName("UploadYearUTC");
            entity.Property(e => e.UserDateDay).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserDateMonth).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserDateYear).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("UserID");
            entity.Property(e => e.UserName).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserSessionId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("UserSessionID");
            entity.Property(e => e.UserType).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoDefaultServerId).HasColumnName("VideoDefaultServerID");
            entity.Property(e => e.VideoDefaultServerUrl).HasColumnName("VideoDefaultServerURL");
            entity.Property(e => e.VideoFromMobileNumberId).HasColumnName("VideoFromMobileNumberID");
            entity.Property(e => e.VideoFromUserId).HasColumnName("VideoFromUserID");
            entity.Property(e => e.VideoIsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoIsLoading).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoIsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.VideoShowInviteId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("VideoShowInviteID");
            entity.Property(e => e.VideoThumServerUrl).HasColumnName("VideoThumServerURL");
            entity.Property(e => e.VideoToMobileNumberId).HasColumnName("VideoToMobileNumberID");
            entity.Property(e => e.VideoToUserId).HasColumnName("VideoToUserID");
            entity.Property(e => e.VisibleStatus).HasDefaultValueSql("((0))");
            entity.Property(e => e.VoiceDefaultServerId).HasColumnName("VoiceDefaultServerID");
            entity.Property(e => e.VoiceDefaultServerUrl).HasColumnName("VoiceDefaultServerURL");
            entity.Property(e => e.VoiceFromMobileNumberId).HasColumnName("VoiceFromMobileNumberID");
            entity.Property(e => e.VoiceFromUserId).HasColumnName("VoiceFromUserID");
            entity.Property(e => e.VoiceIsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.VoiceIsLoading).HasDefaultValueSql("((0))");
            entity.Property(e => e.VoiceIsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.VoiceIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.VoiceShowInviteId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("VoiceShowInviteID");
            entity.Property(e => e.VoiceThumServerUrl).HasColumnName("VoiceThumServerURL");
            entity.Property(e => e.VoiceToMobileNumberId).HasColumnName("VoiceToMobileNumberID");
            entity.Property(e => e.VoiceToUserId).HasColumnName("VoiceToUserID");
        });

        modelBuilder.Entity<BsrvemcoUserScreenChatShowEventList>(entity =>
        {
            entity.HasKey(e => e.MsgScreenChatShowId);

            entity.ToTable("BSRVEMCO_USER_SCREEN_CHAT_SHOW_EVENT_LIST");

            entity.Property(e => e.MsgScreenChatShowId).HasColumnName("MsgScreenChatShowID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'tracking')");
            entity.Property(e => e.CallCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.CallDirection).HasDefaultValueSql("((0))");
            entity.Property(e => e.CallDuration).HasDefaultValueSql("((0))");
            entity.Property(e => e.CallState).HasDefaultValueSql("((0))");
            entity.Property(e => e.CallStatus).HasDefaultValueSql("((0))");
            entity.Property(e => e.CallStatusIn)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CallStatusIN");
            entity.Property(e => e.CallStatusOut)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CallStatusOUT");
            entity.Property(e => e.CallTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CallTokenID");
            entity.Property(e => e.CallType).HasDefaultValueSql("((0))");
            entity.Property(e => e.DatabaseServerTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DatabaseServerTokenID");
            entity.Property(e => e.DateText).HasDefaultValueSql("((0))");
            entity.Property(e => e.DateTime).HasDefaultValueSql("((0))");
            entity.Property(e => e.DateTimeMilliSec).HasDefaultValueSql("((0))");
            entity.Property(e => e.DateTimeText).HasDefaultValueSql("((0))");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FileId).HasColumnName("FileID");
            entity.Property(e => e.FileIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.FromApplicationRoleCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.FromMobileNumberId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("FromMobileNumberTokenID");
            entity.Property(e => e.FromProjectRoleCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.FromUserId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("FromUserID");
            entity.Property(e => e.FromUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("FromUserTokenID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.GroupTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupTokenID");
            entity.Property(e => e.GroupType).HasDefaultValueSql("(N'private')");
            entity.Property(e => e.ImageDefaultServerId).HasColumnName("ImageDefaultServerID");
            entity.Property(e => e.ImageDefaultServerUrl).HasColumnName("ImageDefaultServerURL");
            entity.Property(e => e.ImageFromMobileNumberId).HasColumnName("ImageFromMobileNumberID");
            entity.Property(e => e.ImageFromUserId).HasColumnName("ImageFromUserID");
            entity.Property(e => e.ImageIsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageIsLoading).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageIsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.ImageThumServerUrl).HasColumnName("ImageThumServerURL");
            entity.Property(e => e.ImageToMobileNumberId).HasColumnName("ImageToMobileNumberID");
            entity.Property(e => e.ImageToUserId).HasColumnName("ImageToUserID");
            entity.Property(e => e.InviteCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.InviteOwnerMobileNumberId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("InviteOwnerMobileNumberID");
            entity.Property(e => e.InviteOwnerUserId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("InviteOwnerUserID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.InviteType).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsCreateNewChatLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDelivered).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsHistoryLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNewMessage).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSessionClosedLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsShareLocationAskRemoteEnable).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSpaceLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSubjectLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.LocationCountryFlagUrl).HasColumnName("LocationCountryFlagURL");
            entity.Property(e => e.LocationRequestFromRemoteUserId).HasColumnName("LocationRequestFromRemoteUserID");
            entity.Property(e => e.LocationRequestToRemoteUserId).HasColumnName("LocationRequestToRemoteUserID");
            entity.Property(e => e.MembershipType).HasDefaultValueSql("((0))");
            entity.Property(e => e.MessageCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.MessageText).HasDefaultValueSql("((0))");
            entity.Property(e => e.MessageTextCallIn)
                .HasDefaultValueSql("((0))")
                .HasColumnName("MessageTextCallIN");
            entity.Property(e => e.MessageTextCallOut).HasDefaultValueSql("((0))");
            entity.Property(e => e.MessageTextOriginal).HasDefaultValueSql("((0))");
            entity.Property(e => e.MessageTextOriginalCode).HasDefaultValueSql("(N'en')");
            entity.Property(e => e.MessageTextTranslateCode).HasDefaultValueSql("(N'en')");
            entity.Property(e => e.MessageTextTranslated).HasDefaultValueSql("((0))");
            entity.Property(e => e.MessageTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("MessageTokenID");
            entity.Property(e => e.MessageType).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("MobileNumberID");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.PrivateGroupTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PrivateGroupTokenID");
            entity.Property(e => e.ProjectTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ProjectTokenID");
            entity.Property(e => e.RemoteMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RemoteMobileNumberTokenID");
            entity.Property(e => e.RemoteUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RemoteUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenCallShowTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ScreenCallShowTokenID");
            entity.Property(e => e.ScreenChatShowId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ServerDateDay).HasDefaultValueSql("((0))");
            entity.Property(e => e.ServerDateMonth).HasDefaultValueSql("((0))");
            entity.Property(e => e.ServerDateYear).HasDefaultValueSql("((0))");
            entity.Property(e => e.ServerDay).HasDefaultValueSql("((0))");
            entity.Property(e => e.ServerMonth).HasDefaultValueSql("((0))");
            entity.Property(e => e.ServerYear).HasDefaultValueSql("((0))");
            entity.Property(e => e.StaticMapUrl).HasColumnName("StaticMapURL");
            entity.Property(e => e.SuggestContactListFromRemoteUserId).HasColumnName("SuggestContactListFromRemoteUserID");
            entity.Property(e => e.SuggestContactListMobileNumberId).HasColumnName("SuggestContactListMobileNumberID");
            entity.Property(e => e.SuggestContactListToRemoteUserId).HasColumnName("SuggestContactListToRemoteUserID");
            entity.Property(e => e.SuggestContactListUserId).HasColumnName("SuggestContactListUserID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.ToApplicationRoleCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.ToMobileNumberId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ToMobileNumberTokenID");
            entity.Property(e => e.ToProjectRoleCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.ToUserId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ToUserID");
            entity.Property(e => e.ToUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ToUserTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDateTimeUtc)
                .HasColumnType("smalldatetime")
                .HasColumnName("UploadDateTimeUTC");
            entity.Property(e => e.UploadDateUtc)
                .HasColumnType("smalldatetime")
                .HasColumnName("UploadDateUTC");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadDayUtc)
                .HasColumnType("money")
                .HasColumnName("UploadDayUTC");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadMonthUtc).HasColumnName("UploadMonthUTC");
            entity.Property(e => e.UploadTimeUtc).HasColumnName("UploadTimeUTC");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UploadYearUtc).HasColumnName("UploadYearUTC");
            entity.Property(e => e.UserDateDay).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserDateMonth).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserDateYear).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserDay).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("UserID");
            entity.Property(e => e.UserMonth).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserName).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserSessionId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("UserSessionID");
            entity.Property(e => e.UserType).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserYear).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoDefaultServerId).HasColumnName("VideoDefaultServerID");
            entity.Property(e => e.VideoDefaultServerUrl).HasColumnName("VideoDefaultServerURL");
            entity.Property(e => e.VideoFromMobileNumberId).HasColumnName("VideoFromMobileNumberID");
            entity.Property(e => e.VideoFromUserId).HasColumnName("VideoFromUserID");
            entity.Property(e => e.VideoIsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoIsLoading).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoIsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.VideoShowInviteId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("VideoShowInviteID");
            entity.Property(e => e.VideoThumServerUrl).HasColumnName("VideoThumServerURL");
            entity.Property(e => e.VideoToMobileNumberId).HasColumnName("VideoToMobileNumberID");
            entity.Property(e => e.VideoToUserId).HasColumnName("VideoToUserID");
            entity.Property(e => e.VisibleStatus).HasDefaultValueSql("((0))");
            entity.Property(e => e.VoiceDefaultServerId).HasColumnName("VoiceDefaultServerID");
            entity.Property(e => e.VoiceDefaultServerUrl).HasColumnName("VoiceDefaultServerURL");
            entity.Property(e => e.VoiceFromMobileNumberId).HasColumnName("VoiceFromMobileNumberID");
            entity.Property(e => e.VoiceFromUserId).HasColumnName("VoiceFromUserID");
            entity.Property(e => e.VoiceIsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.VoiceIsLoading).HasDefaultValueSql("((0))");
            entity.Property(e => e.VoiceIsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.VoiceIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.VoiceShowInviteId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("VoiceShowInviteID");
            entity.Property(e => e.VoiceThumServerUrl).HasColumnName("VoiceThumServerURL");
            entity.Property(e => e.VoiceToMobileNumberId).HasColumnName("VoiceToMobileNumberID");
            entity.Property(e => e.VoiceToUserId).HasColumnName("VoiceToUserID");
        });

        modelBuilder.Entity<BsrvemcoUserScreenChatShowEventTranslateList>(entity =>
        {
            entity.HasKey(e => e.MsgScreenChatShowId);

            entity.ToTable("BSRVEMCO_USER_SCREEN_CHAT_SHOW_EVENT_TRANSLATE_LIST");

            entity.Property(e => e.MsgScreenChatShowId).HasColumnName("MsgScreenChatShowID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'tracking')");
            entity.Property(e => e.CallCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.CallDirection).HasDefaultValueSql("((0))");
            entity.Property(e => e.CallDuration).HasDefaultValueSql("((0))");
            entity.Property(e => e.CallState).HasDefaultValueSql("((0))");
            entity.Property(e => e.CallStatus).HasDefaultValueSql("((0))");
            entity.Property(e => e.CallStatusIn)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CallStatusIN");
            entity.Property(e => e.CallStatusOut)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CallStatusOUT");
            entity.Property(e => e.CallTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CallTokenID");
            entity.Property(e => e.CallType).HasDefaultValueSql("((0))");
            entity.Property(e => e.DatabaseServerTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DatabaseServerTokenID");
            entity.Property(e => e.DateText).HasDefaultValueSql("((0))");
            entity.Property(e => e.DateTime).HasDefaultValueSql("((0))");
            entity.Property(e => e.DateTimeMilliSec).HasDefaultValueSql("((0))");
            entity.Property(e => e.DateTimeText).HasDefaultValueSql("((0))");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FileId).HasColumnName("FileID");
            entity.Property(e => e.FileIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.FromApplicationRoleCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.FromMobileNumberId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("FromMobileNumberTokenID");
            entity.Property(e => e.FromProjectRoleCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.FromUserId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("FromUserID");
            entity.Property(e => e.FromUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("FromUserTokenID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.GroupTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupTokenID");
            entity.Property(e => e.GroupType).HasDefaultValueSql("(N'private')");
            entity.Property(e => e.ImageDefaultServerId).HasColumnName("ImageDefaultServerID");
            entity.Property(e => e.ImageDefaultServerUrl).HasColumnName("ImageDefaultServerURL");
            entity.Property(e => e.ImageFromMobileNumberId).HasColumnName("ImageFromMobileNumberID");
            entity.Property(e => e.ImageFromUserId).HasColumnName("ImageFromUserID");
            entity.Property(e => e.ImageIsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageIsLoading).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageIsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.ImageThumServerUrl).HasColumnName("ImageThumServerURL");
            entity.Property(e => e.ImageToMobileNumberId).HasColumnName("ImageToMobileNumberID");
            entity.Property(e => e.ImageToUserId).HasColumnName("ImageToUserID");
            entity.Property(e => e.InviteCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.InviteOwnerMobileNumberId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("InviteOwnerMobileNumberID");
            entity.Property(e => e.InviteOwnerUserId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("InviteOwnerUserID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.InviteType).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsCreateNewChatLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDelivered).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsHistoryLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNewMessage).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSessionClosedLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsShareLocationAskRemoteEnable).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSpaceLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSubjectLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.LocationCountryFlagUrl).HasColumnName("LocationCountryFlagURL");
            entity.Property(e => e.LocationRequestFromRemoteUserId).HasColumnName("LocationRequestFromRemoteUserID");
            entity.Property(e => e.LocationRequestToRemoteUserId).HasColumnName("LocationRequestToRemoteUserID");
            entity.Property(e => e.MembershipType).HasDefaultValueSql("((0))");
            entity.Property(e => e.MessageCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.MessageText).HasDefaultValueSql("((0))");
            entity.Property(e => e.MessageTextCallIn)
                .HasDefaultValueSql("((0))")
                .HasColumnName("MessageTextCallIN");
            entity.Property(e => e.MessageTextCallOut).HasDefaultValueSql("((0))");
            entity.Property(e => e.MessageTextOriginal).HasDefaultValueSql("((0))");
            entity.Property(e => e.MessageTextOriginalCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.MessageTextTranslateCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.MessageTextTranslated).HasDefaultValueSql("((0))");
            entity.Property(e => e.MessageTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("MessageTokenID");
            entity.Property(e => e.MessageType).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("MobileNumberID");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.PrivateGroupTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PrivateGroupTokenID");
            entity.Property(e => e.ProjectTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ProjectTokenID");
            entity.Property(e => e.RemoteMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RemoteMobileNumberTokenID");
            entity.Property(e => e.RemoteUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RemoteUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenCallShowTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ScreenCallShowTokenID");
            entity.Property(e => e.ScreenChatShowId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ServerDateDay).HasDefaultValueSql("((0))");
            entity.Property(e => e.ServerDateMonth).HasDefaultValueSql("((0))");
            entity.Property(e => e.ServerDateYear).HasDefaultValueSql("((0))");
            entity.Property(e => e.ServerDay).HasDefaultValueSql("((0))");
            entity.Property(e => e.ServerMonth).HasDefaultValueSql("((0))");
            entity.Property(e => e.ServerYear).HasDefaultValueSql("((0))");
            entity.Property(e => e.StaticMapUrl).HasColumnName("StaticMapURL");
            entity.Property(e => e.SuggestContactListFromRemoteUserId).HasColumnName("SuggestContactListFromRemoteUserID");
            entity.Property(e => e.SuggestContactListMobileNumberId).HasColumnName("SuggestContactListMobileNumberID");
            entity.Property(e => e.SuggestContactListToRemoteUserId).HasColumnName("SuggestContactListToRemoteUserID");
            entity.Property(e => e.SuggestContactListUserId).HasColumnName("SuggestContactListUserID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.ToApplicationRoleCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.ToMobileNumberId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ToMobileNumberTokenID");
            entity.Property(e => e.ToProjectRoleCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.ToUserId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ToUserID");
            entity.Property(e => e.ToUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ToUserTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDateTimeUtc)
                .HasColumnType("smalldatetime")
                .HasColumnName("UploadDateTimeUTC");
            entity.Property(e => e.UploadDateUtc)
                .HasColumnType("smalldatetime")
                .HasColumnName("UploadDateUTC");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadDayUtc)
                .HasColumnType("money")
                .HasColumnName("UploadDayUTC");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadMonthUtc).HasColumnName("UploadMonthUTC");
            entity.Property(e => e.UploadTimeUtc).HasColumnName("UploadTimeUTC");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UploadYearUtc).HasColumnName("UploadYearUTC");
            entity.Property(e => e.UserDateDay).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserDateMonth).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserDateYear).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserDay).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("UserID");
            entity.Property(e => e.UserMonth).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserName).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserSessionId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("UserSessionID");
            entity.Property(e => e.UserType).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserYear).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoDefaultServerId).HasColumnName("VideoDefaultServerID");
            entity.Property(e => e.VideoDefaultServerUrl).HasColumnName("VideoDefaultServerURL");
            entity.Property(e => e.VideoFromMobileNumberId).HasColumnName("VideoFromMobileNumberID");
            entity.Property(e => e.VideoFromUserId).HasColumnName("VideoFromUserID");
            entity.Property(e => e.VideoIsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoIsLoading).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoIsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.VideoShowInviteId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("VideoShowInviteID");
            entity.Property(e => e.VideoThumServerUrl).HasColumnName("VideoThumServerURL");
            entity.Property(e => e.VideoToMobileNumberId).HasColumnName("VideoToMobileNumberID");
            entity.Property(e => e.VideoToUserId).HasColumnName("VideoToUserID");
            entity.Property(e => e.VisibleStatus).HasDefaultValueSql("((0))");
            entity.Property(e => e.VoiceDefaultServerId).HasColumnName("VoiceDefaultServerID");
            entity.Property(e => e.VoiceDefaultServerUrl).HasColumnName("VoiceDefaultServerURL");
            entity.Property(e => e.VoiceFromMobileNumberId).HasColumnName("VoiceFromMobileNumberID");
            entity.Property(e => e.VoiceFromUserId).HasColumnName("VoiceFromUserID");
            entity.Property(e => e.VoiceIsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.VoiceIsLoading).HasDefaultValueSql("((0))");
            entity.Property(e => e.VoiceIsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.VoiceIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.VoiceShowInviteId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("VoiceShowInviteID");
            entity.Property(e => e.VoiceThumServerUrl).HasColumnName("VoiceThumServerURL");
            entity.Property(e => e.VoiceToMobileNumberId).HasColumnName("VoiceToMobileNumberID");
            entity.Property(e => e.VoiceToUserId).HasColumnName("VoiceToUserID");
        });

        modelBuilder.Entity<BsrvemcoUserScreenChatShowLoginList>(entity =>
        {
            entity.HasKey(e => e.UscreenChatShowLoginId);

            entity.ToTable("BSRVEMCO_USER_SCREEN_CHAT_SHOW_LOGIN_LIST");

            entity.Property(e => e.UscreenChatShowLoginId).HasColumnName("UScreenChatShowLoginID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'tracking')");
            entity.Property(e => e.ApplicationRoleCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.ApplicationRoleTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ApplicationRoleTokenID");
            entity.Property(e => e.DatabaseServerTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DatabaseServerTokenID");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FromTrackuserId).HasColumnName("FromTRACKUserID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.GroupRoleCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.GroupRoleTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupRoleTokenID");
            entity.Property(e => e.GroupShowId).HasColumnName("GroupShowID");
            entity.Property(e => e.GroupShowInviteId).HasColumnName("GroupShowInviteID");
            entity.Property(e => e.GroupShowSessionId).HasColumnName("GroupShowSessionID");
            entity.Property(e => e.GroupShowTicketId).HasColumnName("GroupShowTicketID");
            entity.Property(e => e.GroupTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupTokenID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsLogin).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNotificationShow).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsScreenOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.NotificationReset).HasColumnType("smalldatetime");
            entity.Property(e => e.NotificationStart)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.PrivateShowId).HasColumnName("PrivateShowID");
            entity.Property(e => e.PrivateShowSessionId).HasColumnName("PrivateShowSessionID");
            entity.Property(e => e.PrivateShowTicketId).HasColumnName("PrivateShowTicketID");
            entity.Property(e => e.ProjectRoleCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.ProjectRoleTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ProjectRoleTokenID");
            entity.Property(e => e.RemoteMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RemoteMobileNumberTokenID");
            entity.Property(e => e.RemoteUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RemoteUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ScreenChatShowTicketTempId).HasColumnName("ScreenChatShowTicketTempID");
            entity.Property(e => e.ShowId).HasColumnName("ShowID");
            entity.Property(e => e.ShowSessionId).HasColumnName("ShowSessionID");
            entity.Property(e => e.ShowTicketId).HasColumnName("ShowTicketID");
            entity.Property(e => e.ToTrackuserId).HasColumnName("ToTRACKUserID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.TrackuserId).HasColumnName("TRACKUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.VideoShowId).HasColumnName("VideoShowID");
            entity.Property(e => e.VideoShowSessionId).HasColumnName("VideoShowSessionID");
            entity.Property(e => e.VideoShowTicketId).HasColumnName("VideoShowTicketID");
            entity.Property(e => e.VoiceShowId).HasColumnName("VoiceShowID");
            entity.Property(e => e.VoiceShowSessionId).HasColumnName("VoiceShowSessionID");
            entity.Property(e => e.VoiceShowTicketId).HasColumnName("VoiceShowTicketID");
        });

        modelBuilder.Entity<BsrvemcoUserScreenChatShowMessageList>(entity =>
        {
            entity.HasKey(e => e.MsgScreenChatShowId);

            entity.ToTable("BSRVEMCO_USER_SCREEN_CHAT_SHOW_MESSAGE_LIST");

            entity.Property(e => e.MsgScreenChatShowId).HasColumnName("MsgScreenChatShowID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'tracking')");
            entity.Property(e => e.CallCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.CallDirection).HasDefaultValueSql("((0))");
            entity.Property(e => e.CallDuration).HasDefaultValueSql("((0))");
            entity.Property(e => e.CallState).HasDefaultValueSql("((0))");
            entity.Property(e => e.CallStatus).HasDefaultValueSql("((0))");
            entity.Property(e => e.CallStatusIn)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CallStatusIN");
            entity.Property(e => e.CallStatusOut)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CallStatusOUT");
            entity.Property(e => e.CallTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CallTokenID");
            entity.Property(e => e.CallType).HasDefaultValueSql("((0))");
            entity.Property(e => e.DatabaseServerTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DatabaseServerTokenID");
            entity.Property(e => e.DateText).HasDefaultValueSql("((0))");
            entity.Property(e => e.DateTime).HasDefaultValueSql("((0))");
            entity.Property(e => e.DateTimeText).HasDefaultValueSql("((0))");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FileId).HasColumnName("FileID");
            entity.Property(e => e.FileIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.FromApplicationRoleCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.FromMobileNumberId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("FromMobileNumberTokenID");
            entity.Property(e => e.FromProjectRoleCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.FromUserId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("FromUserID");
            entity.Property(e => e.FromUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("FromUserTokenID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.GroupTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupTokenID");
            entity.Property(e => e.GroupType).HasDefaultValueSql("(N'private')");
            entity.Property(e => e.ImageDefaultServerId).HasColumnName("ImageDefaultServerID");
            entity.Property(e => e.ImageDefaultServerUrl).HasColumnName("ImageDefaultServerURL");
            entity.Property(e => e.ImageFromMobileNumberId).HasColumnName("ImageFromMobileNumberID");
            entity.Property(e => e.ImageFromUserId).HasColumnName("ImageFromUserID");
            entity.Property(e => e.ImageIsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageIsLoading).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageIsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.ImageThumServerUrl).HasColumnName("ImageThumServerURL");
            entity.Property(e => e.ImageToMobileNumberId).HasColumnName("ImageToMobileNumberID");
            entity.Property(e => e.ImageToUserId).HasColumnName("ImageToUserID");
            entity.Property(e => e.InviteCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.InviteOwnerMobileNumberId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("InviteOwnerMobileNumberID");
            entity.Property(e => e.InviteOwnerUserId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("InviteOwnerUserID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.InviteType).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsCreateNewChatLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDelivered).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsHistoryLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNewMessage).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSessionClosedLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsShareLocationAskRemoteEnable).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSpaceLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSubjectLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.LocationCountryFlagUrl).HasColumnName("LocationCountryFlagURL");
            entity.Property(e => e.LocationRequestFromRemoteUserId).HasColumnName("LocationRequestFromRemoteUserID");
            entity.Property(e => e.LocationRequestToRemoteUserId).HasColumnName("LocationRequestToRemoteUserID");
            entity.Property(e => e.MembershipType).HasDefaultValueSql("((0))");
            entity.Property(e => e.MessageCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.MessageText).HasDefaultValueSql("((0))");
            entity.Property(e => e.MessageTextCallIn)
                .HasDefaultValueSql("((0))")
                .HasColumnName("MessageTextCallIN");
            entity.Property(e => e.MessageTextCallOut).HasDefaultValueSql("((0))");
            entity.Property(e => e.MessageTextOriginal).HasDefaultValueSql("((0))");
            entity.Property(e => e.MessageTextOriginalCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.MessageTextTranslateCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.MessageTextTranslated).HasDefaultValueSql("((0))");
            entity.Property(e => e.MessageTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("MessageTokenID");
            entity.Property(e => e.MessageType).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("MobileNumberID");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.PrivateGroupTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PrivateGroupTokenID");
            entity.Property(e => e.ProjectTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ProjectTokenID");
            entity.Property(e => e.RemoteMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RemoteMobileNumberTokenID");
            entity.Property(e => e.RemoteUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RemoteUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenCallShowTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ScreenCallShowTokenID");
            entity.Property(e => e.ScreenChatShowId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ServerDateDay).HasDefaultValueSql("((0))");
            entity.Property(e => e.ServerDateMonth).HasDefaultValueSql("((0))");
            entity.Property(e => e.ServerDateYear).HasDefaultValueSql("((0))");
            entity.Property(e => e.StaticMapUrl).HasColumnName("StaticMapURL");
            entity.Property(e => e.SuggestContactListFromRemoteUserId).HasColumnName("SuggestContactListFromRemoteUserID");
            entity.Property(e => e.SuggestContactListMobileNumberId).HasColumnName("SuggestContactListMobileNumberID");
            entity.Property(e => e.SuggestContactListToRemoteUserId).HasColumnName("SuggestContactListToRemoteUserID");
            entity.Property(e => e.SuggestContactListUserId).HasColumnName("SuggestContactListUserID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.ToApplicationRoleCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.ToMobileNumberId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ToMobileNumberTokenID");
            entity.Property(e => e.ToProjectRoleCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.ToUserId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ToUserID");
            entity.Property(e => e.ToUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ToUserTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDateTimeUtc)
                .HasColumnType("smalldatetime")
                .HasColumnName("UploadDateTimeUTC");
            entity.Property(e => e.UploadDateUtc)
                .HasColumnType("smalldatetime")
                .HasColumnName("UploadDateUTC");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadDayUtc)
                .HasColumnType("money")
                .HasColumnName("UploadDayUTC");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadMonthUtc).HasColumnName("UploadMonthUTC");
            entity.Property(e => e.UploadTimeUtc).HasColumnName("UploadTimeUTC");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UploadYearUtc).HasColumnName("UploadYearUTC");
            entity.Property(e => e.UserDateDay).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserDateMonth).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserDateYear).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("UserID");
            entity.Property(e => e.UserName).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserSessionId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("UserSessionID");
            entity.Property(e => e.UserType).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoDefaultServerId).HasColumnName("VideoDefaultServerID");
            entity.Property(e => e.VideoDefaultServerUrl).HasColumnName("VideoDefaultServerURL");
            entity.Property(e => e.VideoFromMobileNumberId).HasColumnName("VideoFromMobileNumberID");
            entity.Property(e => e.VideoFromUserId).HasColumnName("VideoFromUserID");
            entity.Property(e => e.VideoIsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoIsLoading).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoIsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.VideoShowInviteId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("VideoShowInviteID");
            entity.Property(e => e.VideoThumServerUrl).HasColumnName("VideoThumServerURL");
            entity.Property(e => e.VideoToMobileNumberId).HasColumnName("VideoToMobileNumberID");
            entity.Property(e => e.VideoToUserId).HasColumnName("VideoToUserID");
            entity.Property(e => e.VisibleStatus).HasDefaultValueSql("((0))");
            entity.Property(e => e.VoiceDefaultServerId).HasColumnName("VoiceDefaultServerID");
            entity.Property(e => e.VoiceDefaultServerUrl).HasColumnName("VoiceDefaultServerURL");
            entity.Property(e => e.VoiceFromMobileNumberId).HasColumnName("VoiceFromMobileNumberID");
            entity.Property(e => e.VoiceFromUserId).HasColumnName("VoiceFromUserID");
            entity.Property(e => e.VoiceIsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.VoiceIsLoading).HasDefaultValueSql("((0))");
            entity.Property(e => e.VoiceIsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.VoiceIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.VoiceShowInviteId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("VoiceShowInviteID");
            entity.Property(e => e.VoiceThumServerUrl).HasColumnName("VoiceThumServerURL");
            entity.Property(e => e.VoiceToMobileNumberId).HasColumnName("VoiceToMobileNumberID");
            entity.Property(e => e.VoiceToUserId).HasColumnName("VoiceToUserID");
        });

        modelBuilder.Entity<BsrvemcoUserScreenChatShowSeenList>(entity =>
        {
            entity.HasKey(e => e.MsgScreenChatShowSeenId);

            entity.ToTable("BSRVEMCO_USER_SCREEN_CHAT_SHOW_SEEN_LIST");

            entity.Property(e => e.MsgScreenChatShowSeenId).HasColumnName("MsgScreenChatShowSeenID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'tracking')");
            entity.Property(e => e.CallCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.CallDirection).HasDefaultValueSql("((0))");
            entity.Property(e => e.CallDuration).HasDefaultValueSql("((0))");
            entity.Property(e => e.CallState).HasDefaultValueSql("((0))");
            entity.Property(e => e.CallStatus).HasDefaultValueSql("((0))");
            entity.Property(e => e.CallStatusIn)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CallStatusIN");
            entity.Property(e => e.CallStatusOut)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CallStatusOUT");
            entity.Property(e => e.CallTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("CallTokenID");
            entity.Property(e => e.CallType).HasDefaultValueSql("((0))");
            entity.Property(e => e.DatabaseServerTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DatabaseServerTokenID");
            entity.Property(e => e.DateText).HasDefaultValueSql("((0))");
            entity.Property(e => e.DateTime).HasDefaultValueSql("((0))");
            entity.Property(e => e.DateTimeMilliSec).HasDefaultValueSql("((0))");
            entity.Property(e => e.DateTimeText).HasDefaultValueSql("((0))");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FileId).HasColumnName("FileID");
            entity.Property(e => e.FileIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.FromApplicationRoleCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.FromMobileNumberId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("FromMobileNumberTokenID");
            entity.Property(e => e.FromProjectRoleCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.FromUserId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("FromUserID");
            entity.Property(e => e.FromUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("FromUserTokenID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.GroupTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupTokenID");
            entity.Property(e => e.GroupType).HasDefaultValueSql("(N'private')");
            entity.Property(e => e.ImageDefaultServerId).HasColumnName("ImageDefaultServerID");
            entity.Property(e => e.ImageDefaultServerUrl).HasColumnName("ImageDefaultServerURL");
            entity.Property(e => e.ImageFromMobileNumberId).HasColumnName("ImageFromMobileNumberID");
            entity.Property(e => e.ImageFromUserId).HasColumnName("ImageFromUserID");
            entity.Property(e => e.ImageIsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageIsLoading).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageIsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.ImageThumServerUrl).HasColumnName("ImageThumServerURL");
            entity.Property(e => e.ImageToMobileNumberId).HasColumnName("ImageToMobileNumberID");
            entity.Property(e => e.ImageToUserId).HasColumnName("ImageToUserID");
            entity.Property(e => e.InviteCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.InviteOwnerMobileNumberId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("InviteOwnerMobileNumberID");
            entity.Property(e => e.InviteOwnerUserId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("InviteOwnerUserID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.InviteType).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsCreateNewChatLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDelivered).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsHistoryLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNewMessage).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSessionClosedLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsShareLocationAskRemoteEnable).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSpaceLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSubjectLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.LocationCountryFlagUrl).HasColumnName("LocationCountryFlagURL");
            entity.Property(e => e.LocationRequestFromRemoteUserId).HasColumnName("LocationRequestFromRemoteUserID");
            entity.Property(e => e.LocationRequestToRemoteUserId).HasColumnName("LocationRequestToRemoteUserID");
            entity.Property(e => e.MembershipType).HasDefaultValueSql("((0))");
            entity.Property(e => e.MessageCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.MessageText).HasDefaultValueSql("((0))");
            entity.Property(e => e.MessageTextCallIn)
                .HasDefaultValueSql("((0))")
                .HasColumnName("MessageTextCallIN");
            entity.Property(e => e.MessageTextCallOut).HasDefaultValueSql("((0))");
            entity.Property(e => e.MessageTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("MessageTokenID");
            entity.Property(e => e.MessageType).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("MobileNumberID");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.PrivateGroupTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PrivateGroupTokenID");
            entity.Property(e => e.ProjectTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ProjectTokenID");
            entity.Property(e => e.RemoteMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RemoteMobileNumberTokenID");
            entity.Property(e => e.RemoteUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RemoteUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenCallShowTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ScreenCallShowTokenID");
            entity.Property(e => e.ScreenChatShowId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ServerDateDay).HasDefaultValueSql("((0))");
            entity.Property(e => e.ServerDateMonth).HasDefaultValueSql("((0))");
            entity.Property(e => e.ServerDateYear).HasDefaultValueSql("((0))");
            entity.Property(e => e.ServerDay).HasDefaultValueSql("((0))");
            entity.Property(e => e.ServerMonth).HasDefaultValueSql("((0))");
            entity.Property(e => e.ServerYear).HasDefaultValueSql("((0))");
            entity.Property(e => e.StaticMapUrl).HasColumnName("StaticMapURL");
            entity.Property(e => e.SuggestContactListFromRemoteUserId).HasColumnName("SuggestContactListFromRemoteUserID");
            entity.Property(e => e.SuggestContactListMobileNumberId).HasColumnName("SuggestContactListMobileNumberID");
            entity.Property(e => e.SuggestContactListToRemoteUserId).HasColumnName("SuggestContactListToRemoteUserID");
            entity.Property(e => e.SuggestContactListUserId).HasColumnName("SuggestContactListUserID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.ToApplicationRoleCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.ToMobileNumberId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ToMobileNumberTokenID");
            entity.Property(e => e.ToProjectRoleCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.ToUserId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ToUserID");
            entity.Property(e => e.ToUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ToUserTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDateTimeUtc)
                .HasColumnType("smalldatetime")
                .HasColumnName("UploadDateTimeUTC");
            entity.Property(e => e.UploadDateUtc)
                .HasColumnType("smalldatetime")
                .HasColumnName("UploadDateUTC");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadDayUtc)
                .HasColumnType("money")
                .HasColumnName("UploadDayUTC");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadMonthUtc).HasColumnName("UploadMonthUTC");
            entity.Property(e => e.UploadTimeUtc).HasColumnName("UploadTimeUTC");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UploadYearUtc).HasColumnName("UploadYearUTC");
            entity.Property(e => e.UserDateDay).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserDateMonth).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserDateYear).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserDay).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("UserID");
            entity.Property(e => e.UserMonth).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserName).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserSessionId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("UserSessionID");
            entity.Property(e => e.UserType).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserYear).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoDefaultServerId).HasColumnName("VideoDefaultServerID");
            entity.Property(e => e.VideoDefaultServerUrl).HasColumnName("VideoDefaultServerURL");
            entity.Property(e => e.VideoFromMobileNumberId).HasColumnName("VideoFromMobileNumberID");
            entity.Property(e => e.VideoFromUserId).HasColumnName("VideoFromUserID");
            entity.Property(e => e.VideoIsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoIsLoading).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoIsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.VideoShowInviteId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("VideoShowInviteID");
            entity.Property(e => e.VideoThumServerUrl).HasColumnName("VideoThumServerURL");
            entity.Property(e => e.VideoToMobileNumberId).HasColumnName("VideoToMobileNumberID");
            entity.Property(e => e.VideoToUserId).HasColumnName("VideoToUserID");
            entity.Property(e => e.VisibleStatus).HasDefaultValueSql("((0))");
            entity.Property(e => e.VoiceDefaultServerId).HasColumnName("VoiceDefaultServerID");
            entity.Property(e => e.VoiceDefaultServerUrl).HasColumnName("VoiceDefaultServerURL");
            entity.Property(e => e.VoiceFromMobileNumberId).HasColumnName("VoiceFromMobileNumberID");
            entity.Property(e => e.VoiceFromUserId).HasColumnName("VoiceFromUserID");
            entity.Property(e => e.VoiceIsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.VoiceIsLoading).HasDefaultValueSql("((0))");
            entity.Property(e => e.VoiceIsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.VoiceIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.VoiceShowInviteId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("VoiceShowInviteID");
            entity.Property(e => e.VoiceThumServerUrl).HasColumnName("VoiceThumServerURL");
            entity.Property(e => e.VoiceToMobileNumberId).HasColumnName("VoiceToMobileNumberID");
            entity.Property(e => e.VoiceToUserId).HasColumnName("VoiceToUserID");
        });

        modelBuilder.Entity<BsrvemcoUserScreenChatShowShareAudio>(entity =>
        {
            entity.HasKey(e => e.AudioId).HasName("PK_TLKN_USER_SCREEN_CHAT_SHOW_SHARE_AUDIO");

            entity.ToTable("BSRVEMCO_USER_SCREEN_CHAT_SHOW_SHARE_AUDIO");

            entity.Property(e => e.AudioId).HasColumnName("AudioID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.AudioDuration).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.AudioLargeUrl).HasColumnName("AudioLargeURL");
            entity.Property(e => e.AudioMidUrl).HasColumnName("AudioMidURL");
            entity.Property(e => e.AudioSize).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.AudioSmallAwayUrl).HasColumnName("AudioSmallAwayURL");
            entity.Property(e => e.AudioSmallLiveUrl).HasColumnName("AudioSmallLiveURL");
            entity.Property(e => e.AudioSmallUrl).HasColumnName("AudioSmallURL");
            entity.Property(e => e.AudioThmUrl).HasColumnName("AudioThmURL");
            entity.Property(e => e.AudioTokenId).HasColumnName("AudioTokenID");
            entity.Property(e => e.AudioWebUrl).HasColumnName("AudioWebURL");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSave).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.OwnerMobileNumberTokenId).HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId).HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ScreenOwnerUserId).HasColumnName("ScreenOwnerUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<BsrvemcoUserScreenChatShowShareAudioTrace>(entity =>
        {
            entity.HasKey(e => e.TraceId).HasName("PK_TLKN_USER_SCREEN_CHAT_SHOW_SHARE_AUDIO_TRACE");

            entity.ToTable("BSRVEMCO_USER_SCREEN_CHAT_SHOW_SHARE_AUDIO_TRACE");

            entity.Property(e => e.TraceId).HasColumnName("TraceID");
            entity.Property(e => e.AudioId).HasColumnName("AudioID");
            entity.Property(e => e.AudioLargeUrl).HasColumnName("AudioLargeURL");
            entity.Property(e => e.AudioMidUrl).HasColumnName("AudioMidURL");
            entity.Property(e => e.AudioSmallAwayUrl).HasColumnName("AudioSmallAwayURL");
            entity.Property(e => e.AudioSmallLiveUrl).HasColumnName("AudioSmallLiveURL");
            entity.Property(e => e.AudioSmallUrl).HasColumnName("AudioSmallURL");
            entity.Property(e => e.AudioThmUrl1).HasColumnName("AudioThmURL1");
            entity.Property(e => e.AudioWebUrl).HasColumnName("AudioWebURL");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSave).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.OwnerMobileNumberTokenId).HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId).HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ScreenOwnerUserId).HasColumnName("ScreenOwnerUserID");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<BsrvemcoUserScreenChatShowShareAudioUserList>(entity =>
        {
            entity.HasKey(e => e.ShareId).HasName("PK_TLKN_USER_SCREEN_CHAT_SHOW_SHARE_AUDIO_USER_LIST");

            entity.ToTable("BSRVEMCO_USER_SCREEN_CHAT_SHOW_SHARE_AUDIO_USER_LIST");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");
            entity.Property(e => e.AudioId).HasColumnName("AudioID");
            entity.Property(e => e.AudioLargeUrl).HasColumnName("AudioLargeURL");
            entity.Property(e => e.AudioMidUrl).HasColumnName("AudioMidURL");
            entity.Property(e => e.AudioSmallAwayUrl).HasColumnName("AudioSmallAwayURL");
            entity.Property(e => e.AudioSmallLiveUrl).HasColumnName("AudioSmallLiveURL");
            entity.Property(e => e.AudioSmallUrl).HasColumnName("AudioSmallURL");
            entity.Property(e => e.AudioThmUrl1).HasColumnName("AudioThmURL1");
            entity.Property(e => e.AudioWebUrl).HasColumnName("AudioWebURL");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSave).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.OwnerMobileNumberTokenId).HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId).HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ScreenOwnerUserId).HasColumnName("ScreenOwnerUserID");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<BsrvemcoUserScreenChatShowShareDocument>(entity =>
        {
            entity.HasKey(e => e.DocumentId).HasName("PK_TLKN_USER_SCREEN_CHAT_SHOW_SHARE_DOCUMENT");

            entity.ToTable("BSRVEMCO_USER_SCREEN_CHAT_SHOW_SHARE_DOCUMENT");

            entity.Property(e => e.DocumentId).HasColumnName("DocumentID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.DocumentDuration).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.DocumentExtension).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.DocumentLargeUrl).HasColumnName("DocumentLargeURL");
            entity.Property(e => e.DocumentSize).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.DocumentSmallAwayUrl).HasColumnName("DocumentSmallAwayURL");
            entity.Property(e => e.DocumentSmallLiveUrl).HasColumnName("DocumentSmallLiveURL");
            entity.Property(e => e.DocumentSmallUrl).HasColumnName("DocumentSmallURL");
            entity.Property(e => e.DocumentThmUrl).HasColumnName("DocumentThmURL");
            entity.Property(e => e.DocumentTokenId).HasColumnName("DocumentTokenID");
            entity.Property(e => e.DocumentWebUrl).HasColumnName("DocumentWebURL");
            entity.Property(e => e.DocumentoMidUrl).HasColumnName("DocumentoMidURL");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSave).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.OwnerMobileNumberTokenId).HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId).HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ScreenOwnerUserId).HasColumnName("ScreenOwnerUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<BsrvemcoUserScreenChatShowShareDocumentStatic>(entity =>
        {
            entity.HasKey(e => e.DocumentStaticId).HasName("PK_TLKN_USER_SCREEN_CHAT_SHOW_SHARE_DOCUMENT_STATIC");

            entity.ToTable("BSRVEMCO_USER_SCREEN_CHAT_SHOW_SHARE_DOCUMENT_STATIC");

            entity.Property(e => e.DocumentStaticId).HasColumnName("DocumentStaticID");
            entity.Property(e => e.DocumentDuration).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.DocumentId).HasColumnName("DocumentID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSave).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.OwnerMobileNumberTokenId).HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId).HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ScreenOwnerUserId).HasColumnName("ScreenOwnerUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.VideoLargeUrl).HasColumnName("VideoLargeURL");
            entity.Property(e => e.VideoMidUrl).HasColumnName("VideoMidURL");
            entity.Property(e => e.VideoSmallAwayUrl).HasColumnName("VideoSmallAwayURL");
            entity.Property(e => e.VideoSmallLiveUrl).HasColumnName("VideoSmallLiveURL");
            entity.Property(e => e.VideoSmallUrl).HasColumnName("VideoSmallURL");
            entity.Property(e => e.VideoThmUrl1).HasColumnName("VideoThmURL1");
            entity.Property(e => e.VideoWebUrl).HasColumnName("VideoWebURL");
        });

        modelBuilder.Entity<BsrvemcoUserScreenChatShowShareDocumentTrace>(entity =>
        {
            entity.HasKey(e => e.TraceId).HasName("PK_TLKN_USER_SCREEN_CHAT_SHOW_SHARE_DOCUMENT_TRACE");

            entity.ToTable("BSRVEMCO_USER_SCREEN_CHAT_SHOW_SHARE_DOCUMENT_TRACE");

            entity.Property(e => e.TraceId).HasColumnName("TraceID");
            entity.Property(e => e.DocumentId).HasColumnName("DocumentID");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSave).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.OwnerMobileNumberTokenId).HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId).HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ScreenOwnerUserId).HasColumnName("ScreenOwnerUserID");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.VideoLargeUrl).HasColumnName("VideoLargeURL");
            entity.Property(e => e.VideoMidUrl).HasColumnName("VideoMidURL");
            entity.Property(e => e.VideoSmallAwayUrl).HasColumnName("VideoSmallAwayURL");
            entity.Property(e => e.VideoSmallLiveUrl).HasColumnName("VideoSmallLiveURL");
            entity.Property(e => e.VideoSmallUrl).HasColumnName("VideoSmallURL");
            entity.Property(e => e.VideoThmUrl1).HasColumnName("VideoThmURL1");
            entity.Property(e => e.VideoWebUrl).HasColumnName("VideoWebURL");
        });

        modelBuilder.Entity<BsrvemcoUserScreenChatShowShareDocumentUserList>(entity =>
        {
            entity.HasKey(e => e.ShareId).HasName("PK_TLKN_USER_SCREEN_CHAT_SHOW_SHARE_DOCUMENT_USER_LIST");

            entity.ToTable("BSRVEMCO_USER_SCREEN_CHAT_SHOW_SHARE_DOCUMENT_USER_LIST");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");
            entity.Property(e => e.DocumentId).HasColumnName("DocumentID");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSave).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.OwnerMobileNumberTokenId).HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId).HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ScreenOwnerUserId).HasColumnName("ScreenOwnerUserID");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.VideoLargeUrl).HasColumnName("VideoLargeURL");
            entity.Property(e => e.VideoMidUrl).HasColumnName("VideoMidURL");
            entity.Property(e => e.VideoSmallAwayUrl).HasColumnName("VideoSmallAwayURL");
            entity.Property(e => e.VideoSmallLiveUrl).HasColumnName("VideoSmallLiveURL");
            entity.Property(e => e.VideoSmallUrl).HasColumnName("VideoSmallURL");
            entity.Property(e => e.VideoThmUrl1).HasColumnName("VideoThmURL1");
            entity.Property(e => e.VideoWebUrl).HasColumnName("VideoWebURL");
        });

        modelBuilder.Entity<BsrvemcoUserScreenChatShowShareImage>(entity =>
        {
            entity.HasKey(e => e.ImageId).HasName("PK_TLKN_USER_SCREEN_CHAT_SHOW_SHARE_IMAGE");

            entity.ToTable("BSRVEMCO_USER_SCREEN_CHAT_SHOW_SHARE_IMAGE");

            entity.Property(e => e.ImageId).HasColumnName("ImageID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.ImageDuration).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.ImageLargeUrl).HasColumnName("ImageLargeURL");
            entity.Property(e => e.ImageMidUrl).HasColumnName("ImageMidURL");
            entity.Property(e => e.ImageSize).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.ImageSmallAwayUrl).HasColumnName("ImageSmallAwayURL");
            entity.Property(e => e.ImageSmallLiveUrl).HasColumnName("ImageSmallLiveURL");
            entity.Property(e => e.ImageSmallUrl).HasColumnName("ImageSmallURL");
            entity.Property(e => e.ImageThmUrl1).HasColumnName("ImageThmURL1");
            entity.Property(e => e.ImageTokenId).HasColumnName("ImageTokenID");
            entity.Property(e => e.ImageWebUrl).HasColumnName("ImageWebURL");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSave).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ScreenOwnerUserId).HasColumnName("ScreenOwnerUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<BsrvemcoUserScreenChatShowShareImageStatic>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BSRVEMCO_USER_SCREEN_CHAT_SHOW_SHARE_IMAGE_STATIC");

            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.ImageId).HasColumnName("ImageID");
            entity.Property(e => e.ImageLargeUrl).HasColumnName("ImageLargeURL");
            entity.Property(e => e.ImageMidUrl).HasColumnName("ImageMidURL");
            entity.Property(e => e.ImageSmallAwayUrl).HasColumnName("ImageSmallAwayURL");
            entity.Property(e => e.ImageSmallLiveUrl).HasColumnName("ImageSmallLiveURL");
            entity.Property(e => e.ImageSmallUrl).HasColumnName("ImageSmallURL");
            entity.Property(e => e.ImageThmUrl1).HasColumnName("ImageThmURL1");
            entity.Property(e => e.ImageWebUrl).HasColumnName("ImageWebURL");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSave).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ScreenOwnerUserId).HasColumnName("ScreenOwnerUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<BsrvemcoUserScreenChatShowShareImageTrace>(entity =>
        {
            entity.HasKey(e => e.TraceId).HasName("PK_TLKN_USER_SCREEN_CHAT_SHOW_SHARE_IMAGE_TRACE");

            entity.ToTable("BSRVEMCO_USER_SCREEN_CHAT_SHOW_SHARE_IMAGE_TRACE");

            entity.Property(e => e.TraceId).HasColumnName("TraceID");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.ImageId).HasColumnName("ImageID");
            entity.Property(e => e.ImageLargeUrl).HasColumnName("ImageLargeURL");
            entity.Property(e => e.ImageMidUrl).HasColumnName("ImageMidURL");
            entity.Property(e => e.ImageSmallAwayUrl).HasColumnName("ImageSmallAwayURL");
            entity.Property(e => e.ImageSmallLiveUrl).HasColumnName("ImageSmallLiveURL");
            entity.Property(e => e.ImageSmallUrl).HasColumnName("ImageSmallURL");
            entity.Property(e => e.ImageThmUrl1).HasColumnName("ImageThmURL1");
            entity.Property(e => e.ImageWebUrl).HasColumnName("ImageWebURL");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSave).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ScreenOwnerUserId).HasColumnName("ScreenOwnerUserID");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<BsrvemcoUserScreenChatShowShareImageUserList>(entity =>
        {
            entity.HasKey(e => e.ShareId).HasName("PK_TLKN_USER_SCREEN_CHAT_SHOW_SHARE_IMAGE_USER_LIST");

            entity.ToTable("BSRVEMCO_USER_SCREEN_CHAT_SHOW_SHARE_IMAGE_USER_LIST");

            entity.Property(e => e.ShareId)
                .ValueGeneratedNever()
                .HasColumnName("ShareID");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.ImageId).HasColumnName("ImageID");
            entity.Property(e => e.ImageLargeUrl).HasColumnName("ImageLargeURL");
            entity.Property(e => e.ImageMidUrl).HasColumnName("ImageMidURL");
            entity.Property(e => e.ImageSmallAwayUrl).HasColumnName("ImageSmallAwayURL");
            entity.Property(e => e.ImageSmallLiveUrl).HasColumnName("ImageSmallLiveURL");
            entity.Property(e => e.ImageSmallUrl).HasColumnName("ImageSmallURL");
            entity.Property(e => e.ImageThmUrl1).HasColumnName("ImageThmURL1");
            entity.Property(e => e.ImageWebUrl).HasColumnName("ImageWebURL");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSave).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ScreenOwnerUserId).HasColumnName("ScreenOwnerUserID");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<BsrvemcoUserScreenChatShowShareVideo>(entity =>
        {
            entity.HasKey(e => e.VideoId).HasName("PK_TLKN_USER_SCREEN_CHAT_SHOW_SHARE_VIDEO");

            entity.ToTable("BSRVEMCO_USER_SCREEN_CHAT_SHOW_SHARE_VIDEO");

            entity.Property(e => e.VideoId).HasColumnName("VideoID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSave).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ScreenOwnerUserId).HasColumnName("ScreenOwnerUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.VideoDuration).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.VideoLargeUrl).HasColumnName("VideoLargeURL");
            entity.Property(e => e.VideoMidUrl).HasColumnName("VideoMidURL");
            entity.Property(e => e.VideoSize).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.VideoSmallAwayUrl).HasColumnName("VideoSmallAwayURL");
            entity.Property(e => e.VideoSmallLiveUrl).HasColumnName("VideoSmallLiveURL");
            entity.Property(e => e.VideoSmallUrl).HasColumnName("VideoSmallURL");
            entity.Property(e => e.VideoThmUrl1).HasColumnName("VideoThmURL1");
            entity.Property(e => e.VideoTokenId).HasColumnName("VideoTokenID");
            entity.Property(e => e.VideoWebUrl).HasColumnName("VideoWebURL");
        });

        modelBuilder.Entity<BsrvemcoUserScreenChatShowShareVideoTrace>(entity =>
        {
            entity.HasKey(e => e.TraceId).HasName("PK_TLKN_USER_SCREEN_CHAT_SHOW_SHARE_VIDEO_TRACE");

            entity.ToTable("BSRVEMCO_USER_SCREEN_CHAT_SHOW_SHARE_VIDEO_TRACE");

            entity.Property(e => e.TraceId).HasColumnName("TraceID");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSave).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ScreenOwnerUserId).HasColumnName("ScreenOwnerUserID");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.VideoId).HasColumnName("VideoID");
            entity.Property(e => e.VideoLargeUrl).HasColumnName("VideoLargeURL");
            entity.Property(e => e.VideoMidUrl).HasColumnName("VideoMidURL");
            entity.Property(e => e.VideoSmallAwayUrl).HasColumnName("VideoSmallAwayURL");
            entity.Property(e => e.VideoSmallLiveUrl).HasColumnName("VideoSmallLiveURL");
            entity.Property(e => e.VideoSmallUrl).HasColumnName("VideoSmallURL");
            entity.Property(e => e.VideoThmUrl1).HasColumnName("VideoThmURL1");
            entity.Property(e => e.VideoWebUrl).HasColumnName("VideoWebURL");
        });

        modelBuilder.Entity<BsrvemcoUserScreenChatShowShareVideoUserList>(entity =>
        {
            entity.HasKey(e => e.ShareId).HasName("PK_TLKN_USER_SCREEN_CHAT_SHOW_SHARE_VIDEO_USER_LIST");

            entity.ToTable("BSRVEMCO_USER_SCREEN_CHAT_SHOW_SHARE_VIDEO_USER_LIST");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSave).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ScreenOwnerUserId).HasColumnName("ScreenOwnerUserID");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.VideoId).HasColumnName("VideoID");
            entity.Property(e => e.VideoLargeUrl).HasColumnName("VideoLargeURL");
            entity.Property(e => e.VideoMidUrl).HasColumnName("VideoMidURL");
            entity.Property(e => e.VideoSmallAwayUrl).HasColumnName("VideoSmallAwayURL");
            entity.Property(e => e.VideoSmallLiveUrl).HasColumnName("VideoSmallLiveURL");
            entity.Property(e => e.VideoSmallUrl).HasColumnName("VideoSmallURL");
            entity.Property(e => e.VideoThmUrl1).HasColumnName("VideoThmURL1");
            entity.Property(e => e.VideoWebUrl).HasColumnName("VideoWebURL");
        });

        modelBuilder.Entity<BsrvemcoUserScreenChatShowShareVideoYoutube>(entity =>
        {
            entity.HasKey(e => e.ShareYouTubeVideoId).HasName("PK_TLKN_USER_SCREEN_CHAT_SHOW_SHARE_VIDEO_YOUTUBE");

            entity.ToTable("BSRVEMCO_USER_SCREEN_CHAT_SHOW_SHARE_VIDEO_YOUTUBE");

            entity.Property(e => e.ShareYouTubeVideoId)
                .ValueGeneratedNever()
                .HasColumnName("ShareYouTubeVideoID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSave).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ScreenOwnerUserId).HasColumnName("ScreenOwnerUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.VideoLargeUrl).HasColumnName("VideoLargeURL");
            entity.Property(e => e.VideoMidUrl).HasColumnName("VideoMidURL");
            entity.Property(e => e.VideoSmallAwayUrl).HasColumnName("VideoSmallAwayURL");
            entity.Property(e => e.VideoSmallLiveUrl).HasColumnName("VideoSmallLiveURL");
            entity.Property(e => e.VideoSmallUrl).HasColumnName("VideoSmallURL");
            entity.Property(e => e.VideoThmUrl1).HasColumnName("VideoThmURL1");
            entity.Property(e => e.VideoWebUrl).HasColumnName("VideoWebURL");
            entity.Property(e => e.YouTubeChannelId).HasColumnName("YouTubeChannelID");
            entity.Property(e => e.YouTubeVideoDescription).HasDefaultValueSql("((0))");
            entity.Property(e => e.YouTubeVideoId).HasColumnName("YouTubeVideoID");
            entity.Property(e => e.YouTubeVideoTitle).HasDefaultValueSql("((0))");
        });

        modelBuilder.Entity<BsrvemcoUserSession>(entity =>
        {
            entity.HasKey(e => e.UsessionId);

            entity.ToTable("BSRVEMCO_USER_SESSION");

            entity.Property(e => e.UsessionId).HasColumnName("USessionID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DatabaseServerTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DatabaseServerTokenID");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.GuestId).HasColumnName("GuestID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginUserIp).HasColumnName("LoginUserIP");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.PlatformOsid)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PlatformOSID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.SessionTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("SessionTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserIp).HasColumnName("UserIP");
            entity.Property(e => e.UserLoginStatus).HasDefaultValueSql("(N'NotApproved')");
            entity.Property(e => e.UserMoodStatus).HasDefaultValueSql("(N'NotApproved')");
        });

        modelBuilder.Entity<BsrvemcoUserSetting>(entity =>
        {
            entity.HasKey(e => e.SettingId).HasName("PK_TLKN_USER_SETTING");

            entity.ToTable("BSRVEMCO_USER_SETTING");

            entity.Property(e => e.SettingId).HasColumnName("SettingID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.OwnerMobileNumberTokenId).HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId).HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate).HasColumnType("smalldatetime");
        });

        modelBuilder.Entity<BsrvemcoUserYoutubeChannel>(entity =>
        {
            entity.HasKey(e => e.UyouTubeChannelId).HasName("PK_TLKN_USER_YOUTUBE_CHANNEL");

            entity.ToTable("BSRVEMCO_USER_YOUTUBE_CHANNEL");

            entity.Property(e => e.UyouTubeChannelId).HasColumnName("UYouTubeChannelID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate).HasColumnType("smalldatetime");
            entity.Property(e => e.YouTubeChannelId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("YouTubeChannelID");
        });

        modelBuilder.Entity<BsrvemcoUserYoutubevideo>(entity =>
        {
            entity.HasKey(e => e.UserVideoId).HasName("PK_TLKN_USER_YOUTUBEVIDEO");

            entity.ToTable("BSRVEMCO_USER_YOUTUBEVIDEO");

            entity.Property(e => e.UserVideoId).HasColumnName("UserVideoID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsDelete).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPending).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserSessionId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("UserSessionID");
            entity.Property(e => e.YouTubeVideoCategory).HasDefaultValueSql("((0))");
            entity.Property(e => e.YouTubeVideoCategoryCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.YouTubeVideoDescription).HasDefaultValueSql("((0))");
            entity.Property(e => e.YouTubeVideoFileName).HasDefaultValueSql("((0))");
            entity.Property(e => e.YouTubeVideoFileTitle).HasDefaultValueSql("((0))");
            entity.Property(e => e.YouTubeVideoId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("YouTubeVideoID");
            entity.Property(e => e.YouTubeVideoIframe).HasDefaultValueSql("((0))");
            entity.Property(e => e.YouTubeVideoKeywords).HasDefaultValueSql("((0))");
            entity.Property(e => e.YouTubeVideoThm0).HasDefaultValueSql("((0))");
            entity.Property(e => e.YouTubeVideoThm1).HasDefaultValueSql("((0))");
            entity.Property(e => e.YouTubeVideoThm2).HasDefaultValueSql("((0))");
            entity.Property(e => e.YouTubeVideoThm3).HasDefaultValueSql("((0))");
            entity.Property(e => e.YouTubeVideoTitle).HasDefaultValueSql("((0))");
            entity.Property(e => e.YouTubeVideoType).HasDefaultValueSql("((0))");
            entity.Property(e => e.YouTubeVideoUrl)
                .HasDefaultValueSql("((0))")
                .HasColumnName("YouTubeVideoURL");
        });

        modelBuilder.Entity<Image>(entity =>
        {
            entity.Property(e => e.ImageId).HasColumnName("ImageID");
        });

        modelBuilder.Entity<TlknApplicationUpdateHistoryList>(entity =>
        {
            entity.HasKey(e => e.ApplicationUpdateId);

            entity.ToTable("TLKN_APPLICATION_UPDATE_HISTORY_LIST");

            entity.Property(e => e.ApplicationUpdateId).HasColumnName("ApplicationUpdateID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ApplicationUpdateTokenId).HasColumnName("ApplicationUpdateTokenID");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknApplicationUpdateList>(entity =>
        {
            entity.HasKey(e => e.ApplicationUpdateId);

            entity.ToTable("TLKN_APPLICATION_UPDATE_LIST");

            entity.Property(e => e.ApplicationUpdateId).HasColumnName("ApplicationUpdateID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ApplicationUpdateTokenId).HasColumnName("ApplicationUpdateTokenID");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknApplicationVersionHistoryList>(entity =>
        {
            entity.HasKey(e => e.ApplicationVersionId);

            entity.ToTable("TLKN_APPLICATION_VERSION_HISTORY_LIST");

            entity.Property(e => e.ApplicationVersionId).HasColumnName("ApplicationVersionID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ApplicationVersionTokenId).HasColumnName("ApplicationVersionTokenID");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknApplicationVersionList>(entity =>
        {
            entity.HasKey(e => e.ApplicationVersionId);

            entity.ToTable("TLKN_APPLICATION_VERSION_LIST");

            entity.Property(e => e.ApplicationVersionId).HasColumnName("ApplicationVersionID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ApplicationVersionTokenId).HasColumnName("ApplicationVersionTokenID");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknCss>(entity =>
        {
            entity.HasKey(e => e.Cssid);

            entity.ToTable("TLKN_CSS");

            entity.Property(e => e.Cssid).HasColumnName("CSSID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.Csscode).HasColumnName("CSSCode");
            entity.Property(e => e.Csstext).HasColumnName("CSSText");
            entity.Property(e => e.Cssvalue).HasColumnName("CSSValue");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknDeviceList>(entity =>
        {
            entity.HasKey(e => e.TlknDeviceId);

            entity.ToTable("TLKN_DEVICE_LIST");

            entity.Property(e => e.TlknDeviceId).HasColumnName("TlknDeviceID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.AndroidId).HasColumnName("AndroidID");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.DeviceId).HasColumnName("DeviceID");
            entity.Property(e => e.Gcmid).HasColumnName("GCMID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknEmotion>(entity =>
        {
            entity.HasKey(e => e.ImageId);

            entity.ToTable("TLKN_EMOTION");

            entity.Property(e => e.ImageId).HasColumnName("ImageID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.ImageLargeUrl).HasColumnName("ImageLargeURL");
            entity.Property(e => e.ImageMidUrl).HasColumnName("ImageMidURL");
            entity.Property(e => e.ImageSmallUrl).HasColumnName("ImageSmallURL");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsApproved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTlknEmotion).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknEmotionCategoryList>(entity =>
        {
            entity.HasKey(e => e.CategoryId);

            entity.ToTable("TLKN_EMOTION_CATEGORY_LIST");

            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.CategoryOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.ImageLargeUrl).HasColumnName("ImageLargeURL");
            entity.Property(e => e.ImageMidUrl).HasColumnName("ImageMidURL");
            entity.Property(e => e.ImageSmallUrl).HasColumnName("ImageSmallURL");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDefault).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknErrorReport>(entity =>
        {
            entity.HasKey(e => e.ReportId);

            entity.ToTable("TLKN_ERROR_REPORT");

            entity.Property(e => e.ReportId).HasColumnName("ReportID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.AppVersionName).HasDefaultValueSql("((4))");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate).HasColumnType("smalldatetime");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknGroup>(entity =>
        {
            entity.HasKey(e => e.GroupId);

            entity.ToTable("TLKN_GROUP");

            entity.Property(e => e.GroupId)
                .ValueGeneratedNever()
                .HasColumnName("GroupID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.InviteOwnerMobileNumberId).HasColumnName("InviteOwnerMobileNumberID");
            entity.Property(e => e.InviteOwnerUserId).HasColumnName("InviteOwnerUserID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.MobileNumberId1).HasColumnName("MobileNumberID1");
            entity.Property(e => e.MobileNumberId2).HasColumnName("MobileNumberID2");
            entity.Property(e => e.MobileNumberId3).HasColumnName("MobileNumberID3");
            entity.Property(e => e.MobileNumberId4).HasColumnName("MobileNumberID4");
            entity.Property(e => e.MobileNumberId5).HasColumnName("MobileNumberID5");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserId1).HasColumnName("UserID1");
            entity.Property(e => e.UserId2).HasColumnName("UserID2");
            entity.Property(e => e.UserId3).HasColumnName("UserID3");
            entity.Property(e => e.UserId4).HasColumnName("UserID4");
            entity.Property(e => e.UserId5).HasColumnName("UserID5");
        });

        modelBuilder.Entity<TlknPaymentInvoice>(entity =>
        {
            entity.HasKey(e => e.PaymentId);

            entity.ToTable("TLKN_PAYMENT_INVOICE");

            entity.Property(e => e.PaymentId).HasColumnName("PaymentID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.AdminBear).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.AdminShaymaa).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.CcbillPaymentProcessor)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("CCBillPaymentProcessor");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FlashServer).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.HostServer).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.JuniorPayment).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.ModelPayment).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.OtherPaymentProcessor).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.OtherTax).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.PaymentStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentTicketId).HasColumnName("PaymentTicketID");
            entity.Property(e => e.PaymentTicketStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentTokenId)
                .HasDefaultValueSql("(N'notset')")
                .HasColumnName("PaymentTokenID");
            entity.Property(e => e.PayoneerPaymentProcessor).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.RoverPayment).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.Tax).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TokenCostTotalValue).HasColumnType("money");
            entity.Property(e => e.TokenPricePerOneValue).HasColumnType("money");
            entity.Property(e => e.TotalAmountPaymentAdmin).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalAmountPaymentPayout).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalAmountPaymentProcessor).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalAmountPaymentServer).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalAmountPaymentTax).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalAmountSiteEarn).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalAmountSiteExpense).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalAmountSiteNetProfit).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalAmountSiteSave).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalAmountSiteSpend).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.VisaInProcessorPayment).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.VisaOutProcessorPayment).HasColumnType("decimal(18, 0)");

            entity.HasOne(d => d.PaymentTicket).WithMany(p => p.TlknPaymentInvoices)
                .HasForeignKey(d => d.PaymentTicketId)
                .HasConstraintName("FK_TLKN_PAYMENT_INVOICE_TLKN_PAYMENT_TICKET");
        });

        modelBuilder.Entity<TlknPaymentPaybackList>(entity =>
        {
            entity.HasKey(e => e.PaymentPaybackId);

            entity.ToTable("TLKN_PAYMENT_PAYBACK_LIST");

            entity.Property(e => e.PaymentPaybackId).HasColumnName("PaymentPaybackID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.PaymentPaybackCode).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentPaybackDescription).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentPaybackName).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentPaybackOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.PaymentPaybackTitle).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentPaybackTokenId)
                .HasDefaultValueSql("(N'notset')")
                .HasColumnName("PaymentPaybackTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<TlknPaymentTicket>(entity =>
        {
            entity.HasKey(e => e.PaymentTicketId);

            entity.ToTable("TLKN_PAYMENT_TICKET");

            entity.Property(e => e.PaymentTicketId).HasColumnName("PaymentTicketID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsNextPaymentTicket).HasDefaultValueSql("((0))");
            entity.Property(e => e.PaymentMonthTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("PaymentMonthTokenID");
            entity.Property(e => e.PaymentStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentTicketStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentTokenId)
                .HasDefaultValueSql("(N'notset')")
                .HasColumnName("PaymentTokenID");
            entity.Property(e => e.PaymentYearTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("PaymentYearTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<TlknResourceCategoryList>(entity =>
        {
            entity.HasKey(e => e.CmscategoryId).HasName("PK_TLKN_CMS_CATEGORY_LIST");

            entity.ToTable("TLKN_RESOURCE_CATEGORY_LIST");

            entity.Property(e => e.CmscategoryId).HasColumnName("CMSCategoryID");
            entity.Property(e => e.CmscategoryCode).HasColumnName("CMSCategoryCode");
            entity.Property(e => e.CmscategoryDescription).HasColumnName("CMSCategoryDescription");
            entity.Property(e => e.CmscategoryName).HasColumnName("CMSCategoryName");
            entity.Property(e => e.CmscategoryText).HasColumnName("CMSCategoryText");
            entity.Property(e => e.CmscategoryTitle).HasColumnName("CMSCategoryTitle");
            entity.Property(e => e.CmscategoryType).HasColumnName("CMSCategoryType");
            entity.Property(e => e.CmscategoryValue).HasColumnName("CMSCategoryValue");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<TlknResourceList>(entity =>
        {
            entity.HasKey(e => e.Cmsid).HasName("PK_TLKN_CMS");

            entity.ToTable("TLKN_RESOURCE_LIST");

            entity.Property(e => e.Cmsid).HasColumnName("CMSID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.Cmscategory).HasColumnName("CMSCategory");
            entity.Property(e => e.CmscategoryCode).HasColumnName("CMSCategoryCode");
            entity.Property(e => e.CmscategoryId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("CMSCategoryID");
            entity.Property(e => e.Cmscode).HasColumnName("CMSCode");
            entity.Property(e => e.Cmsname).HasColumnName("CMSName");
            entity.Property(e => e.CmssectionCode).HasColumnName("CMSSectionCode");
            entity.Property(e => e.Cmstext).HasColumnName("CMSText");
            entity.Property(e => e.Cmstitle).HasColumnName("CMSTitle");
            entity.Property(e => e.Cmstype).HasColumnName("CMSType");
            entity.Property(e => e.Cmsvalue).HasColumnName("CMSValue");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<TlknResourceSectionList>(entity =>
        {
            entity.HasKey(e => e.CmssectionId).HasName("PK_TLKN_CMS_SECTION_LIST");

            entity.ToTable("TLKN_RESOURCE_SECTION_LIST");

            entity.Property(e => e.CmssectionId).HasColumnName("CMSSectionID");
            entity.Property(e => e.CmssectionCode).HasColumnName("CMSSectionCode");
            entity.Property(e => e.CmssectionDescription).HasColumnName("CMSSectionDescription");
            entity.Property(e => e.CmssectionName).HasColumnName("CMSSectionName");
            entity.Property(e => e.CmssectionText).HasColumnName("CMSSectionText");
            entity.Property(e => e.CmssectionTitle).HasColumnName("CMSSectionTitle");
            entity.Property(e => e.CmssectionType).HasColumnName("CMSSectionType");
            entity.Property(e => e.CmssectionValue).HasColumnName("CMSSectionValue");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<TlknRssFeedList>(entity =>
        {
            entity.HasKey(e => e.UrssFeedId);

            entity.ToTable("TLKN_RSS_FEED_LIST");

            entity.Property(e => e.UrssFeedId).HasColumnName("URssFeedID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.GroupOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsCustomTitle).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.RssFeedCategoryId).HasColumnName("RssFeedCategoryID");
            entity.Property(e => e.RssFeedCategoryTokenId).HasColumnName("RssFeedCategoryTokenID");
            entity.Property(e => e.RssFeedGroupId).HasColumnName("RssFeedGroupID");
            entity.Property(e => e.RssFeedUrl).HasColumnName("RssFeedURL");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknSession>(entity =>
        {
            entity.HasKey(e => e.SessionId);

            entity.ToTable("TLKN_SESSION");

            entity.Property(e => e.SessionId).HasColumnName("SessionID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<TlknSetting>(entity =>
        {
            entity.HasKey(e => e.SettingId);

            entity.ToTable("TLKN_SETTING");

            entity.Property(e => e.SettingId).HasColumnName("SettingID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<TlknSettingImage>(entity =>
        {
            entity.HasKey(e => e.ImageId);

            entity.ToTable("TLKN_SETTING_IMAGE");

            entity.Property(e => e.ImageId).HasColumnName("ImageID");
            entity.Property(e => e.ImageLargeUrl).HasColumnName("ImageLargeURL");
            entity.Property(e => e.ImageMidUrl).HasColumnName("ImageMidURL");
            entity.Property(e => e.ImageSmallAwayUrl).HasColumnName("ImageSmallAwayURL");
            entity.Property(e => e.ImageSmallLiveUrl).HasColumnName("ImageSmallLiveURL");
            entity.Property(e => e.ImageSmallUrl).HasColumnName("ImageSmallURL");
            entity.Property(e => e.ImageThmUrl1).HasColumnName("ImageThmURL1");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsProfile).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<TlknShopCategoryList>(entity =>
        {
            entity.HasKey(e => e.UshopCategoryId);

            entity.ToTable("TLKN_SHOP_CATEGORY_LIST");

            entity.Property(e => e.UshopCategoryId).HasColumnName("UShopCategoryID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.CategoryOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.CategoryTokenId).HasColumnName("CategoryTokenID");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.ImageCount).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageLargeUrl).HasColumnName("ImageLargeURL");
            entity.Property(e => e.ImageMidUrl).HasColumnName("ImageMidURL");
            entity.Property(e => e.ImageSmallUrl).HasColumnName("ImageSmallURL");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDefault).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknStickerCategoryList>(entity =>
        {
            entity.HasKey(e => e.UstickerCategoryId).HasName("PK_TLKN_USER_STICKER_CATEGORY_LIST");

            entity.ToTable("TLKN_STICKER_CATEGORY_LIST");

            entity.Property(e => e.UstickerCategoryId).HasColumnName("UStickerCategoryID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.CategoryOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.CategoryTokenId).HasColumnName("CategoryTokenID");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.ImageCount).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDefault).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.StickerImageLargeUrl).HasColumnName("StickerImageLargeURL");
            entity.Property(e => e.StickerImageMidUrl).HasColumnName("StickerImageMidURL");
            entity.Property(e => e.StickerImageSmallUrl).HasColumnName("StickerImageSmallURL");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknStickerImageList>(entity =>
        {
            entity.HasKey(e => e.UstickerId).HasName("PK_TLKN_USER_Sticker_LIST");

            entity.ToTable("TLKN_STICKER_IMAGE_LIST");

            entity.Property(e => e.UstickerId).HasColumnName("UStickerID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.ImageLargeUrl).HasColumnName("ImageLargeURL");
            entity.Property(e => e.ImageMidUrl).HasColumnName("ImageMidURL");
            entity.Property(e => e.ImageSmallAwayUrl).HasColumnName("ImageSmallAwayURL");
            entity.Property(e => e.ImageSmallLiveUrl).HasColumnName("ImageSmallLiveURL");
            entity.Property(e => e.ImageSmallUrl).HasColumnName("ImageSmallURL");
            entity.Property(e => e.ImageTokenId).HasColumnName("ImageTokenID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAnimate).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsApproved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTlknEmotion).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.StickerCategoryId).HasColumnName("StickerCategoryID");
            entity.Property(e => e.StickerImageLargeUrl).HasColumnName("StickerImageLargeURL");
            entity.Property(e => e.StickerImageMidUrl).HasColumnName("StickerImageMidURL");
            entity.Property(e => e.StickerImageSmallUrl).HasColumnName("StickerImageSmallURL");
            entity.Property(e => e.StickerImageUrl).HasColumnName("StickerImageURL");
            entity.Property(e => e.StickerSetId).HasColumnName("StickerSetID");
            entity.Property(e => e.StickerTokenId).HasColumnName("StickerTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknStickerSetList>(entity =>
        {
            entity.HasKey(e => e.UstickerSetId);

            entity.ToTable("TLKN_STICKER_SET_LIST");

            entity.Property(e => e.UstickerSetId).HasColumnName("UStickerSetID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.CategoryOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.CostPrice)
                .HasDefaultValueSql("(N'0')")
                .HasColumnType("money");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.ImageCount).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAdultContent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsCostFree).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDefault).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.StickerCategoryId).HasColumnName("StickerCategoryID");
            entity.Property(e => e.StickerImageLargeUrl).HasColumnName("StickerImageLargeURL");
            entity.Property(e => e.StickerImageMidUrl).HasColumnName("StickerImageMidURL");
            entity.Property(e => e.StickerImageSmallUrl).HasColumnName("StickerImageSmallURL");
            entity.Property(e => e.StickerSetTokenId).HasColumnName("StickerSetTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknThemeCategoryList>(entity =>
        {
            entity.HasKey(e => e.UthemeCategoryId).HasName("PK_TLKN_USER_THEME_CATEGORY_LIST");

            entity.ToTable("TLKN_THEME_CATEGORY_LIST");

            entity.Property(e => e.UthemeCategoryId).HasColumnName("UThemeCategoryID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.CategoryOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.ImageCount).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDefault).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ThemeCategoryTokenId).HasColumnName("ThemeCategoryTokenID");
            entity.Property(e => e.ThemeImageLargeUrl).HasColumnName("ThemeImageLargeURL");
            entity.Property(e => e.ThemeImageMidUrl).HasColumnName("ThemeImageMidURL");
            entity.Property(e => e.ThemeImageSmallUrl).HasColumnName("ThemeImageSmallURL");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknThemeList>(entity =>
        {
            entity.HasKey(e => e.UthemeId).HasName("PK_TLKN_USER_THEME_LIST");

            entity.ToTable("TLKN_THEME_LIST");

            entity.Property(e => e.UthemeId).HasColumnName("UThemeID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsApproved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTlknEmotion).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ThemeCategoryId).HasColumnName("ThemeCategoryID");
            entity.Property(e => e.ThemeImageLargeUrl).HasColumnName("ThemeImageLargeURL");
            entity.Property(e => e.ThemeImageMidUrl).HasColumnName("ThemeImageMidURL");
            entity.Property(e => e.ThemeImageSmallUrl).HasColumnName("ThemeImageSmallURL");
            entity.Property(e => e.ThemeSetId).HasColumnName("ThemeSetID");
            entity.Property(e => e.ThemeTokenId).HasColumnName("ThemeTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknThemeSetList>(entity =>
        {
            entity.HasKey(e => e.UthemeSetId);

            entity.ToTable("TLKN_THEME_SET_LIST");

            entity.Property(e => e.UthemeSetId).HasColumnName("UThemeSetID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.CategoryOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.CostPrice)
                .HasDefaultValueSql("(N'0')")
                .HasColumnType("money");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.ImageCount).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsCostFree).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDefault).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ThemeCategoryId).HasColumnName("ThemeCategoryID");
            entity.Property(e => e.ThemeImageLargeUrl).HasColumnName("ThemeImageLargeURL");
            entity.Property(e => e.ThemeImageMidUrl).HasColumnName("ThemeImageMidURL");
            entity.Property(e => e.ThemeImageSmallUrl).HasColumnName("ThemeImageSmallURL");
            entity.Property(e => e.ThemeSetTokenId).HasColumnName("ThemeSetTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknTokenList>(entity =>
        {
            entity.HasKey(e => e.TokenId).HasName("PK_TLKN_TOKEN");

            entity.ToTable("TLKN_TOKEN_LIST");

            entity.Property(e => e.TokenId).HasColumnName("TokenID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSelected).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.ItemOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.PurchasePackageTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PurchasePackageTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.TokenAmount).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.TokenCostTotalValue).HasColumnType("money");
            entity.Property(e => e.TokenPricePerOneValue).HasColumnType("money");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<TlknUserBlacklist>(entity =>
        {
            entity.HasKey(e => e.UblackListId);

            entity.ToTable("TLKN_USER_BLACKLIST");

            entity.Property(e => e.UblackListId).HasColumnName("UBlackListID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.GroupType).HasDefaultValueSql("(N'private')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserMobileNumberId).HasColumnName("UserMobileNumberID");
        });

        modelBuilder.Entity<TlknUserBroadcastFavoriteList>(entity =>
        {
            entity.HasKey(e => e.UfavoriteD);

            entity.ToTable("TLKN_USER_BROADCAST_FAVORITE_LIST");

            entity.Property(e => e.UfavoriteD).HasColumnName("UFavoriteD");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingMatchConnect).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMatch).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystemUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MatchLikeStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserMobileNumberId).HasColumnName("UserMobileNumberID");
        });

        modelBuilder.Entity<TlknUserBroadcastFreeGroupshow>(entity =>
        {
            entity.HasKey(e => e.UbroadcastGroupShowId);

            entity.ToTable("TLKN_USER_BROADCAST_FREE_GROUPSHOW");

            entity.Property(e => e.UbroadcastGroupShowId).HasColumnName("UBroadcastGroupShowID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.GroupShowCloseTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowEndTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowId).HasColumnName("GroupShowID");
            entity.Property(e => e.GroupShowInitiateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowOpenTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowPendingTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowSessionId).HasColumnName("GroupShowSessionID");
            entity.Property(e => e.GroupShowSpendTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowStartTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowTicketId).HasColumnName("GroupShowTicketID");
            entity.Property(e => e.GroupShowTimeSpendHour).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.GroupShowTimeSpendMinute).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.GroupShowTimeSpendSecond).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.GroupShowTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupShowTokenID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsGroupShowClose).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowEnd).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowInitiate).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowOpen).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowPending).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowSpend).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowStart).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsOpen).HasDefaultValueSql("((1))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.TimeCountConsume).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountEnd).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountFreeLeft).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountFreeTotal).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountLeft1).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountStart).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountTotal1).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TodayDay).HasDefaultValueSql("((0))");
            entity.Property(e => e.TodayMonth).HasDefaultValueSql("((0))");
            entity.Property(e => e.TodayYear).HasDefaultValueSql("((0))");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserBroadcastFreePrivateshow>(entity =>
        {
            entity.HasKey(e => e.UbroadcastPrivateShowId);

            entity.ToTable("TLKN_USER_BROADCAST_FREE_PRIVATESHOW");

            entity.Property(e => e.UbroadcastPrivateShowId).HasColumnName("UBroadcastPrivateShowID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.GroupShowCloseTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowEndTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowInitiateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowOpenTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowPendingTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowSessionId).HasColumnName("GroupShowSessionID");
            entity.Property(e => e.GroupShowSpendTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowStartTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowTimeSpendHour).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.GroupShowTimeSpendMinute).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.GroupShowTimeSpendSecond).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsGroupShowClose).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowEnd).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowInitiate).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowOpen).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowPending).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowSpend).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowStart).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsOpen).HasDefaultValueSql("((1))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PrivateShowId).HasColumnName("PrivateShowID");
            entity.Property(e => e.PrivateShowTicketId).HasColumnName("PrivateShowTicketID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.TimeCountConsume).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountEnd).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountFreeLeft).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountFreeTotal).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountLeft1).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountStart).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountTotal1).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TodayDay).HasDefaultValueSql("((0))");
            entity.Property(e => e.TodayMonth).HasDefaultValueSql("((0))");
            entity.Property(e => e.TodayYear).HasDefaultValueSql("((0))");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserBroadcastFreeVideo>(entity =>
        {
            entity.HasKey(e => e.UbroadcastVideoId).HasName("PK_TLKN_USER_BROADCAST_FREEONLINE");

            entity.ToTable("TLKN_USER_BROADCAST_FREE_VIDEO");

            entity.Property(e => e.UbroadcastVideoId).HasColumnName("UBroadcastVideoID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.GroupShowCloseTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowEndTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowId).HasColumnName("GroupShowID");
            entity.Property(e => e.GroupShowInitiateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowOpenTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowPendingTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowSessionId).HasColumnName("GroupShowSessionID");
            entity.Property(e => e.GroupShowSpendTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowStartTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowTicketId).HasColumnName("GroupShowTicketID");
            entity.Property(e => e.GroupShowTimeSpendHour).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.GroupShowTimeSpendMinute).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.GroupShowTimeSpendSecond).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.GroupShowVideoId).HasColumnName("GroupShowVideoID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsGroupShowClose).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowEnd).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowInitiate).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowOpen).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowPending).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowSpend).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowStart).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsOpen).HasDefaultValueSql("((1))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.TimeCountConsume).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountEnd).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountFreeLeft).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountFreeTotal).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountLeft1).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountStart).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountTotal1).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TodayDay).HasDefaultValueSql("((0))");
            entity.Property(e => e.TodayMonth).HasDefaultValueSql("((0))");
            entity.Property(e => e.TodayYear).HasDefaultValueSql("((0))");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserBroadcastGroupshowArchiveList>(entity =>
        {
            entity.HasKey(e => e.UgroupShowArchiveId).HasName("PK_TLKN_USER_BROADCAST_GROUPSHOW_ARCHIVE");

            entity.ToTable("TLKN_USER_BROADCAST_GROUPSHOW_ARCHIVE_LIST");

            entity.Property(e => e.UgroupShowArchiveId).HasColumnName("UGroupShowArchiveID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.CamFmsurl).HasColumnName("CamFMSURL");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.GroupShowId).HasColumnName("GroupShowID");
            entity.Property(e => e.GroupShowSessionId).HasColumnName("GroupShowSessionID");
            entity.Property(e => e.GroupShowTicketId).HasColumnName("GroupShowTicketID");
            entity.Property(e => e.GroupShowTokenId).HasColumnName("GroupShowTokenID");
            entity.Property(e => e.GroupShowVideoId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupShowVideoID");
            entity.Property(e => e.GroupShowVideoTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupShowVideoTokenID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.MemberId).HasColumnName("MemberID");
            entity.Property(e => e.MemberSessionId).HasColumnName("MemberSessionID");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.ModelId).HasColumnName("ModelID");
            entity.Property(e => e.ModelSessionId).HasColumnName("ModelSessionID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserBroadcastGroupshowCameraEventList>(entity =>
        {
            entity.HasKey(e => e.UgroupShowCameraEventId).HasName("PK_TLKN_USER_BROADCAST_GROUPSHOW_CAMERA_EVENT");

            entity.ToTable("TLKN_USER_BROADCAST_GROUPSHOW_CAMERA_EVENT_LIST");

            entity.Property(e => e.UgroupShowCameraEventId).HasColumnName("UGroupShowCameraEventID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.CamFmsid).HasColumnName("CamFMSID");
            entity.Property(e => e.CamFmsurl).HasColumnName("CamFMSURL");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.GroupShowId).HasColumnName("GroupShowID");
            entity.Property(e => e.GroupShowInviteId).HasColumnName("GroupShowInviteID");
            entity.Property(e => e.GroupShowSessionId).HasColumnName("GroupShowSessionID");
            entity.Property(e => e.GroupShowTicketId).HasColumnName("GroupShowTicketID");
            entity.Property(e => e.GroupShowTokenId).HasColumnName("GroupShowTokenID");
            entity.Property(e => e.GroupShowVideoId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupShowVideoID");
            entity.Property(e => e.GroupShowVideoTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupShowVideoTokenID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsModelStudio).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.StudioId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("StudioID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserBroadcastGroupshowFavoriteList>(entity =>
        {
            entity.HasKey(e => e.UgroupShowFavoriteId);

            entity.ToTable("TLKN_USER_BROADCAST_GROUPSHOW_FAVORITE_LIST");

            entity.Property(e => e.UgroupShowFavoriteId).HasColumnName("UGroupShowFavoriteID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupShowId).HasColumnName("GroupShowID");
            entity.Property(e => e.GroupShowTicketId).HasColumnName("GroupShowTicketID");
            entity.Property(e => e.GroupShowTokenId).HasColumnName("GroupShowTokenID");
            entity.Property(e => e.GroupShowVideoId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupShowVideoID");
            entity.Property(e => e.GroupShowVideoTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupShowVideoTokenID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingMatchConnect).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMatch).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystemUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MatchLikeStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserMobileNumberId).HasColumnName("UserMobileNumberID");
        });

        modelBuilder.Entity<TlknUserBroadcastGroupshowFreeVideoList>(entity =>
        {
            entity.HasKey(e => e.UgroupShowFreeVideoId).HasName("PK_TLKN_USER_BROADCAST_GROUPSHOW_FREE_ROOM");

            entity.ToTable("TLKN_USER_BROADCAST_GROUPSHOW_FREE_VIDEO_LIST");

            entity.Property(e => e.UgroupShowFreeVideoId).HasColumnName("UGroupShowFreeVideoID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.GroupShowCloseTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowEndTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowId).HasColumnName("GroupShowID");
            entity.Property(e => e.GroupShowInitiateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowOpenTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowPendingTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowSessionId).HasColumnName("GroupShowSessionID");
            entity.Property(e => e.GroupShowSpendTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowStartTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowTicketId).HasColumnName("GroupShowTicketID");
            entity.Property(e => e.GroupShowTimeSpendHour).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.GroupShowTimeSpendMinute).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.GroupShowTimeSpendSecond).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.GroupShowTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupShowTokenID");
            entity.Property(e => e.GroupShowVideoId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupShowVideoID");
            entity.Property(e => e.GroupShowVideoTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupShowVideoTokenID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsGroupShowClose).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowEnd).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowInitiate).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowOpen).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowPending).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowSpend).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowStart).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsOpen).HasDefaultValueSql("((1))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.TimeCountConsume).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountEnd).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountFreeLeft).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountFreeTotal).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountLeft1).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountStart).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountTotal1).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TodayDay).HasDefaultValueSql("((0))");
            entity.Property(e => e.TodayMonth).HasDefaultValueSql("((0))");
            entity.Property(e => e.TodayYear).HasDefaultValueSql("((0))");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserBroadcastGroupshowInvitationRequestHistoryList>(entity =>
        {
            entity.HasKey(e => e.UgroupShowInviteId);

            entity.ToTable("TLKN_USER_BROADCAST_GROUPSHOW_INVITATION_REQUEST_HISTORY_LIST");

            entity.Property(e => e.UgroupShowInviteId).HasColumnName("UGroupShowInviteID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromTlknUserId).HasColumnName("FromTlknUserID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.GroupShowCloseTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowEndTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowHandlerTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupShowHandlerTokenID");
            entity.Property(e => e.GroupShowId).HasColumnName("GroupShowID");
            entity.Property(e => e.GroupShowInitiateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowInviteReset).HasColumnType("datetime");
            entity.Property(e => e.GroupShowInviteStart).HasColumnType("datetime");
            entity.Property(e => e.GroupShowOpenTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowPendingTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowQueueOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.GroupShowSessionId).HasColumnName("GroupShowSessionID");
            entity.Property(e => e.GroupShowSpendTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowStartTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowStatus).HasDefaultValueSql("(N'initial')");
            entity.Property(e => e.GroupShowTicketId).HasColumnName("GroupShowTicketID");
            entity.Property(e => e.GroupShowTimeSpendHour).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.GroupShowTimeSpendMinute).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.GroupShowTimeSpendSecond).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.GroupShowTokenId).HasColumnName("GroupShowTokenID");
            entity.Property(e => e.GroupShowVideoId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupShowVideoID");
            entity.Property(e => e.GroupShowVideoTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupShowVideoTokenID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsGroupShowClose).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowEnd).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowInitiate).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowInviteOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowInviteShow).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowOpen).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowPending).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowSpend).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowStart).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNewOwner).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNewRemote).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsOpen).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsViewOwner).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsViewRemote).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisibleOwner).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisibleRemote).HasDefaultValueSql("((1))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TlknUserId).HasColumnName("TlknUserID");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToTlknUserId).HasColumnName("ToTlknUserID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserBroadcastGroupshowInvitationRequestList>(entity =>
        {
            entity.HasKey(e => e.UgroupShowInviteId).HasName("PK_TLKN_USER_BROADCAST_GROUPSHOW_INVITATION");

            entity.ToTable("TLKN_USER_BROADCAST_GROUPSHOW_INVITATION_REQUEST_LIST");

            entity.Property(e => e.UgroupShowInviteId).HasColumnName("UGroupShowInviteID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromTlknUserId).HasColumnName("FromTlknUserID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.GroupShowCloseTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowEndTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowHandlerTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupShowHandlerTokenID");
            entity.Property(e => e.GroupShowId).HasColumnName("GroupShowID");
            entity.Property(e => e.GroupShowInitiateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowInviteReset).HasColumnType("datetime");
            entity.Property(e => e.GroupShowInviteStart).HasColumnType("datetime");
            entity.Property(e => e.GroupShowOpenTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowPendingTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowQueueOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.GroupShowSessionId).HasColumnName("GroupShowSessionID");
            entity.Property(e => e.GroupShowSpendTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowStartTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowStatus).HasDefaultValueSql("(N'initial')");
            entity.Property(e => e.GroupShowTicketId).HasColumnName("GroupShowTicketID");
            entity.Property(e => e.GroupShowTimeSpendHour).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.GroupShowTimeSpendMinute).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.GroupShowTimeSpendSecond).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.GroupShowTokenId).HasColumnName("GroupShowTokenID");
            entity.Property(e => e.GroupShowVideoId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupShowVideoID");
            entity.Property(e => e.GroupShowVideoTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupShowVideoTokenID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsGroupShowClose).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowEnd).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowInitiate).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowInviteOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowInviteShow).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowOpen).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowPending).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowSpend).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowStart).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNewOwner).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNewRemote).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsOpen).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsViewOwner).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsViewRemote).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisibleOwner).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisibleRemote).HasDefaultValueSql("((1))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TlknUserId).HasColumnName("TlknUserID");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToTlknUserId).HasColumnName("ToTlknUserID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserBroadcastGroupshowLoginList>(entity =>
        {
            entity.HasKey(e => e.UgroupShowLoginId).HasName("PK_TLKN_USER_BROADCAST_GROUPSHOW_LOGIN");

            entity.ToTable("TLKN_USER_BROADCAST_GROUPSHOW_LOGIN_LIST");

            entity.Property(e => e.UgroupShowLoginId).HasColumnName("UGroupShowLoginID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'dating')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.GroupShowId).HasColumnName("GroupShowID");
            entity.Property(e => e.GroupShowInviteId).HasColumnName("GroupShowInviteID");
            entity.Property(e => e.GroupShowSessionId).HasColumnName("GroupShowSessionID");
            entity.Property(e => e.GroupShowStatus).HasDefaultValueSql("(N'initial')");
            entity.Property(e => e.GroupShowTicketId).HasColumnName("GroupShowTicketID");
            entity.Property(e => e.GroupShowTokenId).HasColumnName("GroupShowTokenID");
            entity.Property(e => e.GroupShowVideoId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupShowVideoID");
            entity.Property(e => e.GroupShowVideoTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupShowVideoTokenID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsGuest).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsLogin).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.ResetDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserRegisterDate).HasColumnType("smalldatetime");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.UserStatus).HasDefaultValueSql("(N'offline')");
        });

        modelBuilder.Entity<TlknUserBroadcastGroupshowMessageList>(entity =>
        {
            entity.HasKey(e => e.UgroupShowMessageId).HasName("PK_TLKN_USER_BROADCAST_GROUPSHOW_MESSAGE");

            entity.ToTable("TLKN_USER_BROADCAST_GROUPSHOW_MESSAGE_LIST");

            entity.Property(e => e.UgroupShowMessageId).HasColumnName("UGroupShowMessageID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FileId).HasColumnName("FileID");
            entity.Property(e => e.FileIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.GroupShowId).HasColumnName("GroupShowID");
            entity.Property(e => e.GroupShowTicketId).HasColumnName("GroupShowTicketID");
            entity.Property(e => e.GroupShowTokenId).HasColumnName("GroupShowTokenID");
            entity.Property(e => e.GroupShowVideoId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupShowVideoID");
            entity.Property(e => e.GroupShowVideoTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupShowVideoTokenID");
            entity.Property(e => e.GroupType).HasDefaultValueSql("(N'private')");
            entity.Property(e => e.ImageDefaultServerId).HasColumnName("ImageDefaultServerID");
            entity.Property(e => e.ImageDefaultServerUrl).HasColumnName("ImageDefaultServerURL");
            entity.Property(e => e.ImageFromMobileNumberId).HasColumnName("ImageFromMobileNumberID");
            entity.Property(e => e.ImageFromUserId).HasColumnName("ImageFromUserID");
            entity.Property(e => e.ImageIsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageIsLoading).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageIsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.ImageThumServerUrl).HasColumnName("ImageThumServerURL");
            entity.Property(e => e.ImageToMobileNumberId).HasColumnName("ImageToMobileNumberID");
            entity.Property(e => e.ImageToUserId).HasColumnName("ImageToUserID");
            entity.Property(e => e.InviteOwnerMobileNumberId).HasColumnName("InviteOwnerMobileNumberID");
            entity.Property(e => e.InviteOwnerUserId).HasColumnName("InviteOwnerUserID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsCreateNewChatLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDelivered).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsHistoryLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNewMessage).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSessionClosedLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsShareLocationAskRemoteEnable).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSpaceLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSubjectLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.LocationCountryFlagUrl).HasColumnName("LocationCountryFlagURL");
            entity.Property(e => e.LocationRequestFromRemoteUserId).HasColumnName("LocationRequestFromRemoteUserID");
            entity.Property(e => e.LocationRequestToRemoteUserId).HasColumnName("LocationRequestToRemoteUserID");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowId1).HasColumnName("ScreenChatShowID1");
            entity.Property(e => e.ScreenChatShowId2).HasColumnName("ScreenChatShowID2");
            entity.Property(e => e.ScreenChatShowId3).HasColumnName("ScreenChatShowID3");
            entity.Property(e => e.ScreenChatShowId4).HasColumnName("ScreenChatShowID4");
            entity.Property(e => e.ScreenChatShowId5).HasColumnName("ScreenChatShowID5");
            entity.Property(e => e.ScreenChatShowId6).HasColumnName("ScreenChatShowID6");
            entity.Property(e => e.ScreenChatShowId7).HasColumnName("ScreenChatShowID7");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.StaticMapUrl).HasColumnName("StaticMapURL");
            entity.Property(e => e.SuggestContactListFromRemoteUserId).HasColumnName("SuggestContactListFromRemoteUserID");
            entity.Property(e => e.SuggestContactListMobileNumberId).HasColumnName("SuggestContactListMobileNumberID");
            entity.Property(e => e.SuggestContactListToRemoteUserId).HasColumnName("SuggestContactListToRemoteUserID");
            entity.Property(e => e.SuggestContactListUserId).HasColumnName("SuggestContactListUserID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDateTimeUtc)
                .HasColumnType("smalldatetime")
                .HasColumnName("UploadDateTimeUTC");
            entity.Property(e => e.UploadDateUtc)
                .HasColumnType("smalldatetime")
                .HasColumnName("UploadDateUTC");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadDayUtc)
                .HasColumnType("money")
                .HasColumnName("UploadDayUTC");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadMonthUtc).HasColumnName("UploadMonthUTC");
            entity.Property(e => e.UploadTimeUtc).HasColumnName("UploadTimeUTC");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UploadYearUtc).HasColumnName("UploadYearUTC");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.VideoDefaultServerId).HasColumnName("VideoDefaultServerID");
            entity.Property(e => e.VideoDefaultServerUrl).HasColumnName("VideoDefaultServerURL");
            entity.Property(e => e.VideoFromMobileNumberId).HasColumnName("VideoFromMobileNumberID");
            entity.Property(e => e.VideoFromUserId).HasColumnName("VideoFromUserID");
            entity.Property(e => e.VideoIsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoIsLoading).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoIsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.VideoShowInviteId).HasColumnName("VideoShowInviteID");
            entity.Property(e => e.VideoThumServerUrl).HasColumnName("VideoThumServerURL");
            entity.Property(e => e.VideoToMobileNumberId).HasColumnName("VideoToMobileNumberID");
            entity.Property(e => e.VideoToUserId).HasColumnName("VideoToUserID");
            entity.Property(e => e.VoiceDefaultServerId).HasColumnName("VoiceDefaultServerID");
            entity.Property(e => e.VoiceDefaultServerUrl).HasColumnName("VoiceDefaultServerURL");
            entity.Property(e => e.VoiceFromMobileNumberId).HasColumnName("VoiceFromMobileNumberID");
            entity.Property(e => e.VoiceFromUserId).HasColumnName("VoiceFromUserID");
            entity.Property(e => e.VoiceIsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.VoiceIsLoading).HasDefaultValueSql("((0))");
            entity.Property(e => e.VoiceIsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.VoiceIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.VoiceShowInviteId).HasColumnName("VoiceShowInviteID");
            entity.Property(e => e.VoiceThumServerUrl).HasColumnName("VoiceThumServerURL");
            entity.Property(e => e.VoiceToMobileNumberId).HasColumnName("VoiceToMobileNumberID");
            entity.Property(e => e.VoiceToUserId).HasColumnName("VoiceToUserID");
        });

        modelBuilder.Entity<TlknUserBroadcastGroupshowOnlineList>(entity =>
        {
            entity.HasKey(e => e.UgroupShowLiveId);

            entity.ToTable("TLKN_USER_BROADCAST_GROUPSHOW_ONLINE_LIST");

            entity.Property(e => e.UgroupShowLiveId).HasColumnName("UGroupShowLiveID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.GroupShowId).HasColumnName("GroupShowID");
            entity.Property(e => e.GroupShowSessionId).HasColumnName("GroupShowSessionID");
            entity.Property(e => e.GroupShowTicketId).HasColumnName("GroupShowTicketID");
            entity.Property(e => e.GroupShowTokenId).HasColumnName("GroupShowTokenID");
            entity.Property(e => e.GroupShowVideoId).HasColumnName("GroupShowVideoID");
            entity.Property(e => e.GroupShowVideoTokenId).HasColumnName("GroupShowVideoTokenID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsScreenShowClose).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsScreenShowEnd).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsScreenShowInitiate).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsScreenShowOpen).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsScreenShowPending).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsScreenShowSpend).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsScreenShowStart).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenShowCloseTime).HasColumnType("smalldatetime");
            entity.Property(e => e.ScreenShowEndTime).HasColumnType("smalldatetime");
            entity.Property(e => e.ScreenShowInitiateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.ScreenShowOpenTime).HasColumnType("smalldatetime");
            entity.Property(e => e.ScreenShowPendingTime).HasColumnType("smalldatetime");
            entity.Property(e => e.ScreenShowSpendTime).HasColumnType("smalldatetime");
            entity.Property(e => e.ScreenShowStartTime).HasColumnType("smalldatetime");
            entity.Property(e => e.ScreenShowTimeSpendHour).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.ScreenShowTimeSpendMinute).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.ScreenShowTimeSpendSecond).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.TimeCountConsume).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountEnd).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountFreeLeft).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountFreeTotal).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountStart).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TodayDay).HasDefaultValueSql("((0))");
            entity.Property(e => e.TodayMonth).HasDefaultValueSql("((0))");
            entity.Property(e => e.TodayYear).HasDefaultValueSql("((0))");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserBroadcastGroupshowRequestList>(entity =>
        {
            entity.HasKey(e => e.UgroupShowRequestId).HasName("PK_TLKN_USER_BROADCAST_GROUPSHOW_REQUEST");

            entity.ToTable("TLKN_USER_BROADCAST_GROUPSHOW_REQUEST_LIST");

            entity.Property(e => e.UgroupShowRequestId).HasColumnName("UGroupShowRequestID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.GroupShowId).HasColumnName("GroupShowID");
            entity.Property(e => e.GroupShowInviteId).HasColumnName("GroupShowInviteID");
            entity.Property(e => e.GroupShowSessionId).HasColumnName("GroupShowSessionID");
            entity.Property(e => e.GroupShowStatus).HasDefaultValueSql("(N'initial')");
            entity.Property(e => e.GroupShowTicketId).HasColumnName("GroupShowTicketID");
            entity.Property(e => e.GroupShowTokenId).HasColumnName("GroupShowTokenID");
            entity.Property(e => e.GroupShowVideoId).HasColumnName("GroupShowVideoID");
            entity.Property(e => e.GroupShowVideoTokenId).HasColumnName("GroupShowVideoTokenID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsGuest).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsLogin).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.ResetDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserRegisterDate).HasColumnType("smalldatetime");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.UserStatus).HasDefaultValueSql("(N'offline')");
        });

        modelBuilder.Entity<TlknUserBroadcastGroupshowSessionTicketList>(entity =>
        {
            entity.HasKey(e => e.UgroupShowSessionTicketId).HasName("PK_TLKN_USER_BROADCAST_GROUPSHOW_SESSION_TICKET");

            entity.ToTable("TLKN_USER_BROADCAST_GROUPSHOW_SESSION_TICKET_LIST");

            entity.Property(e => e.UgroupShowSessionTicketId).HasColumnName("UGroupShowSessionTicketID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.GroupShowId).HasColumnName("GroupShowID");
            entity.Property(e => e.GroupShowSessionId).HasColumnName("GroupShowSessionID");
            entity.Property(e => e.GroupShowTicketId).HasColumnName("GroupShowTicketID");
            entity.Property(e => e.GroupShowTokenId).HasColumnName("GroupShowTokenID");
            entity.Property(e => e.GroupShowVideoId).HasColumnName("GroupShowVideoID");
            entity.Property(e => e.GroupShowVideoTokenId).HasColumnName("GroupShowVideoTokenID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsGroupShowMaxInviteCount).HasDefaultValueSql("((0))");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenId).HasColumnName("ScreenID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserBroadcastGroupshowTimeConsume>(entity =>
        {
            entity.HasKey(e => e.UgroupShowTimeId);

            entity.ToTable("TLKN_USER_BROADCAST_GROUPSHOW_TIME_CONSUME");

            entity.Property(e => e.UgroupShowTimeId).HasColumnName("UGroupShowTimeID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.GroupShowCloseTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowEndTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowId).HasColumnName("GroupShowID");
            entity.Property(e => e.GroupShowInitiateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowOpenTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowPendingTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowSessionId).HasColumnName("GroupShowSessionID");
            entity.Property(e => e.GroupShowSpendTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowStartTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowTicketId).HasColumnName("GroupShowTicketID");
            entity.Property(e => e.GroupShowTimeSpendHour).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.GroupShowTimeSpendMinute).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.GroupShowTimeSpendSecond).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.GroupShowTokenId).HasColumnName("GroupShowTokenID");
            entity.Property(e => e.GroupShowVideoId).HasColumnName("GroupShowVideoID");
            entity.Property(e => e.GroupShowVideoTokenId).HasColumnName("GroupShowVideoTokenID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsGroupShowClose).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowEnd).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowInitiate).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowOpen).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowPending).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowSpend).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowStart).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsOpen).HasDefaultValueSql("((1))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.TimeCountConsume).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountEnd).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountFreeLeft).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountFreeTotal).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountLeft1).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountStart).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountTotal1).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TodayDay).HasDefaultValueSql("((0))");
            entity.Property(e => e.TodayMonth).HasDefaultValueSql("((0))");
            entity.Property(e => e.TodayYear).HasDefaultValueSql("((0))");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserBroadcastGroupshowVideoList>(entity =>
        {
            entity.HasKey(e => e.UgroupShowVideoId).HasName("PK_TLKN_USER_BROADCAST_GROUPSHOW_VIDEO_LIST_1");

            entity.ToTable("TLKN_USER_BROADCAST_GROUPSHOW_VIDEO_LIST");

            entity.Property(e => e.UgroupShowVideoId).HasColumnName("UGroupShowVideoID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.EndDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.GroupShowCloseTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowEndTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowId).HasColumnName("GroupShowID");
            entity.Property(e => e.GroupShowInitiateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowOpenTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowPendingTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowSessionId).HasColumnName("GroupShowSessionID");
            entity.Property(e => e.GroupShowSpendTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowStartTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowTicketId).HasColumnName("GroupShowTicketID");
            entity.Property(e => e.GroupShowTimeSpendHour).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.GroupShowTimeSpendMinute).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.GroupShowTimeSpendSecond).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.GroupShowTokenId).HasColumnName("GroupShowTokenID");
            entity.Property(e => e.GroupShowVideoId).HasColumnName("GroupShowVideoID");
            entity.Property(e => e.GroupShowVideoTokenId).HasColumnName("GroupShowVideoTokenID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsGroupShowClose).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowEnd).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowInitiate).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowOpen).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowPending).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowSpend).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowStart).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPublish).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVideoSaveLive).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVideoTopFirstLive).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.StartDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.VideoDuration).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoTopFirstLiveOrder)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
        });

        modelBuilder.Entity<TlknUserBroadcastGroupshowVideoTicketList>(entity =>
        {
            entity.HasKey(e => e.UgroupShowVideoTicketId).HasName("PK_TLKN_USER_BROADCAST_GROUPSHOW_VIDEO_TICKET");

            entity.ToTable("TLKN_USER_BROADCAST_GROUPSHOW_VIDEO_TICKET_LIST");

            entity.Property(e => e.UgroupShowVideoTicketId).HasColumnName("UGroupShowVideoTicketID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.GroupShowId).HasColumnName("GroupShowID");
            entity.Property(e => e.GroupShowTicketId).HasColumnName("GroupShowTicketID");
            entity.Property(e => e.GroupShowTokenId).HasColumnName("GroupShowTokenID");
            entity.Property(e => e.GroupShowVideoId).HasColumnName("GroupShowVideoID");
            entity.Property(e => e.GroupShowVideoTokenId).HasColumnName("GroupShowVideoTokenID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserBroadcastOnline>(entity =>
        {
            entity.HasKey(e => e.ScreenShowLiveId).HasName("PK_TLKN_USER_SCREENSHOW_ONLINE");

            entity.ToTable("TLKN_USER_BROADCAST_ONLINE");

            entity.Property(e => e.ScreenShowLiveId).HasColumnName("ScreenShowLiveID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsScreenShowClose).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsScreenShowEnd).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsScreenShowInitiate).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsScreenShowOpen).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsScreenShowPending).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsScreenShowSpend).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsScreenShowStart).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenShowCloseTime).HasColumnType("smalldatetime");
            entity.Property(e => e.ScreenShowEndTime).HasColumnType("smalldatetime");
            entity.Property(e => e.ScreenShowId).HasColumnName("ScreenShowID");
            entity.Property(e => e.ScreenShowInitiateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.ScreenShowOpenTime).HasColumnType("smalldatetime");
            entity.Property(e => e.ScreenShowPendingTime).HasColumnType("smalldatetime");
            entity.Property(e => e.ScreenShowSessionId).HasColumnName("ScreenShowSessionID");
            entity.Property(e => e.ScreenShowSpendTime).HasColumnType("smalldatetime");
            entity.Property(e => e.ScreenShowStartTime).HasColumnType("smalldatetime");
            entity.Property(e => e.ScreenShowTicketId).HasColumnName("ScreenShowTicketID");
            entity.Property(e => e.ScreenShowTimeSpendHour).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.ScreenShowTimeSpendMinute).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.ScreenShowTimeSpendSecond).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.ScreenShowVideoId).HasColumnName("ScreenShowVideoID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserBroadcastPrivateshowArchiveList>(entity =>
        {
            entity.HasKey(e => e.UprivateShowArchiveId).HasName("PK_TLKN_USER_BROADCAST_PRIVATESHOW_ARCHIVE");

            entity.ToTable("TLKN_USER_BROADCAST_PRIVATESHOW_ARCHIVE_LIST");

            entity.Property(e => e.UprivateShowArchiveId).HasColumnName("UPrivateShowArchiveID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.CamFmsurl).HasColumnName("CamFMSURL");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.MemberId).HasColumnName("MemberID");
            entity.Property(e => e.MemberSessionId).HasColumnName("MemberSessionID");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.ModelId).HasColumnName("ModelID");
            entity.Property(e => e.ModelSessionId).HasColumnName("ModelSessionID");
            entity.Property(e => e.PrivateShowId).HasColumnName("PrivateShowID");
            entity.Property(e => e.PrivateShowSessionId).HasColumnName("PrivateShowSessionID");
            entity.Property(e => e.PrivateShowTicketId).HasColumnName("PrivateShowTicketID");
            entity.Property(e => e.PrivateShowTokenId).HasColumnName("PrivateShowTokenID");
            entity.Property(e => e.PrivateShowVideoId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PrivateShowVideoID");
            entity.Property(e => e.PrivateShowVideoTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PrivateShowVideoTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserBroadcastPrivateshowCameraEventList>(entity =>
        {
            entity.HasKey(e => e.UprivateShowCameraEventId).HasName("PK_TLKN_USER_BROADCAST_PRIVATESHOW_CAMERA_EVENT");

            entity.ToTable("TLKN_USER_BROADCAST_PRIVATESHOW_CAMERA_EVENT_LIST");

            entity.Property(e => e.UprivateShowCameraEventId).HasColumnName("UPrivateShowCameraEventID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.CamFmsid).HasColumnName("CamFMSID");
            entity.Property(e => e.CamFmsurl).HasColumnName("CamFMSURL");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsModelStudio).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PrivateShowId).HasColumnName("PrivateShowID");
            entity.Property(e => e.PrivateShowInviteId).HasColumnName("PrivateShowInviteID");
            entity.Property(e => e.PrivateShowSessionId).HasColumnName("PrivateShowSessionID");
            entity.Property(e => e.PrivateShowTicketId).HasColumnName("PrivateShowTicketID");
            entity.Property(e => e.PrivateShowTokenId).HasColumnName("PrivateShowTokenID");
            entity.Property(e => e.PrivateShowVideoId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PrivateShowVideoID");
            entity.Property(e => e.PrivateShowVideoTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PrivateShowVideoTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.StudioId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("StudioID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserBroadcastPrivateshowFavoriteList>(entity =>
        {
            entity.HasKey(e => e.UprivateShowFavoriteId);

            entity.ToTable("TLKN_USER_BROADCAST_PRIVATESHOW_FAVORITE_LIST");

            entity.Property(e => e.UprivateShowFavoriteId).HasColumnName("UPrivateShowFavoriteID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingMatchConnect).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMatch).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystemUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MatchLikeStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.PrivateShowId).HasColumnName("PrivateShowID");
            entity.Property(e => e.PrivateShowTicketId).HasColumnName("PrivateShowTicketID");
            entity.Property(e => e.PrivateShowTokenId).HasColumnName("PrivateShowTokenID");
            entity.Property(e => e.PrivateShowVideoId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PrivateShowVideoID");
            entity.Property(e => e.PrivateShowVideoTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PrivateShowVideoTokenID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserMobileNumberId).HasColumnName("UserMobileNumberID");
        });

        modelBuilder.Entity<TlknUserBroadcastPrivateshowFreeVideoList>(entity =>
        {
            entity.HasKey(e => e.UprivateShowFreeVideoId).HasName("PK_TLKN_USER_BROADCAST_PRIVATESHOW_FREE_ROOM");

            entity.ToTable("TLKN_USER_BROADCAST_PRIVATESHOW_FREE_VIDEO_LIST");

            entity.Property(e => e.UprivateShowFreeVideoId).HasColumnName("UPrivateShowFreeVideoID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsOpen).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsPrivateShowClose).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowEnd).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowInitiate).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowOpen).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowPending).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowSpend).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowStart).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PrivateShowCloseTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowEndTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowId).HasColumnName("PrivateShowID");
            entity.Property(e => e.PrivateShowInitiateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowOpenTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowPendingTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowSessionId).HasColumnName("PrivateShowSessionID");
            entity.Property(e => e.PrivateShowSpendTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowStartTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowTicketId).HasColumnName("PrivateShowTicketID");
            entity.Property(e => e.PrivateShowTimeSpendHour).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.PrivateShowTimeSpendMinute).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.PrivateShowTimeSpendSecond).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.PrivateShowTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PrivateShowTokenID");
            entity.Property(e => e.PrivateShowVideoId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PrivateShowVideoID");
            entity.Property(e => e.PrivateShowVideoTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PrivateShowVideoTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.TimeCountConsume).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountEnd).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountFreeLeft).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountFreeTotal).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountLeft1).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountStart).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountTotal1).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TodayDay).HasDefaultValueSql("((0))");
            entity.Property(e => e.TodayMonth).HasDefaultValueSql("((0))");
            entity.Property(e => e.TodayYear).HasDefaultValueSql("((0))");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserBroadcastPrivateshowInvitationRequestHistoryList>(entity =>
        {
            entity.HasKey(e => e.UprivateShowInviteId);

            entity.ToTable("TLKN_USER_BROADCAST_PRIVATESHOW_INVITATION_REQUEST_HISTORY_LIST");

            entity.Property(e => e.UprivateShowInviteId).HasColumnName("UPrivateShowInviteID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromTlknUserId).HasColumnName("FromTlknUserID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsNewOwner).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNewRemote).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsOpen).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowClose).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowEnd).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowInitiate).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowInviteOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowInviteShow).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowOpen).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowPending).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowSpend).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowStart).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsViewOwner).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsViewRemote).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisibleOwner).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisibleRemote).HasDefaultValueSql("((1))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PrivateShowCloseTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowEndTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowHandlerTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PrivateShowHandlerTokenID");
            entity.Property(e => e.PrivateShowId).HasColumnName("PrivateShowID");
            entity.Property(e => e.PrivateShowInitiateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowInviteReset).HasColumnType("datetime");
            entity.Property(e => e.PrivateShowInviteStart).HasColumnType("datetime");
            entity.Property(e => e.PrivateShowOpenTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowPendingTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowQueueOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.PrivateShowSessionId).HasColumnName("PrivateShowSessionID");
            entity.Property(e => e.PrivateShowSpendTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowStartTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowStatus).HasDefaultValueSql("(N'initial')");
            entity.Property(e => e.PrivateShowTicketId).HasColumnName("PrivateShowTicketID");
            entity.Property(e => e.PrivateShowTimeSpendHour).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.PrivateShowTimeSpendMinute).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.PrivateShowTimeSpendSecond).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.PrivateShowTokenId).HasColumnName("PrivateShowTokenID");
            entity.Property(e => e.PrivateShowVideoId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PrivateShowVideoID");
            entity.Property(e => e.PrivateShowVideoTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PrivateShowVideoTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TlknUserId).HasColumnName("TlknUserID");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToTlknUserId).HasColumnName("ToTlknUserID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserBroadcastPrivateshowInvitationRequestList>(entity =>
        {
            entity.HasKey(e => e.UprivateShowInviteId).HasName("PK_TLKN_USER_BROADCAST_PRIVATESHOW_INVITATION");

            entity.ToTable("TLKN_USER_BROADCAST_PRIVATESHOW_INVITATION_REQUEST_LIST");

            entity.Property(e => e.UprivateShowInviteId).HasColumnName("UPrivateShowInviteID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromTlknUserId).HasColumnName("FromTlknUserID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsNewOwner).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNewRemote).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsOpen).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowClose).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowEnd).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowInitiate).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowInviteOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowInviteShow).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowOpen).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowPending).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowSpend).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowStart).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsViewOwner).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsViewRemote).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisibleOwner).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisibleRemote).HasDefaultValueSql("((1))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PrivateShowCloseTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowEndTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowHandlerTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PrivateShowHandlerTokenID");
            entity.Property(e => e.PrivateShowId).HasColumnName("PrivateShowID");
            entity.Property(e => e.PrivateShowInitiateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowInviteReset).HasColumnType("datetime");
            entity.Property(e => e.PrivateShowInviteStart).HasColumnType("datetime");
            entity.Property(e => e.PrivateShowOpenTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowPendingTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowQueueOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.PrivateShowSessionId).HasColumnName("PrivateShowSessionID");
            entity.Property(e => e.PrivateShowSpendTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowStartTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowStatus).HasDefaultValueSql("(N'initial')");
            entity.Property(e => e.PrivateShowTicketId).HasColumnName("PrivateShowTicketID");
            entity.Property(e => e.PrivateShowTimeSpendHour).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.PrivateShowTimeSpendMinute).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.PrivateShowTimeSpendSecond).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.PrivateShowTokenId).HasColumnName("PrivateShowTokenID");
            entity.Property(e => e.PrivateShowVideoId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PrivateShowVideoID");
            entity.Property(e => e.PrivateShowVideoTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PrivateShowVideoTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TlknUserId).HasColumnName("TlknUserID");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToTlknUserId).HasColumnName("ToTlknUserID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserBroadcastPrivateshowLoginList>(entity =>
        {
            entity.HasKey(e => e.UprivateShowLoginId).HasName("PK_TLKN_USER_BROADCAST_PRIVATESHOW_LOGIN");

            entity.ToTable("TLKN_USER_BROADCAST_PRIVATESHOW_LOGIN_LIST");

            entity.Property(e => e.UprivateShowLoginId).HasColumnName("UPrivateShowLoginID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'dating')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsGuest).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsLogin).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PrivateShowId).HasColumnName("PrivateShowID");
            entity.Property(e => e.PrivateShowInviteId).HasColumnName("PrivateShowInviteID");
            entity.Property(e => e.PrivateShowSessionId).HasColumnName("PrivateShowSessionID");
            entity.Property(e => e.PrivateShowStatus).HasDefaultValueSql("(N'initial')");
            entity.Property(e => e.PrivateShowTicketId).HasColumnName("PrivateShowTicketID");
            entity.Property(e => e.PrivateShowTokenId).HasColumnName("PrivateShowTokenID");
            entity.Property(e => e.PrivateShowVideoId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PrivateShowVideoID");
            entity.Property(e => e.PrivateShowVideoTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PrivateShowVideoTokenID");
            entity.Property(e => e.ResetDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserRegisterDate).HasColumnType("smalldatetime");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.UserStatus).HasDefaultValueSql("(N'offline')");
        });

        modelBuilder.Entity<TlknUserBroadcastPrivateshowMessageList>(entity =>
        {
            entity.HasKey(e => e.UprivateShowMessageId).HasName("PK_TLKN_USER_BROADCAST_PRIVATESHOW_MESSAGE");

            entity.ToTable("TLKN_USER_BROADCAST_PRIVATESHOW_MESSAGE_LIST");

            entity.Property(e => e.UprivateShowMessageId).HasColumnName("UPrivateShowMessageID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FileId).HasColumnName("FileID");
            entity.Property(e => e.FileIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.GroupType).HasDefaultValueSql("(N'private')");
            entity.Property(e => e.ImageDefaultServerId).HasColumnName("ImageDefaultServerID");
            entity.Property(e => e.ImageDefaultServerUrl).HasColumnName("ImageDefaultServerURL");
            entity.Property(e => e.ImageFromMobileNumberId).HasColumnName("ImageFromMobileNumberID");
            entity.Property(e => e.ImageFromUserId).HasColumnName("ImageFromUserID");
            entity.Property(e => e.ImageIsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageIsLoading).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageIsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.ImageThumServerUrl).HasColumnName("ImageThumServerURL");
            entity.Property(e => e.ImageToMobileNumberId).HasColumnName("ImageToMobileNumberID");
            entity.Property(e => e.ImageToUserId).HasColumnName("ImageToUserID");
            entity.Property(e => e.InviteOwnerMobileNumberId).HasColumnName("InviteOwnerMobileNumberID");
            entity.Property(e => e.InviteOwnerUserId).HasColumnName("InviteOwnerUserID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsCreateNewChatLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDelivered).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsHistoryLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNewMessage).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSessionClosedLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsShareLocationAskRemoteEnable).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSpaceLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSubjectLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.LocationCountryFlagUrl).HasColumnName("LocationCountryFlagURL");
            entity.Property(e => e.LocationRequestFromRemoteUserId).HasColumnName("LocationRequestFromRemoteUserID");
            entity.Property(e => e.LocationRequestToRemoteUserId).HasColumnName("LocationRequestToRemoteUserID");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PrivateShowId).HasColumnName("PrivateShowID");
            entity.Property(e => e.PrivateShowTicketId).HasColumnName("PrivateShowTicketID");
            entity.Property(e => e.PrivateShowTokenId).HasColumnName("PrivateShowTokenID");
            entity.Property(e => e.PrivateShowVideoId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PrivateShowVideoID");
            entity.Property(e => e.PrivateShowVideoTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PrivateShowVideoTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowId1).HasColumnName("ScreenChatShowID1");
            entity.Property(e => e.ScreenChatShowId2).HasColumnName("ScreenChatShowID2");
            entity.Property(e => e.ScreenChatShowId3).HasColumnName("ScreenChatShowID3");
            entity.Property(e => e.ScreenChatShowId4).HasColumnName("ScreenChatShowID4");
            entity.Property(e => e.ScreenChatShowId5).HasColumnName("ScreenChatShowID5");
            entity.Property(e => e.ScreenChatShowId6).HasColumnName("ScreenChatShowID6");
            entity.Property(e => e.ScreenChatShowId7).HasColumnName("ScreenChatShowID7");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.StaticMapUrl).HasColumnName("StaticMapURL");
            entity.Property(e => e.SuggestContactListFromRemoteUserId).HasColumnName("SuggestContactListFromRemoteUserID");
            entity.Property(e => e.SuggestContactListMobileNumberId).HasColumnName("SuggestContactListMobileNumberID");
            entity.Property(e => e.SuggestContactListToRemoteUserId).HasColumnName("SuggestContactListToRemoteUserID");
            entity.Property(e => e.SuggestContactListUserId).HasColumnName("SuggestContactListUserID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDateTimeUtc)
                .HasColumnType("smalldatetime")
                .HasColumnName("UploadDateTimeUTC");
            entity.Property(e => e.UploadDateUtc)
                .HasColumnType("smalldatetime")
                .HasColumnName("UploadDateUTC");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadDayUtc)
                .HasColumnType("money")
                .HasColumnName("UploadDayUTC");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadMonthUtc).HasColumnName("UploadMonthUTC");
            entity.Property(e => e.UploadTimeUtc).HasColumnName("UploadTimeUTC");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UploadYearUtc).HasColumnName("UploadYearUTC");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.VideoDefaultServerId).HasColumnName("VideoDefaultServerID");
            entity.Property(e => e.VideoDefaultServerUrl).HasColumnName("VideoDefaultServerURL");
            entity.Property(e => e.VideoFromMobileNumberId).HasColumnName("VideoFromMobileNumberID");
            entity.Property(e => e.VideoFromUserId).HasColumnName("VideoFromUserID");
            entity.Property(e => e.VideoIsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoIsLoading).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoIsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.VideoShowInviteId).HasColumnName("VideoShowInviteID");
            entity.Property(e => e.VideoThumServerUrl).HasColumnName("VideoThumServerURL");
            entity.Property(e => e.VideoToMobileNumberId).HasColumnName("VideoToMobileNumberID");
            entity.Property(e => e.VideoToUserId).HasColumnName("VideoToUserID");
            entity.Property(e => e.VoiceDefaultServerId).HasColumnName("VoiceDefaultServerID");
            entity.Property(e => e.VoiceDefaultServerUrl).HasColumnName("VoiceDefaultServerURL");
            entity.Property(e => e.VoiceFromMobileNumberId).HasColumnName("VoiceFromMobileNumberID");
            entity.Property(e => e.VoiceFromUserId).HasColumnName("VoiceFromUserID");
            entity.Property(e => e.VoiceIsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.VoiceIsLoading).HasDefaultValueSql("((0))");
            entity.Property(e => e.VoiceIsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.VoiceIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.VoiceShowInviteId).HasColumnName("VoiceShowInviteID");
            entity.Property(e => e.VoiceThumServerUrl).HasColumnName("VoiceThumServerURL");
            entity.Property(e => e.VoiceToMobileNumberId).HasColumnName("VoiceToMobileNumberID");
            entity.Property(e => e.VoiceToUserId).HasColumnName("VoiceToUserID");
        });

        modelBuilder.Entity<TlknUserBroadcastPrivateshowOnlineList>(entity =>
        {
            entity.HasKey(e => e.UprivateShowLiveId);

            entity.ToTable("TLKN_USER_BROADCAST_PRIVATESHOW_ONLINE_LIST");

            entity.Property(e => e.UprivateShowLiveId).HasColumnName("UPrivateShowLiveID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsScreenShowClose).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsScreenShowEnd).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsScreenShowInitiate).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsScreenShowOpen).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsScreenShowPending).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsScreenShowSpend).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsScreenShowStart).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PrivateShowId).HasColumnName("PrivateShowID");
            entity.Property(e => e.PrivateShowSessionId).HasColumnName("PrivateShowSessionID");
            entity.Property(e => e.PrivateShowTicketId).HasColumnName("PrivateShowTicketID");
            entity.Property(e => e.PrivateShowTokenId).HasColumnName("PrivateShowTokenID");
            entity.Property(e => e.PrivateShowVideoId).HasColumnName("PrivateShowVideoID");
            entity.Property(e => e.PrivateShowVideoTokenId).HasColumnName("PrivateShowVideoTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenShowCloseTime).HasColumnType("smalldatetime");
            entity.Property(e => e.ScreenShowEndTime).HasColumnType("smalldatetime");
            entity.Property(e => e.ScreenShowInitiateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.ScreenShowOpenTime).HasColumnType("smalldatetime");
            entity.Property(e => e.ScreenShowPendingTime).HasColumnType("smalldatetime");
            entity.Property(e => e.ScreenShowSpendTime).HasColumnType("smalldatetime");
            entity.Property(e => e.ScreenShowStartTime).HasColumnType("smalldatetime");
            entity.Property(e => e.ScreenShowTimeSpendHour).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.ScreenShowTimeSpendMinute).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.ScreenShowTimeSpendSecond).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.TimeCountConsume).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountEnd).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountFreeLeft).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountFreeTotal).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountStart).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TodayDay).HasDefaultValueSql("((0))");
            entity.Property(e => e.TodayMonth).HasDefaultValueSql("((0))");
            entity.Property(e => e.TodayYear).HasDefaultValueSql("((0))");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserBroadcastPrivateshowRequestList>(entity =>
        {
            entity.HasKey(e => e.UprivateShowRequestId).HasName("PK_TLKN_USER_BROADCAST_PRIVATESHOW_REQUEST");

            entity.ToTable("TLKN_USER_BROADCAST_PRIVATESHOW_REQUEST_LIST");

            entity.Property(e => e.UprivateShowRequestId).HasColumnName("UPrivateShowRequestID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsGuest).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsLogin).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PrivateShowId).HasColumnName("PrivateShowID");
            entity.Property(e => e.PrivateShowInviteId).HasColumnName("PrivateShowInviteID");
            entity.Property(e => e.PrivateShowSessionId).HasColumnName("PrivateShowSessionID");
            entity.Property(e => e.PrivateShowStatus).HasDefaultValueSql("(N'initial')");
            entity.Property(e => e.PrivateShowTicketId).HasColumnName("PrivateShowTicketID");
            entity.Property(e => e.PrivateShowTokenId).HasColumnName("PrivateShowTokenID");
            entity.Property(e => e.PrivateShowVideoId).HasColumnName("PrivateShowVideoID");
            entity.Property(e => e.PrivateShowVideoTokenId).HasColumnName("PrivateShowVideoTokenID");
            entity.Property(e => e.ResetDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserRegisterDate).HasColumnType("smalldatetime");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.UserStatus).HasDefaultValueSql("(N'offline')");
        });

        modelBuilder.Entity<TlknUserBroadcastPrivateshowSessionTicketList>(entity =>
        {
            entity.HasKey(e => e.UprivateShowSessionTicketId).HasName("PK_TLKN_USER_BROADCAST_PRIVATESHOW_SESSION_TICKET");

            entity.ToTable("TLKN_USER_BROADCAST_PRIVATESHOW_SESSION_TICKET_LIST");

            entity.Property(e => e.UprivateShowSessionTicketId).HasColumnName("UPrivateShowSessionTicketID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsPrivateShowMaxInviteCount).HasDefaultValueSql("((0))");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PrivateShowId).HasColumnName("PrivateShowID");
            entity.Property(e => e.PrivateShowSessionId).HasColumnName("PrivateShowSessionID");
            entity.Property(e => e.PrivateShowTicketId).HasColumnName("PrivateShowTicketID");
            entity.Property(e => e.PrivateShowTokenId).HasColumnName("PrivateShowTokenID");
            entity.Property(e => e.PrivateShowVideoId).HasColumnName("PrivateShowVideoID");
            entity.Property(e => e.PrivateShowVideoTokenId).HasColumnName("PrivateShowVideoTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenId).HasColumnName("ScreenID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserBroadcastPrivateshowTimeConsume>(entity =>
        {
            entity.HasKey(e => e.UprivateShowTimeId);

            entity.ToTable("TLKN_USER_BROADCAST_PRIVATESHOW_TIME_CONSUME");

            entity.Property(e => e.UprivateShowTimeId).HasColumnName("UPrivateShowTimeID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsOpen).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsPrivateShowClose).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowEnd).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowInitiate).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowOpen).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowPending).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowSpend).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowStart).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PrivateShowCloseTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowEndTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowId).HasColumnName("PrivateShowID");
            entity.Property(e => e.PrivateShowInitiateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowOpenTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowPendingTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowSessionId).HasColumnName("PrivateShowSessionID");
            entity.Property(e => e.PrivateShowSpendTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowStartTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowTicketId).HasColumnName("PrivateShowTicketID");
            entity.Property(e => e.PrivateShowTimeSpendHour).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.PrivateShowTimeSpendMinute).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.PrivateShowTimeSpendSecond).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.PrivateShowTokenId).HasColumnName("PrivateShowTokenID");
            entity.Property(e => e.PrivateShowVideoId).HasColumnName("PrivateShowVideoID");
            entity.Property(e => e.PrivateShowVideoTokenId).HasColumnName("PrivateShowVideoTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.TimeCountConsume).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountEnd).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountFreeLeft).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountFreeTotal).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountLeft1).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountStart).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountTotal1).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TodayDay).HasDefaultValueSql("((0))");
            entity.Property(e => e.TodayMonth).HasDefaultValueSql("((0))");
            entity.Property(e => e.TodayYear).HasDefaultValueSql("((0))");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserBroadcastPrivateshowVideoList>(entity =>
        {
            entity.HasKey(e => e.UprivateShowVideoId).HasName("PK_TLKN_USER_BROADCAST_PRIVATESHOW_VIDEO_LIST_1");

            entity.ToTable("TLKN_USER_BROADCAST_PRIVATESHOW_VIDEO_LIST");

            entity.Property(e => e.UprivateShowVideoId).HasColumnName("UPrivateShowVideoID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.EndDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowClose).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowEnd).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowInitiate).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowOpen).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowPending).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowSpend).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowStart).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPublish).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVideoSaveLive).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVideoTopFirstLive).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PrivateShowCloseTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowEndTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowId).HasColumnName("PrivateShowID");
            entity.Property(e => e.PrivateShowInitiateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowOpenTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowPendingTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowSessionId).HasColumnName("PrivateShowSessionID");
            entity.Property(e => e.PrivateShowSpendTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowStartTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowTicketId).HasColumnName("PrivateShowTicketID");
            entity.Property(e => e.PrivateShowTimeSpendHour).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.PrivateShowTimeSpendMinute).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.PrivateShowTimeSpendSecond).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.PrivateShowTokenId).HasColumnName("PrivateShowTokenID");
            entity.Property(e => e.PrivateShowVideoId).HasColumnName("PrivateShowVideoID");
            entity.Property(e => e.PrivateShowVideoTokenId).HasColumnName("PrivateShowVideoTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.StartDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.VideoDuration).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoTopFirstLiveOrder)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
        });

        modelBuilder.Entity<TlknUserBroadcastPrivateshowVideoTicketList>(entity =>
        {
            entity.HasKey(e => e.UprivateShowVideoTicketId).HasName("PK_TLKN_USER_BROADCAST_PRIVATESHOW_VIDEO_TICKET");

            entity.ToTable("TLKN_USER_BROADCAST_PRIVATESHOW_VIDEO_TICKET_LIST");

            entity.Property(e => e.UprivateShowVideoTicketId).HasColumnName("UPrivateShowVideoTicketID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PrivateShowId).HasColumnName("PrivateShowID");
            entity.Property(e => e.PrivateShowTicketId).HasColumnName("PrivateShowTicketID");
            entity.Property(e => e.PrivateShowTokenId).HasColumnName("PrivateShowTokenID");
            entity.Property(e => e.PrivateShowVideoId).HasColumnName("PrivateShowVideoID");
            entity.Property(e => e.PrivateShowVideoTokenId).HasColumnName("PrivateShowVideoTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserChatCss>(entity =>
        {
            entity.HasKey(e => e.StyleId);

            entity.ToTable("TLKN_USER_CHAT_CSS");

            entity.Property(e => e.StyleId).HasColumnName("StyleID");
            entity.Property(e => e.CssBackgroundImageUrl).HasColumnName("CssBackgroundImageURL");
            entity.Property(e => e.CssBackgroundMrourl).HasColumnName("CssBackgroundMROURL");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsCssBackgroundImageUrl).HasColumnName("IsCssBackgroundImageURL");
            entity.Property(e => e.IsCssBackgroundMro)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IsCssBackgroundMRO");
            entity.Property(e => e.IsCssDefaultLinkBold).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsCssDefaultLinkItalic).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsCssDefaultTextBold).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsCssDefaultTextItalic).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsCssHeaderLinkBold).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsCssHeaderLinkItalic).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsCssHeaderTextBold).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsCssHeaderTextItalic).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoungeId).HasColumnName("LoungeID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserDatingMatchEventList>(entity =>
        {
            entity.HasKey(e => e.EventSoundId).HasName("PK_TLKN_USER_DATING_MATCH_EVENT");

            entity.ToTable("TLKN_USER_DATING_MATCH_EVENT_LIST");

            entity.Property(e => e.EventSoundId).HasColumnName("EventSoundID");
            entity.Property(e => e.EventDateTimeEnd).HasColumnType("smalldatetime");
            entity.Property(e => e.EventDateTimeReset).HasColumnType("smalldatetime");
            entity.Property(e => e.EventDateTimeStart)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.EventTimeEnd).HasColumnType("smalldatetime");
            entity.Property(e => e.EventTimePending).HasColumnType("smalldatetime");
            entity.Property(e => e.EventTimeReset).HasColumnType("smalldatetime");
            entity.Property(e => e.EventTimeStart)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDateTimeMilliSecEnd).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDateTimeMilliSecReset).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDateTimeMilliSecStart).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserDatingMatchLikeList>(entity =>
        {
            entity.HasKey(e => e.UmatchLikeId).HasName("PK_TLKN_USER_DATING_MATCH_LIST_1");

            entity.ToTable("TLKN_USER_DATING_MATCH_LIKE_LIST");

            entity.Property(e => e.UmatchLikeId).HasColumnName("UMatchLikeID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.DatingMatchEventTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DatingMatchEventTokenID");
            entity.Property(e => e.EventDateTimeEnd).HasColumnType("smalldatetime");
            entity.Property(e => e.EventDateTimeReset).HasColumnType("smalldatetime");
            entity.Property(e => e.EventDateTimeStart)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingMatchConnect).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMatch).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsNewOwner).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNewRemote).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystemUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsViewOwner).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsViewRemote).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisibleOwner).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisibleRemote).HasDefaultValueSql("((1))");
            entity.Property(e => e.MatchLikeStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDateTimeMilliSecEnd).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDateTimeMilliSecReset).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDateTimeMilliSecStart).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserMobileNumberId).HasColumnName("UserMobileNumberID");
        });

        modelBuilder.Entity<TlknUserDatingMatchMutualList>(entity =>
        {
            entity.HasKey(e => e.UmatchMutualId);

            entity.ToTable("TLKN_USER_DATING_MATCH_MUTUAL_LIST");

            entity.Property(e => e.UmatchMutualId).HasColumnName("UMatchMutualID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.DatingMatchEventTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DatingMatchEventTokenID");
            entity.Property(e => e.EventDateTimeEnd).HasColumnType("smalldatetime");
            entity.Property(e => e.EventDateTimeReset).HasColumnType("smalldatetime");
            entity.Property(e => e.EventDateTimeStart)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingMatchConnect).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMatch).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsNewOwner).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNewRemote).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystemUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsViewOwner).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsViewRemote).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisibleOwner).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisibleRemote).HasDefaultValueSql("((1))");
            entity.Property(e => e.MatchLikeStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDateTimeMilliSecEnd).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDateTimeMilliSecReset).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDateTimeMilliSecStart).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserMobileNumberId).HasColumnName("UserMobileNumberID");
        });

        modelBuilder.Entity<TlknUserDatingThinglikeCategory>(entity =>
        {
            entity.HasKey(e => e.CategoryId);

            entity.ToTable("TLKN_USER_DATING_THINGLIKE_CATEGORY");

            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.CategoryOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserDeviceList>(entity =>
        {
            entity.HasKey(e => e.UdeviceId).HasName("PK_TLKN_USER_MOBILE_NUMBER");

            entity.ToTable("TLKN_USER_DEVICE_LIST");

            entity.Property(e => e.UdeviceId).HasColumnName("UDeviceID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.AndroidId).HasColumnName("AndroidID");
            entity.Property(e => e.CellIdentityGsm).HasColumnName("CellIdentityGSM");
            entity.Property(e => e.CountryIsocode).HasColumnName("CountryISOCode");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.DeviceId).HasColumnName("DeviceID");
            entity.Property(e => e.Gcmid).HasColumnName("GCMID");
            entity.Property(e => e.GroupIdlevel1).HasColumnName("GroupIDLevel1");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDeviceOnRegister).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MmsUaprofUrl).HasColumnName("MmsUAProfUrl");
            entity.Property(e => e.MobileNumberFormatUs).HasColumnName("MobileNumberFormatUS");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.MobileNumberOutUs).HasColumnName("MobileNumberOutUS");
            entity.Property(e => e.NetworkCountryIso).HasColumnName("NetworkCountryISO");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.SimcountryIso).HasColumnName("SIMCountryISO");
            entity.Property(e => e.Simoperator).HasColumnName("SIMOperator");
            entity.Property(e => e.SimserialNumber).HasColumnName("SIMSerialNumber");
            entity.Property(e => e.Simstate).HasColumnName("SIMState");
            entity.Property(e => e.SubscriberId).HasColumnName("SubscriberID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserEventInvitationList>(entity =>
        {
            entity.HasKey(e => e.UeventInviteId);

            entity.ToTable("TLKN_USER_EVENT_INVITATION_LIST");

            entity.Property(e => e.UeventInviteId).HasColumnName("UEventInviteID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.EventDateStringFormat).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.EventDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.EventDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.EventEndDateStringFormat).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.EventEndDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.EventEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.EventEndGmtzone).HasColumnName("EventEndGMTZone");
            entity.Property(e => e.EventEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.EventEndTimeStringFormat).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.EventEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.EventGmtzone).HasColumnName("EventGMTZone");
            entity.Property(e => e.EventId).HasColumnName("EventID");
            entity.Property(e => e.EventInviteTokenId).HasColumnName("EventInviteTokenID");
            entity.Property(e => e.EventInviteUrl).HasColumnName("EventInviteURL");
            entity.Property(e => e.EventMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.EventStartDateStringFormat).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.EventStartDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.EventStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.EventStartGmtzone).HasColumnName("EventStartGMTZone");
            entity.Property(e => e.EventStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.EventStartTimeStringFormat).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.EventStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.EventTimeStringFormat).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.EventTokenId).HasColumnName("EventTokenID");
            entity.Property(e => e.EventYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromTlknUserId).HasColumnName("FromTlknUserID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsOpen).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisibleOwner).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisibleRemote).HasDefaultValueSql("((1))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.StartDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToTlknUserId).HasColumnName("ToTlknUserID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.Event).WithMany(p => p.TlknUserEventInvitationLists)
                .HasForeignKey(d => d.EventId)
                .HasConstraintName("FK_TLKN_USER_EVENT_INVITATION_LIST_TLKN_USER_EVENT_LIST");
        });

        modelBuilder.Entity<TlknUserEventList>(entity =>
        {
            entity.HasKey(e => e.EventId);

            entity.ToTable("TLKN_USER_EVENT_LIST");

            entity.Property(e => e.EventId).HasColumnName("EventID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.EventCategoryId).HasColumnName("EventCategoryID");
            entity.Property(e => e.EventDateStringFormat).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.EventDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.EventDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.EventEndDateStringFormat).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.EventEndDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.EventEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.EventEndGmtzone).HasColumnName("EventEndGMTZone");
            entity.Property(e => e.EventEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.EventEndTimeStringFormat).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.EventEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.EventGmtzone).HasColumnName("EventGMTZone");
            entity.Property(e => e.EventImageId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("EventImageID");
            entity.Property(e => e.EventImageUrl)
                .HasDefaultValueSql("((0))")
                .HasColumnName("EventImageURL");
            entity.Property(e => e.EventInviteStatusOwner).HasDefaultValueSql("(N'approved')");
            entity.Property(e => e.EventMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.EventOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.EventStartDateStringFormat).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.EventStartDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.EventStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.EventStartGmtzone).HasColumnName("EventStartGMTZone");
            entity.Property(e => e.EventStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.EventStartTimeStringFormat).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.EventStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.EventStaticMapUrl).HasColumnName("EventStaticMapURL");
            entity.Property(e => e.EventTimeStringFormat).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.EventTokenId).HasColumnName("EventTokenID");
            entity.Property(e => e.EventYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsEventAllDay).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsEventPublic).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsEventReminder).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsEventRepeat).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.StreetLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserFileAction>(entity =>
        {
            entity.HasKey(e => e.UviewId).HasName("PK_TLKN_USER_FILE_VIEWER");

            entity.ToTable("TLKN_USER_FILE_ACTION");

            entity.Property(e => e.UviewId).HasColumnName("UViewID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.FileId).HasColumnName("FileID");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingMatchConnect).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMatch).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MatchLikeStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserMobileNumberId).HasColumnName("UserMobileNumberID");
        });

        modelBuilder.Entity<TlknUserFileRemoteList>(entity =>
        {
            entity.HasKey(e => e.UremoteId);

            entity.ToTable("TLKN_USER_FILE_REMOTE_LIST");

            entity.Property(e => e.UremoteId).HasColumnName("URemoteID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.FileId).HasColumnName("FileID");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingMatchConnect).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMatch).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MatchLikeStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserMobileNumberId).HasColumnName("UserMobileNumberID");
        });

        modelBuilder.Entity<TlknUserForumCategoryList>(entity =>
        {
            entity.HasKey(e => e.ForumCategoryId).HasName("PK_TLKN_FORUM_CATEGORY_LIST");

            entity.ToTable("TLKN_USER_FORUM_CATEGORY_LIST");

            entity.Property(e => e.ForumCategoryId).HasColumnName("ForumCategoryID");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.ForumCategoryOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.ForumCategoryTokenId).HasColumnName("ForumCategoryTokenID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsDatingAccount).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsPersonalAccount).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeUtc)
                .HasColumnType("smalldatetime")
                .HasColumnName("UploadDateTimeUTC");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserForumCommentEventList>(entity =>
        {
            entity.HasKey(e => e.UcommentEventId);

            entity.ToTable("TLKN_USER_FORUM_COMMENT_EVENT_LIST");

            entity.Property(e => e.UcommentEventId).HasColumnName("UCommentEventID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.CommentId).HasColumnName("CommentID");
            entity.Property(e => e.CommentTokenId).HasColumnName("CommentTokenID");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.ForumId).HasColumnName("ForumID");
            entity.Property(e => e.ForumTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ForumTokenID");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingMatchConnect).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMatch).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MatchLikeStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.RemoteMobileNumberId).HasColumnName("RemoteMobileNumberID");
            entity.Property(e => e.RemoteUserId).HasColumnName("RemoteUserID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserForumCommentList>(entity =>
        {
            entity.HasKey(e => e.CommentId);

            entity.ToTable("TLKN_USER_FORUM_COMMENT_LIST");

            entity.Property(e => e.CommentId).HasColumnName("CommentID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.CommentCode).HasDefaultValueSql("(N'text')");
            entity.Property(e => e.CommentTextCss)
                .HasDefaultValueSql("(N'left')")
                .HasColumnName("CommentTextCSS");
            entity.Property(e => e.CommentTokenId).HasColumnName("CommentTokenID");
            entity.Property(e => e.CommentType).HasDefaultValueSql("(N'text')");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FileDuration).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.FileId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("FileID");
            entity.Property(e => e.FileUrl)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("FileURL");
            entity.Property(e => e.ForumId).HasColumnName("ForumID");
            entity.Property(e => e.ForumTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ForumTokenID");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAnswer).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingMatchConnect).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMatch).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MatchLikeStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.RemoteMobileNumberId).HasColumnName("RemoteMobileNumberID");
            entity.Property(e => e.RemoteUserId).HasColumnName("RemoteUserID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UforumId).HasColumnName("UForumID");
            entity.Property(e => e.UforumTokenId).HasColumnName("UForumTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDateTimeUtc)
                .HasColumnType("smalldatetime")
                .HasColumnName("UploadDateTimeUTC");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadTime).HasDefaultValueSql("(N'00:00')");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserForumCommentReplyEventList>(entity =>
        {
            entity.HasKey(e => e.UreplyEventId).HasName("PK_TLKN_USER_Forum_REPLY_EVENT_LIST");

            entity.ToTable("TLKN_USER_FORUM_COMMENT_REPLY_EVENT_LIST");

            entity.Property(e => e.UreplyEventId).HasColumnName("UReplyEventID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.CommentId).HasColumnName("CommentID");
            entity.Property(e => e.CommentTokenId).HasColumnName("CommentTokenID");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.ForumId).HasColumnName("ForumID");
            entity.Property(e => e.ForumTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ForumTokenID");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingMatchConnect).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMatch).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MatchLikeStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.RemoteMobileNumberId).HasColumnName("RemoteMobileNumberID");
            entity.Property(e => e.RemoteUserId).HasColumnName("RemoteUserID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.ReplyId).HasColumnName("ReplyID");
            entity.Property(e => e.ReplyTokenId).HasColumnName("ReplyTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.TlknUserForumCommentReplyEventLists)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_TLKN_USER_Forum_REPLY_EVENT_LIST_TLKN_USER");
        });

        modelBuilder.Entity<TlknUserForumCommentReplyList>(entity =>
        {
            entity.HasKey(e => e.ReplyId);

            entity.ToTable("TLKN_USER_FORUM_COMMENT_REPLY_LIST");

            entity.Property(e => e.ReplyId).HasColumnName("ReplyID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.CommentId).HasColumnName("CommentID");
            entity.Property(e => e.CommentTokenId).HasColumnName("CommentTokenID");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FileDuration).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.FileId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("FileID");
            entity.Property(e => e.FileUrl)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("FileURL");
            entity.Property(e => e.ForumId).HasColumnName("ForumID");
            entity.Property(e => e.ForumTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ForumTokenID");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAnswer).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingMatchConnect).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMatch).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MatchLikeStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.RemoteMobileNumberId).HasColumnName("RemoteMobileNumberID");
            entity.Property(e => e.RemoteUserId).HasColumnName("RemoteUserID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.ReplyCode).HasDefaultValueSql("(N'text')");
            entity.Property(e => e.ReplyTextCss)
                .HasDefaultValueSql("(N'left')")
                .HasColumnName("ReplyTextCSS");
            entity.Property(e => e.ReplyTokenId)
                .HasDefaultValueSql("(N'left')")
                .HasColumnName("ReplyTokenID");
            entity.Property(e => e.ReplyType).HasDefaultValueSql("(N'text')");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDateTimeUtc)
                .HasColumnType("smalldatetime")
                .HasColumnName("UploadDateTimeUTC");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadTime).HasDefaultValueSql("(N'00:00')");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserForumEventList>(entity =>
        {
            entity.HasKey(e => e.UforumEventId);

            entity.ToTable("TLKN_USER_FORUM_EVENT_LIST");

            entity.Property(e => e.UforumEventId).HasColumnName("UForumEventID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.ForumId).HasColumnName("ForumID");
            entity.Property(e => e.ForumTokenId).HasColumnName("ForumTokenID");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingMatchConnect).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMatch).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MatchLikeStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.RemoteMobileNumberId).HasColumnName("RemoteMobileNumberID");
            entity.Property(e => e.RemoteUserId).HasColumnName("RemoteUserID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UforumTokenId).HasColumnName("UForumTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserForumMessageList>(entity =>
        {
            entity.HasKey(e => e.ForumId).HasName("PK_TLKN_USER_ForumMessage");

            entity.ToTable("TLKN_USER_FORUM_MESSAGE_LIST");

            entity.Property(e => e.ForumId).HasColumnName("ForumID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.ForumCategoryCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.ForumCategoryTitle).HasDefaultValueSql("((0))");
            entity.Property(e => e.ForumTokenId).HasColumnName("ForumTokenID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAnswer).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UforumTokenId).HasColumnName("UForumTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserForumMessageViewList>(entity =>
        {
            entity.HasKey(e => e.UviewForumId);

            entity.ToTable("TLKN_USER_FORUM_MESSAGE_VIEW_LIST");

            entity.Property(e => e.UviewForumId).HasColumnName("UViewForumID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.ForumCategoryCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.ForumCategoryTitle).HasDefaultValueSql("((0))");
            entity.Property(e => e.ForumTokenId).HasColumnName("ForumTokenID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAnswer).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UforumTokenId).HasColumnName("UForumTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserForumMyPinMessageList>(entity =>
        {
            entity.HasKey(e => e.UmyPinForumId);

            entity.ToTable("TLKN_USER_FORUM_MY_PIN_MESSAGE_LIST");

            entity.Property(e => e.UmyPinForumId).HasColumnName("UMyPinForumID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.ForumCategoryCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.ForumCategoryTitle).HasDefaultValueSql("((0))");
            entity.Property(e => e.ForumTokenId).HasColumnName("ForumTokenID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAnswer).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UforumTokenId).HasColumnName("UForumTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserForumMyPostMessageList>(entity =>
        {
            entity.HasKey(e => e.UmyPostForumId);

            entity.ToTable("TLKN_USER_FORUM_MY_POST_MESSAGE_LIST");

            entity.Property(e => e.UmyPostForumId).HasColumnName("UMyPostForumID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.ForumCategoryCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.ForumCategoryTitle).HasDefaultValueSql("((0))");
            entity.Property(e => e.ForumTokenId).HasColumnName("ForumTokenID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAnswer).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UforumTokenId).HasColumnName("UForumTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserForumQueryList>(entity =>
        {
            entity.HasKey(e => e.ForumQueryMessageId).HasName("PK_TLKN_USER_CONTACTUS");

            entity.ToTable("TLKN_USER_FORUM_QUERY_LIST");

            entity.Property(e => e.ForumQueryMessageId).HasColumnName("ForumQueryMessageID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsReply).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserFriend>(entity =>
        {
            entity.HasKey(e => e.UfriendId);

            entity.ToTable("TLKN_USER_FRIEND");

            entity.Property(e => e.UfriendId).HasColumnName("UFriendID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.DatingMatchEventTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DatingMatchEventTokenID");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingMatchConnect).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMatch).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsNewOwner).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNewRemote).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystemUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsViewOwner).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsViewRemote).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisibleOwner).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisibleRemote).HasDefaultValueSql("((1))");
            entity.Property(e => e.MatchLikeStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserMobileNumberId).HasColumnName("UserMobileNumberID");
        });

        modelBuilder.Entity<TlknUserFriendTemp>(entity =>
        {
            entity.HasKey(e => e.UfriendTempId);

            entity.ToTable("TLKN_USER_FRIEND_TEMP");

            entity.Property(e => e.UfriendTempId).HasColumnName("UFriendTempID");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserMobileNumberId).HasColumnName("UserMobileNumberID");
        });

        modelBuilder.Entity<TlknUserGalleryImageList>(entity =>
        {
            entity.HasKey(e => e.UgalleryImageId).HasName("PK_TLKN_USER_GALLERY_IMAGE_LIST_1");

            entity.ToTable("TLKN_USER_GALLERY_IMAGE_LIST");

            entity.Property(e => e.UgalleryImageId).HasColumnName("UGalleryImageID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.GalleryId).HasColumnName("GalleryID");
            entity.Property(e => e.ImageLargeUrl).HasColumnName("ImageLargeURL");
            entity.Property(e => e.ImageMidUrl).HasColumnName("ImageMidURL");
            entity.Property(e => e.ImageSmallAwayUrl).HasColumnName("ImageSmallAwayURL");
            entity.Property(e => e.ImageSmallLiveUrl).HasColumnName("ImageSmallLiveURL");
            entity.Property(e => e.ImageSmallUrl).HasColumnName("ImageSmallURL");
            entity.Property(e => e.ImageTokenId).HasColumnName("ImageTokenID");
            entity.Property(e => e.ImageUrl).HasColumnName("ImageURL");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonalAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsProfile).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystemUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserGalleryImageListx>(entity =>
        {
            entity.HasKey(e => e.ImageId).HasName("PK_TLKN_USER_GALLERY_IMAGE_LIST");

            entity.ToTable("TLKN_USER_GALLERY_IMAGE_LISTX");

            entity.Property(e => e.ImageId).HasColumnName("ImageID");
            entity.Property(e => e.GalleryId).HasColumnName("GalleryID");
            entity.Property(e => e.ImageLargeUrl).HasColumnName("ImageLargeURL");
            entity.Property(e => e.ImageMidUrl).HasColumnName("ImageMidURL");
            entity.Property(e => e.ImageSmallAwayUrl).HasColumnName("ImageSmallAwayURL");
            entity.Property(e => e.ImageSmallLiveUrl).HasColumnName("ImageSmallLiveURL");
            entity.Property(e => e.ImageSmallUrl).HasColumnName("ImageSmallURL");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDefault).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsProfile).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.MobileNumber).WithMany(p => p.TlknUserGalleryImageListxes)
                .HasForeignKey(d => d.MobileNumberId)
                .HasConstraintName("FK_TLKN_USER_GALLERY_IMAGE_LIST_TLKN_USER_MOBILE_NUMBER_LIST");

            entity.HasOne(d => d.User).WithMany(p => p.TlknUserGalleryImageListxes)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_TLKN_USER_GALLERY_IMAGE_LIST_TLKN_USER");
        });

        modelBuilder.Entity<TlknUserGalleryList>(entity =>
        {
            entity.HasKey(e => e.GalleryId);

            entity.ToTable("TLKN_USER_GALLERY_LIST");

            entity.Property(e => e.GalleryId).HasColumnName("GalleryID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ImageLargeUrl).HasColumnName("ImageLargeURL");
            entity.Property(e => e.ImageMidUrl).HasColumnName("ImageMidURL");
            entity.Property(e => e.ImageSmallUrl).HasColumnName("ImageSmallURL");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDefault).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserGiphyImageList>(entity =>
        {
            entity.HasKey(e => e.UgiphyImageId);

            entity.ToTable("TLKN_USER_GIPHY_IMAGE_LIST");

            entity.Property(e => e.UgiphyImageId).HasColumnName("UGiphyImageID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.GalleryId).HasColumnName("GalleryID");
            entity.Property(e => e.GiphyImageId).HasColumnName("GiphyImageID");
            entity.Property(e => e.GiphyImageTokenId).HasColumnName("GiphyImageTokenID");
            entity.Property(e => e.GiphyImageUrl).HasColumnName("GiphyImageURL");
            entity.Property(e => e.ImageLargeUrl).HasColumnName("ImageLargeURL");
            entity.Property(e => e.ImageMidUrl).HasColumnName("ImageMidURL");
            entity.Property(e => e.ImageSmallAwayUrl).HasColumnName("ImageSmallAwayURL");
            entity.Property(e => e.ImageSmallLiveUrl).HasColumnName("ImageSmallLiveURL");
            entity.Property(e => e.ImageSmallUrl).HasColumnName("ImageSmallURL");
            entity.Property(e => e.ImageTokenId).HasColumnName("ImageTokenID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonalAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsProfile).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystemUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserGroupFriend>(entity =>
        {
            entity.HasKey(e => e.UgroupId).HasName("PK_TLKN_USER_GROUP");

            entity.ToTable("TLKN_USER_GROUP_FRIEND");

            entity.Property(e => e.UgroupId).HasColumnName("UGroupID");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserGroupshow>(entity =>
        {
            entity.HasKey(e => e.UgroupShowId);

            entity.ToTable("TLKN_USER_GROUPSHOW");

            entity.Property(e => e.UgroupShowId).HasColumnName("UGroupShowID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FromTlknUserId).HasColumnName("FromTlknUserID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.GroupShowCloseTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowEndTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupShowID");
            entity.Property(e => e.GroupShowInitiateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowOpenTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowPendingTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowSessionId).HasColumnName("GroupShowSessionID");
            entity.Property(e => e.GroupShowSpendTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowStartTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowTimeSpendHour).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.GroupShowTimeSpendMinute).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.GroupShowTimeSpendSecond).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.GroupShowTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupShowTokenID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsGroupShowClose).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowEnd).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowInitiate).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowLoad).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowOpen).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowPending).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowSpend).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowStart).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenId).HasColumnName("ScreenID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TlknUserId).HasColumnName("TlknUserID");
            entity.Property(e => e.ToTlknUserId).HasColumnName("ToTlknUserID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserGroupshowArchive>(entity =>
        {
            entity.HasKey(e => e.ArchiveGroupShowId);

            entity.ToTable("TLKN_USER_GROUPSHOW_ARCHIVE");

            entity.Property(e => e.ArchiveGroupShowId).HasColumnName("ArchiveGroupShowID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.CamFmsurl).HasColumnName("CamFMSURL");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.GroupShowId).HasColumnName("GroupShowID");
            entity.Property(e => e.GroupShowSessionId).HasColumnName("GroupShowSessionID");
            entity.Property(e => e.GroupShowTicketId).HasColumnName("GroupShowTicketID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.MemberId).HasColumnName("MemberID");
            entity.Property(e => e.MemberSessionId).HasColumnName("MemberSessionID");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.ModelId).HasColumnName("ModelID");
            entity.Property(e => e.ModelSessionId).HasColumnName("ModelSessionID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserGroupshowCameraEvent>(entity =>
        {
            entity.HasKey(e => e.CameraEventId);

            entity.ToTable("TLKN_USER_GROUPSHOW_CAMERA_EVENT");

            entity.Property(e => e.CameraEventId).HasColumnName("CameraEventID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.CamFmsid).HasColumnName("CamFMSID");
            entity.Property(e => e.CamFmsurl).HasColumnName("CamFMSURL");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.GroupShowId).HasColumnName("GroupShowID");
            entity.Property(e => e.GroupShowInviteId).HasColumnName("GroupShowInviteID");
            entity.Property(e => e.GroupShowSessionId).HasColumnName("GroupShowSessionID");
            entity.Property(e => e.GroupShowTicketId).HasColumnName("GroupShowTicketID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsModelStudio).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.StudioId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("StudioID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserGroupshowFavorite>(entity =>
        {
            entity.HasKey(e => e.GroupShowFavoriteId);

            entity.ToTable("TLKN_USER_GROUPSHOW_FAVORITE");

            entity.Property(e => e.GroupShowFavoriteId).HasColumnName("GroupShowFavoriteID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.GroupShowId).HasColumnName("GroupShowID");
            entity.Property(e => e.GroupShowInviteId).HasColumnName("GroupShowInviteID");
            entity.Property(e => e.GroupShowSessionId).HasColumnName("GroupShowSessionID");
            entity.Property(e => e.GroupShowStatus).HasDefaultValueSql("(N'initial')");
            entity.Property(e => e.GroupShowTicketId).HasColumnName("GroupShowTicketID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsGuest).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsLogin).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.ResetDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserRegisterDate).HasColumnType("smalldatetime");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.UserStatus).HasDefaultValueSql("(N'offline')");

            entity.HasOne(d => d.MobileNumber).WithMany(p => p.TlknUserGroupshowFavorites)
                .HasForeignKey(d => d.MobileNumberId)
                .HasConstraintName("FK_TLKN_USER_GROUPSHOW_FAVORITE_TLKN_USER_MOBILE_NUMBER_LIST");
        });

        modelBuilder.Entity<TlknUserGroupshowInvitation>(entity =>
        {
            entity.HasKey(e => e.GroupShowInviteId);

            entity.ToTable("TLKN_USER_GROUPSHOW_INVITATION");

            entity.Property(e => e.GroupShowInviteId).HasColumnName("GroupShowInviteID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromTlknUserId).HasColumnName("FromTlknUserID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.GroupShowCloseTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowEndTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowId).HasColumnName("GroupShowID");
            entity.Property(e => e.GroupShowInitiateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowInviteReset).HasColumnType("datetime");
            entity.Property(e => e.GroupShowInviteStart).HasColumnType("datetime");
            entity.Property(e => e.GroupShowOpenTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowPendingTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowSessionId).HasColumnName("GroupShowSessionID");
            entity.Property(e => e.GroupShowSpendTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowStartTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowStatus).HasDefaultValueSql("(N'initial')");
            entity.Property(e => e.GroupShowTicketId).HasColumnName("GroupShowTicketID");
            entity.Property(e => e.GroupShowTimeSpendHour).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.GroupShowTimeSpendMinute).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.GroupShowTimeSpendSecond).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsGroupShowClose).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowEnd).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowInitiate).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowInviteOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowInviteShow).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowOpen).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowPending).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowSpend).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowStart).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TlknUserId).HasColumnName("TlknUserID");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToTlknUserId).HasColumnName("ToTlknUserID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserGroupshowLogin>(entity =>
        {
            entity.HasKey(e => e.LoginGroupShowRoomId);

            entity.ToTable("TLKN_USER_GROUPSHOW_LOGIN");

            entity.Property(e => e.LoginGroupShowRoomId).HasColumnName("LoginGroupShowRoomID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.GroupShowId).HasColumnName("GroupShowID");
            entity.Property(e => e.GroupShowInviteId).HasColumnName("GroupShowInviteID");
            entity.Property(e => e.GroupShowSessionId).HasColumnName("GroupShowSessionID");
            entity.Property(e => e.GroupShowStatus).HasDefaultValueSql("(N'initial')");
            entity.Property(e => e.GroupShowTicketId).HasColumnName("GroupShowTicketID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsGuest).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsLogin).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.ResetDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserRegisterDate).HasColumnType("smalldatetime");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.UserStatus).HasDefaultValueSql("(N'offline')");
        });

        modelBuilder.Entity<TlknUserGroupshowMessage>(entity =>
        {
            entity.HasKey(e => e.MsgGroupShowId);

            entity.ToTable("TLKN_USER_GROUPSHOW_MESSAGE");

            entity.Property(e => e.MsgGroupShowId).HasColumnName("MsgGroupShowID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FileId).HasColumnName("FileID");
            entity.Property(e => e.FileIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.GroupType).HasDefaultValueSql("(N'private')");
            entity.Property(e => e.ImageDefaultServerId).HasColumnName("ImageDefaultServerID");
            entity.Property(e => e.ImageDefaultServerUrl).HasColumnName("ImageDefaultServerURL");
            entity.Property(e => e.ImageFromMobileNumberId).HasColumnName("ImageFromMobileNumberID");
            entity.Property(e => e.ImageFromUserId).HasColumnName("ImageFromUserID");
            entity.Property(e => e.ImageIsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageIsLoading).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageIsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.ImageThumServerUrl).HasColumnName("ImageThumServerURL");
            entity.Property(e => e.ImageToMobileNumberId).HasColumnName("ImageToMobileNumberID");
            entity.Property(e => e.ImageToUserId).HasColumnName("ImageToUserID");
            entity.Property(e => e.InviteOwnerMobileNumberId).HasColumnName("InviteOwnerMobileNumberID");
            entity.Property(e => e.InviteOwnerUserId).HasColumnName("InviteOwnerUserID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsCreateNewChatLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDelivered).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsHistoryLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNewMessage).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSessionClosedLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsShareLocationAskRemoteEnable).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSpaceLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSubjectLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.LocationCountryFlagUrl).HasColumnName("LocationCountryFlagURL");
            entity.Property(e => e.LocationRequestFromRemoteUserId).HasColumnName("LocationRequestFromRemoteUserID");
            entity.Property(e => e.LocationRequestToRemoteUserId).HasColumnName("LocationRequestToRemoteUserID");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowId1).HasColumnName("ScreenChatShowID1");
            entity.Property(e => e.ScreenChatShowId2).HasColumnName("ScreenChatShowID2");
            entity.Property(e => e.ScreenChatShowId3).HasColumnName("ScreenChatShowID3");
            entity.Property(e => e.ScreenChatShowId4).HasColumnName("ScreenChatShowID4");
            entity.Property(e => e.ScreenChatShowId5).HasColumnName("ScreenChatShowID5");
            entity.Property(e => e.ScreenChatShowId6).HasColumnName("ScreenChatShowID6");
            entity.Property(e => e.ScreenChatShowId7).HasColumnName("ScreenChatShowID7");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.StaticMapUrl).HasColumnName("StaticMapURL");
            entity.Property(e => e.SuggestContactListFromRemoteUserId).HasColumnName("SuggestContactListFromRemoteUserID");
            entity.Property(e => e.SuggestContactListMobileNumberId).HasColumnName("SuggestContactListMobileNumberID");
            entity.Property(e => e.SuggestContactListToRemoteUserId).HasColumnName("SuggestContactListToRemoteUserID");
            entity.Property(e => e.SuggestContactListUserId).HasColumnName("SuggestContactListUserID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDateTimeUtc)
                .HasColumnType("smalldatetime")
                .HasColumnName("UploadDateTimeUTC");
            entity.Property(e => e.UploadDateUtc)
                .HasColumnType("smalldatetime")
                .HasColumnName("UploadDateUTC");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadDayUtc)
                .HasColumnType("money")
                .HasColumnName("UploadDayUTC");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadMonthUtc).HasColumnName("UploadMonthUTC");
            entity.Property(e => e.UploadTimeUtc).HasColumnName("UploadTimeUTC");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UploadYearUtc).HasColumnName("UploadYearUTC");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.VideoDefaultServerId).HasColumnName("VideoDefaultServerID");
            entity.Property(e => e.VideoDefaultServerUrl).HasColumnName("VideoDefaultServerURL");
            entity.Property(e => e.VideoFromMobileNumberId).HasColumnName("VideoFromMobileNumberID");
            entity.Property(e => e.VideoFromUserId).HasColumnName("VideoFromUserID");
            entity.Property(e => e.VideoIsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoIsLoading).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoIsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.VideoShowInviteId).HasColumnName("VideoShowInviteID");
            entity.Property(e => e.VideoThumServerUrl).HasColumnName("VideoThumServerURL");
            entity.Property(e => e.VideoToMobileNumberId).HasColumnName("VideoToMobileNumberID");
            entity.Property(e => e.VideoToUserId).HasColumnName("VideoToUserID");
            entity.Property(e => e.VoiceDefaultServerId).HasColumnName("VoiceDefaultServerID");
            entity.Property(e => e.VoiceDefaultServerUrl).HasColumnName("VoiceDefaultServerURL");
            entity.Property(e => e.VoiceFromMobileNumberId).HasColumnName("VoiceFromMobileNumberID");
            entity.Property(e => e.VoiceFromUserId).HasColumnName("VoiceFromUserID");
            entity.Property(e => e.VoiceIsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.VoiceIsLoading).HasDefaultValueSql("((0))");
            entity.Property(e => e.VoiceIsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.VoiceIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.VoiceShowInviteId).HasColumnName("VoiceShowInviteID");
            entity.Property(e => e.VoiceThumServerUrl).HasColumnName("VoiceThumServerURL");
            entity.Property(e => e.VoiceToMobileNumberId).HasColumnName("VoiceToMobileNumberID");
            entity.Property(e => e.VoiceToUserId).HasColumnName("VoiceToUserID");
        });

        modelBuilder.Entity<TlknUserGroupshowOnline>(entity =>
        {
            entity.HasKey(e => e.GroupShowLiveId).HasName("PK_TLKN_USER_GROUPSHOW_LIVE");

            entity.ToTable("TLKN_USER_GROUPSHOW_ONLINE");

            entity.Property(e => e.GroupShowLiveId).HasColumnName("GroupShowLiveID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.EndDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.GroupShowCloseTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowEndTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowId).HasColumnName("GroupShowID");
            entity.Property(e => e.GroupShowInitiateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowOpenTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowPendingTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowSessionId).HasColumnName("GroupShowSessionID");
            entity.Property(e => e.GroupShowSpendTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowStartTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowTicketId).HasColumnName("GroupShowTicketID");
            entity.Property(e => e.GroupShowTimeSpendHour).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.GroupShowTimeSpendMinute).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.GroupShowTimeSpendSecond).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.GroupShowVideoId).HasColumnName("GroupShowVideoID");
            entity.Property(e => e.GroupShowVideoTokenId).HasColumnName("GroupShowVideoTokenID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsGroupShowClose).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowEnd).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowInitiate).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowOpen).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowPending).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowSpend).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowStart).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPublish).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVideoSaveLive).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVideoTopFirstLive).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.StartDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.VideoTopFirstLiveOrder)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
        });

        modelBuilder.Entity<TlknUserGroupshowRequest>(entity =>
        {
            entity.HasKey(e => e.GroupShowRequestId);

            entity.ToTable("TLKN_USER_GROUPSHOW_REQUEST");

            entity.Property(e => e.GroupShowRequestId).HasColumnName("GroupShowRequestID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.GroupShowId).HasColumnName("GroupShowID");
            entity.Property(e => e.GroupShowInviteId).HasColumnName("GroupShowInviteID");
            entity.Property(e => e.GroupShowSessionId).HasColumnName("GroupShowSessionID");
            entity.Property(e => e.GroupShowStatus).HasDefaultValueSql("(N'initial')");
            entity.Property(e => e.GroupShowTicketId).HasColumnName("GroupShowTicketID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsGuest).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsLogin).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.ResetDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserRegisterDate).HasColumnType("smalldatetime");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.UserStatus).HasDefaultValueSql("(N'offline')");
        });

        modelBuilder.Entity<TlknUserGroupshowTicket>(entity =>
        {
            entity.HasKey(e => e.GroupShowTicketId);

            entity.ToTable("TLKN_USER_GROUPSHOW_TICKET");

            entity.Property(e => e.GroupShowTicketId).HasColumnName("GroupShowTicketID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.GroupShowId).HasColumnName("GroupShowID");
            entity.Property(e => e.GroupShowSessionId).HasColumnName("GroupShowSessionID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsGroupShowMaxInviteCount).HasDefaultValueSql("((0))");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenId).HasColumnName("ScreenID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserGroupshowTimeConsume>(entity =>
        {
            entity.HasKey(e => e.GroupShowTimeId).HasName("PK_TLKN_USER_GROUPSHOW_EVENT_LIST");

            entity.ToTable("TLKN_USER_GROUPSHOW_TIME_CONSUME");

            entity.Property(e => e.GroupShowTimeId).HasColumnName("GroupShowTimeID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.GroupShowCloseTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowEndTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowId).HasColumnName("GroupShowID");
            entity.Property(e => e.GroupShowInitiateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowOpenTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowPendingTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowSessionId).HasColumnName("GroupShowSessionID");
            entity.Property(e => e.GroupShowSpendTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowStartTime).HasColumnType("smalldatetime");
            entity.Property(e => e.GroupShowTicketId).HasColumnName("GroupShowTicketID");
            entity.Property(e => e.GroupShowTimeSpendHour).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.GroupShowTimeSpendMinute).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.GroupShowTimeSpendSecond).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsGroupShowClose).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowEnd).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowInitiate).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowOpen).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowPending).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowSpend).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGroupShowStart).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsOpen).HasDefaultValueSql("((1))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.TimeCountConsume).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountEnd).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountFreeLeft).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountFreeTotal).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountLeft1).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountStart).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeCountTotal1).HasDefaultValueSql("((0))");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TodayDay).HasDefaultValueSql("((0))");
            entity.Property(e => e.TodayMonth).HasDefaultValueSql("((0))");
            entity.Property(e => e.TodayYear).HasDefaultValueSql("((0))");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserGroupshowVideo>(entity =>
        {
            entity.HasKey(e => e.VideoId);

            entity.ToTable("TLKN_USER_GROUPSHOW_VIDEO");

            entity.Property(e => e.VideoId).HasColumnName("VideoID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.CamFmsid).HasColumnName("CamFMSID");
            entity.Property(e => e.CamFmsurl).HasColumnName("CamFMSURL");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.GroupShowId).HasColumnName("GroupShowID");
            entity.Property(e => e.GroupShowInviteId).HasColumnName("GroupShowInviteID");
            entity.Property(e => e.GroupShowSessionId).HasColumnName("GroupShowSessionID");
            entity.Property(e => e.GroupShowTicketId).HasColumnName("GroupShowTicketID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsModelStudio).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.StudioId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("StudioID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserGroupshowVideoTicket>(entity =>
        {
            entity.HasKey(e => e.VideoTicketId);

            entity.ToTable("TLKN_USER_GROUPSHOW_VIDEO_TICKET");

            entity.Property(e => e.VideoTicketId).HasColumnName("VideoTicketID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserInviteshowHistory>(entity =>
        {
            entity.HasKey(e => e.InviteHistoryId).HasName("PK_TLKN_USER_INVITE_HISTORY");

            entity.ToTable("TLKN_USER_INVITESHOW_HISTORY");

            entity.Property(e => e.InviteHistoryId).HasColumnName("InviteHistoryID");
            entity.Property(e => e.FromTlknUserId).HasColumnName("FromTlknUserID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.GroupShowEndMessageId).HasColumnName("GroupShowEndMessageID");
            entity.Property(e => e.GroupShowId).HasColumnName("GroupShowID");
            entity.Property(e => e.GroupShowInviteId).HasColumnName("GroupShowInviteID");
            entity.Property(e => e.GroupShowStartMessageId).HasColumnName("GroupShowStartMessageID");
            entity.Property(e => e.InviteShowId).HasColumnName("InviteShowID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNotificationShow).HasDefaultValueSql("((0))");
            entity.Property(e => e.NotificationReset).HasColumnType("smalldatetime");
            entity.Property(e => e.NotificationStart)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.TlknUserId).HasColumnName("TlknUserID");
            entity.Property(e => e.ToTlknUserId).HasColumnName("ToTlknUserID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.UploadDate).HasColumnType("smalldatetime");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserInviteshowLogin>(entity =>
        {
            entity.HasKey(e => e.InviteLoginId);

            entity.ToTable("TLKN_USER_INVITESHOW_LOGIN");

            entity.Property(e => e.InviteLoginId).HasColumnName("InviteLoginID");
            entity.Property(e => e.FromTlknUserId).HasColumnName("FromTlknUserID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.GroupShowId).HasColumnName("GroupShowID");
            entity.Property(e => e.GroupShowInviteId).HasColumnName("GroupShowInviteID");
            entity.Property(e => e.GroupShowTicketId).HasColumnName("GroupShowTicketID");
            entity.Property(e => e.InviteShowId).HasColumnName("InviteShowID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsNotificationShow).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.NotificationReset).HasColumnType("smalldatetime");
            entity.Property(e => e.NotificationStart)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.TlknUserId).HasColumnName("TlknUserID");
            entity.Property(e => e.ToTlknUserId).HasColumnName("ToTlknUserID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserLocationRemoteList>(entity =>
        {
            entity.HasKey(e => e.UremoteId);

            entity.ToTable("TLKN_USER_LOCATION_REMOTE_LIST");

            entity.Property(e => e.UremoteId)
                .ValueGeneratedNever()
                .HasColumnName("URemoteID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.FileId).HasColumnName("FileID");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingMatchConnect).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMatch).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MatchLikeStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.RemoteMobileNumberId).HasColumnName("RemoteMobileNumberID");
            entity.Property(e => e.RemoteUserId).HasColumnName("RemoteUserID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserMobileNumberId).HasColumnName("UserMobileNumberID");
        });

        modelBuilder.Entity<TlknUserLocationTrackFilter>(entity =>
        {
            entity.HasKey(e => e.UtrackId);

            entity.ToTable("TLKN_USER_LOCATION_TRACK_FILTER");

            entity.Property(e => e.UtrackId).HasColumnName("UTrackID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingMatchConnect).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMatch).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MatchLikeStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserMobileNumberId).HasColumnName("UserMobileNumberID");
        });

        modelBuilder.Entity<TlknUserLocationTrackOnlineList>(entity =>
        {
            entity.HasKey(e => e.UtrackId).HasName("PK_TLKN_USER_LOCATION_TRACK_LIST");

            entity.ToTable("TLKN_USER_LOCATION_TRACK_ONLINE_LIST");

            entity.Property(e => e.UtrackId).HasColumnName("UTrackID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingMatchConnect).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMatch).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MatchLikeStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.TrackSessionTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("TrackSessionTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserMobileNumberId).HasColumnName("UserMobileNumberID");
        });

        modelBuilder.Entity<TlknUserMobileNumberListHistory>(entity =>
        {
            entity.HasKey(e => e.UmobileNumberId);

            entity.ToTable("TLKN_USER_MOBILE_NUMBER_LIST_HISTORY");

            entity.Property(e => e.UmobileNumberId).HasColumnName("UMobileNumberID");
            entity.Property(e => e.AndroidId).HasColumnName("AndroidID");
            entity.Property(e => e.CellIdentityGsm).HasColumnName("CellIdentityGSM");
            entity.Property(e => e.CountryIsocode).HasColumnName("CountryISOCode");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.DeviceId).HasColumnName("DeviceID");
            entity.Property(e => e.Gcmid).HasColumnName("GCMID");
            entity.Property(e => e.GroupIdlevel1).HasColumnName("GroupIDLevel1");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDeviceOnRegister).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSystemUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVerify).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MmsUaprofUrl).HasColumnName("MmsUAProfUrl");
            entity.Property(e => e.MobileNumberFormatUs).HasColumnName("MobileNumberFormatUS");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.MobileNumberOutUs).HasColumnName("MobileNumberOutUS");
            entity.Property(e => e.NetworkCountryIso).HasColumnName("NetworkCountryISO");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.SimcountryIso).HasColumnName("SIMCountryISO");
            entity.Property(e => e.Simoperator).HasColumnName("SIMOperator");
            entity.Property(e => e.SimserialNumber).HasColumnName("SIMSerialNumber");
            entity.Property(e => e.Simstate).HasColumnName("SIMState");
            entity.Property(e => e.SubscriberId).HasColumnName("SubscriberID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserNotificationAlert>(entity =>
        {
            entity.HasKey(e => e.NotificationId).HasName("PK_TLKN_USER_ALERT");

            entity.ToTable("TLKN_USER_NOTIFICATION_ALERT");

            entity.Property(e => e.NotificationId).HasColumnName("NotificationID");
            entity.Property(e => e.FromTlknUserId).HasColumnName("FromTlknUserID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNotificationShow).HasDefaultValueSql("((0))");
            entity.Property(e => e.NotificationReset).HasColumnType("datetime");
            entity.Property(e => e.NotificationStart).HasColumnType("datetime");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.TlknUserId).HasColumnName("TlknUserID");
            entity.Property(e => e.ToTlknUserId).HasColumnName("ToTlknUserID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.UploadDate).HasColumnType("smalldatetime");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserNotificationOfflineMessage>(entity =>
        {
            entity.HasKey(e => e.MsgScreenChatShowId);

            entity.ToTable("TLKN_USER_NOTIFICATION_OFFLINE_MESSAGE");

            entity.Property(e => e.MsgScreenChatShowId).HasColumnName("MsgScreenChatShowID");
            entity.Property(e => e.FileId).HasColumnName("FileID");
            entity.Property(e => e.FileIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.GroupType).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageDefaultServerId).HasColumnName("ImageDefaultServerID");
            entity.Property(e => e.ImageDefaultServerUrl).HasColumnName("ImageDefaultServerURL");
            entity.Property(e => e.ImageFromMobileNumberId).HasColumnName("ImageFromMobileNumberID");
            entity.Property(e => e.ImageFromUserId).HasColumnName("ImageFromUserID");
            entity.Property(e => e.ImageIsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageIsLoading).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageIsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.ImageThumServerUrl).HasColumnName("ImageThumServerURL");
            entity.Property(e => e.ImageToMobileNumberId).HasColumnName("ImageToMobileNumberID");
            entity.Property(e => e.ImageToUserId).HasColumnName("ImageToUserID");
            entity.Property(e => e.InviteOwnerMobileNumberId).HasColumnName("InviteOwnerMobileNumberID");
            entity.Property(e => e.InviteOwnerUserId).HasColumnName("InviteOwnerUserID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsCreateNewChatLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDelivered).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsHistoryLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNewMessage).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSessionClosedLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsShareLocationAskRemoteEnable).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSpaceLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSubjectLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.LocationCountryFlagUrl).HasColumnName("LocationCountryFlagURL");
            entity.Property(e => e.LocationRequestFromRemoteUserId).HasColumnName("LocationRequestFromRemoteUserID");
            entity.Property(e => e.LocationRequestToRemoteUserId).HasColumnName("LocationRequestToRemoteUserID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.NotificationCode).HasDefaultValueSql("((0))");
            entity.Property(e => e.NotificationType).HasDefaultValueSql("((0))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowId1).HasColumnName("ScreenChatShowID1");
            entity.Property(e => e.ScreenChatShowId2).HasColumnName("ScreenChatShowID2");
            entity.Property(e => e.ScreenChatShowId3).HasColumnName("ScreenChatShowID3");
            entity.Property(e => e.ScreenChatShowId4).HasColumnName("ScreenChatShowID4");
            entity.Property(e => e.ScreenChatShowId5).HasColumnName("ScreenChatShowID5");
            entity.Property(e => e.ScreenChatShowId6).HasColumnName("ScreenChatShowID6");
            entity.Property(e => e.ScreenChatShowId7).HasColumnName("ScreenChatShowID7");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.SuggestContactListFromRemoteUserId).HasColumnName("SuggestContactListFromRemoteUserID");
            entity.Property(e => e.SuggestContactListMobileNumberId).HasColumnName("SuggestContactListMobileNumberID");
            entity.Property(e => e.SuggestContactListToRemoteUserId).HasColumnName("SuggestContactListToRemoteUserID");
            entity.Property(e => e.SuggestContactListUserId).HasColumnName("SuggestContactListUserID");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeUtc)
                .HasColumnType("smalldatetime")
                .HasColumnName("UploadDateTimeUTC");
            entity.Property(e => e.UploadDateUtc)
                .HasColumnType("smalldatetime")
                .HasColumnName("UploadDateUTC");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadDayUtc).HasColumnName("UploadDayUTC");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadMonthUtc).HasColumnName("UploadMonthUTC");
            entity.Property(e => e.UploadTimeUtc).HasColumnName("UploadTimeUTC");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UploadYearUtc).HasColumnName("UploadYearUTC");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.VideoDefaultServerId).HasColumnName("VideoDefaultServerID");
            entity.Property(e => e.VideoDefaultServerUrl).HasColumnName("VideoDefaultServerURL");
            entity.Property(e => e.VideoFromMobileNumberId).HasColumnName("VideoFromMobileNumberID");
            entity.Property(e => e.VideoFromUserId).HasColumnName("VideoFromUserID");
            entity.Property(e => e.VideoIsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoIsLoading).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoIsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.VideoShowInviteId).HasColumnName("VideoShowInviteID");
            entity.Property(e => e.VideoThumServerUrl).HasColumnName("VideoThumServerURL");
            entity.Property(e => e.VideoToMobileNumberId).HasColumnName("VideoToMobileNumberID");
            entity.Property(e => e.VideoToUserId).HasColumnName("VideoToUserID");
            entity.Property(e => e.VoiceShowInviteId).HasColumnName("VoiceShowInviteID");
        });

        modelBuilder.Entity<TlknUserOfflineMatchList>(entity =>
        {
            entity.HasKey(e => e.UmessageId);

            entity.ToTable("TLKN_USER_OFFLINE_MATCH_LIST");

            entity.Property(e => e.UmessageId).HasColumnName("UMessageID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingMatchConnect).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMatch).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MatchLikeStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserMobileNumberId).HasColumnName("UserMobileNumberID");
        });

        modelBuilder.Entity<TlknUserOfflineRequestList>(entity =>
        {
            entity.HasKey(e => e.UmessageId);

            entity.ToTable("TLKN_USER_OFFLINE_REQUEST_LIST");

            entity.Property(e => e.UmessageId).HasColumnName("UMessageID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingMatchConnect).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMatch).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsReply).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MatchLikeStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserMobileNumberId).HasColumnName("UserMobileNumberID");
        });

        modelBuilder.Entity<TlknUserPaymentEarnTokenList>(entity =>
        {
            entity.HasKey(e => e.UpaymentEarnId);

            entity.ToTable("TLKN_USER_PAYMENT_EARN_TOKEN_LIST");

            entity.Property(e => e.UpaymentEarnId).HasColumnName("UPaymentEarnID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.InvoiceOrderTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("InvoiceOrderTokenID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsNextPaymentEarnTokenId).HasColumnName("IsNextPaymentEarnTokenID");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PaymentCategory).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentCode).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentEarnTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("PaymentEarnTokenID");
            entity.Property(e => e.PaymentMonthTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("PaymentMonthTokenID");
            entity.Property(e => e.PaymentStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentTag).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentTicketId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PaymentTicketID");
            entity.Property(e => e.PaymentTicketStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("PaymentTokenID");
            entity.Property(e => e.PaymentYearTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("PaymentYearTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.TokenAmount).HasDefaultValueSql("((0))");
            entity.Property(e => e.TokenCostTotalValue).HasColumnType("money");
            entity.Property(e => e.TokenCredit).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.TokenPricePerOneValue).HasColumnType("money");
            entity.Property(e => e.TotalCredit)
                .HasDefaultValueSql("(N'0')")
                .HasColumnType("money");
            entity.Property(e => e.TotalCreditOriginal)
                .HasDefaultValueSql("(N'0')")
                .HasColumnType("money");
            entity.Property(e => e.TotalToken).HasDefaultValueSql("((0))");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserPaymentInvoiceItemList>(entity =>
        {
            entity.HasKey(e => e.UpaymentId);

            entity.ToTable("TLKN_USER_PAYMENT_INVOICE_ITEM_LIST");

            entity.Property(e => e.UpaymentId).HasColumnName("UPaymentID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.InvoiceOrderTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("InvoiceOrderTokenID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PaymentCategory).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentCode).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentEarnTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("PaymentEarnTokenID");
            entity.Property(e => e.PaymentMonthTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("PaymentMonthTokenID");
            entity.Property(e => e.PaymentStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentTag).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentTicketId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PaymentTicketID");
            entity.Property(e => e.PaymentTicketStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("PaymentTokenID");
            entity.Property(e => e.PaymentYearTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("PaymentYearTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.TokenAmount).HasDefaultValueSql("((0))");
            entity.Property(e => e.TokenCostTotalValue).HasColumnType("money");
            entity.Property(e => e.TokenCredit).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.TokenPricePerOneValue).HasColumnType("money");
            entity.Property(e => e.TotalCredit)
                .HasDefaultValueSql("(N'0')")
                .HasColumnType("money");
            entity.Property(e => e.TotalCreditOriginal)
                .HasDefaultValueSql("(N'0')")
                .HasColumnType("money");
            entity.Property(e => e.TotalToken).HasDefaultValueSql("((0))");
            entity.Property(e => e.UinvoiceOrderId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("UInvoiceOrderID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserPaymentInvoiceList>(entity =>
        {
            entity.HasKey(e => e.UinvoiceId);

            entity.ToTable("TLKN_USER_PAYMENT_INVOICE_LIST");

            entity.Property(e => e.UinvoiceId).HasColumnName("UInvoiceID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.AdminBear).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.AdminShaymaa).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.CcbillPaymentProcessor)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("CCBillPaymentProcessor");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FlashServer).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.HostServer).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.InvoiceListTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("InvoiceListTokenID");
            entity.Property(e => e.InvoiceOrderTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("InvoiceOrderTokenID");
            entity.Property(e => e.InvoiceRequestCancelDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.InvoiceRequestTimeoutEndDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.InvoiceRequestTimeoutStartDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.InvoiceStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.InvoiceTlknTotal).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.InvoiceTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("InvoiceTokenID");
            entity.Property(e => e.InvoiceTotal)
                .HasDefaultValueSql("((0))")
                .HasColumnType("money");
            entity.Property(e => e.InvoiceUserTotal).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsOrderRequest).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.JuniorPayment).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.ModelPayment).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.OtherPaymentProcessor).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.OtherTax).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.PaymentEarnTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("PaymentEarnTokenID");
            entity.Property(e => e.PaymentMonthTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("PaymentMonthTokenID");
            entity.Property(e => e.PaymentStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentTicketId).HasColumnName("PaymentTicketID");
            entity.Property(e => e.PaymentTicketStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("PaymentTokenID");
            entity.Property(e => e.PaymentYearTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("PaymentYearTokenID");
            entity.Property(e => e.PayoneerPaymentProcessor).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.RoverPayment).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.Tax).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TokenCostTotalValue).HasColumnType("money");
            entity.Property(e => e.TokenPricePerOneValue).HasColumnType("money");
            entity.Property(e => e.TotalAmountPaymentAdmin).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalAmountPaymentPayout).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalAmountPaymentProcessor).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalAmountPaymentServer).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalAmountPaymentTax).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalAmountSiteEarn).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalAmountSiteExpense).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalAmountSiteNetProfit).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalAmountSiteSave).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalAmountSiteSpend).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.VisaInProcessorPayment).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.VisaOutProcessorPayment).HasColumnType("decimal(18, 0)");
        });

        modelBuilder.Entity<TlknUserPaymentInvoiceOrderList>(entity =>
        {
            entity.HasKey(e => e.UinvoiceOrderId);

            entity.ToTable("TLKN_USER_PAYMENT_INVOICE_ORDER_LIST");

            entity.Property(e => e.UinvoiceOrderId).HasColumnName("UInvoiceOrderID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.AdminBear).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.AdminShaymaa).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.CcbillPaymentProcessor)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("CCBillPaymentProcessor");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FlashServer).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.HostServer).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.InvoiceListTokenId)
                .HasDefaultValueSql("(N'notset')")
                .HasColumnName("InvoiceListTokenID");
            entity.Property(e => e.InvoiceOrderStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.InvoiceOrderSubTotal)
                .HasDefaultValueSql("((0))")
                .HasColumnType("money");
            entity.Property(e => e.InvoiceOrderTax)
                .HasDefaultValueSql("((0))")
                .HasColumnType("money");
            entity.Property(e => e.InvoiceOrderTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("InvoiceOrderTokenID");
            entity.Property(e => e.InvoiceOrderTotal)
                .HasDefaultValueSql("((0))")
                .HasColumnType("money");
            entity.Property(e => e.InvoiceTlknTotal).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.InvoiceUserTotal).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsOrderRequest).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.JuniorPayment).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.ModelPayment).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.OtherPaymentProcessor).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.OtherTax).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.PaymentEarnTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("PaymentEarnTokenID");
            entity.Property(e => e.PaymentMonthTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("PaymentMonthTokenID");
            entity.Property(e => e.PaymentYearTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("PaymentYearTokenID");
            entity.Property(e => e.PayoneerPaymentProcessor).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.RoverPayment).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.Tax).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TokenCostTotalValue).HasColumnType("money");
            entity.Property(e => e.TokenPricePerOneValue).HasColumnType("money");
            entity.Property(e => e.TotalAmountPaymentAdmin).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalAmountPaymentPayout).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalAmountPaymentProcessor).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalAmountPaymentServer).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalAmountPaymentTax).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalAmountSiteEarn).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalAmountSiteExpense).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalAmountSiteNetProfit).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalAmountSiteSave).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TotalAmountSiteSpend).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.VisaInProcessorPayment).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.VisaOutProcessorPayment).HasColumnType("decimal(18, 0)");
        });

        modelBuilder.Entity<TlknUserPaymentList>(entity =>
        {
            entity.HasKey(e => e.UpaymentId);

            entity.ToTable("TLKN_USER_PAYMENT_LIST");

            entity.Property(e => e.UpaymentId).HasColumnName("UPaymentID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.InvoiceOrderTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("InvoiceOrderTokenID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PaymentCategory).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentCode).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentEarnTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("PaymentEarnTokenID");
            entity.Property(e => e.PaymentMonthTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("PaymentMonthTokenID");
            entity.Property(e => e.PaymentStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentTag).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentTicketId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PaymentTicketID");
            entity.Property(e => e.PaymentTicketStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("PaymentTokenID");
            entity.Property(e => e.PaymentYearTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("PaymentYearTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.TokenAmount).HasDefaultValueSql("((0))");
            entity.Property(e => e.TokenCostTotalValue).HasColumnType("money");
            entity.Property(e => e.TokenCredit).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.TokenPricePerOneValue).HasColumnType("money");
            entity.Property(e => e.TotalCredit)
                .HasDefaultValueSql("(N'0')")
                .HasColumnType("money");
            entity.Property(e => e.TotalCreditOriginal)
                .HasDefaultValueSql("(N'0')")
                .HasColumnType("money");
            entity.Property(e => e.TotalToken).HasDefaultValueSql("((0))");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserPaymentOrderStatus>(entity =>
        {
            entity.HasKey(e => e.UpaymentOrderId);

            entity.ToTable("TLKN_USER_PAYMENT_ORDER_STATUS");

            entity.Property(e => e.UpaymentOrderId).HasColumnName("UPaymentOrderID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsModelStudio).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNextPaymentTicket).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPayoneerVerifyModel).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPayoneerVerifyStudio).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PaymentEarnTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("PaymentEarnTokenID");
            entity.Property(e => e.PaymentMonthTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("PaymentMonthTokenID");
            entity.Property(e => e.PaymentStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentTicketId).HasColumnName("PaymentTicketID");
            entity.Property(e => e.PaymentTicketStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("PaymentTokenID");
            entity.Property(e => e.PaymentYearTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("PaymentYearTokenID");
            entity.Property(e => e.PayoneerIdmodel).HasColumnName("PayoneerIDModel");
            entity.Property(e => e.PayoneerIdstudio).HasColumnName("PayoneerIDStudio");
            entity.Property(e => e.PmmessageTokenAmount).HasColumnName("PMMessageTokenAmount");
            entity.Property(e => e.PurchaseOrderId).HasColumnName("PurchaseOrderID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.StudioId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("StudioID");
            entity.Property(e => e.TokenCostTotalValue).HasColumnType("money");
            entity.Property(e => e.TokenPricePerOneValue).HasColumnType("money");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserPaymentPaybackHistoryList>(entity =>
        {
            entity.HasKey(e => e.UpaymentPaybackHistoryId);

            entity.ToTable("TLKN_USER_PAYMENT_PAYBACK_HISTORY_LIST");

            entity.Property(e => e.UpaymentPaybackHistoryId).HasColumnName("UPaymentPaybackHistoryID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsDefault).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsValid).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVerify).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("(N'notset')")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("(N'notset')")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.PaymentPaybackAccountId).HasColumnName("PaymentPaybackAccountID");
            entity.Property(e => e.PaymentPaybackTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("PaymentPaybackTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserPaymentPaybackTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("UserPaymentPaybackTokenID");
        });

        modelBuilder.Entity<TlknUserPaymentPaybackList>(entity =>
        {
            entity.HasKey(e => e.UpaymentPaybackId);

            entity.ToTable("TLKN_USER_PAYMENT_PAYBACK_LIST");

            entity.Property(e => e.UpaymentPaybackId).HasColumnName("UPaymentPaybackID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsDefault).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsValid).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVerify).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.OwnerMobileNumberTokenId)
                .HasDefaultValueSql("(N'notset')")
                .HasColumnName("OwnerMobileNumberTokenID");
            entity.Property(e => e.OwnerUserTokenId)
                .HasDefaultValueSql("(N'notset')")
                .HasColumnName("OwnerUserTokenID");
            entity.Property(e => e.PaymentPaybackAccountId).HasColumnName("PaymentPaybackAccountID");
            entity.Property(e => e.PaymentPaybackTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("PaymentPaybackTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserPaymentPaybackTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("UserPaymentPaybackTokenID");
        });

        modelBuilder.Entity<TlknUserPostAttachCommentEventList>(entity =>
        {
            entity.HasKey(e => e.UcommentEventId);

            entity.ToTable("TLKN_USER_POST_ATTACH_COMMENT_EVENT_LIST");

            entity.Property(e => e.UcommentEventId).HasColumnName("UCommentEventID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.AttachId).HasColumnName("AttachID");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.CommentId).HasColumnName("CommentID");
            entity.Property(e => e.CommentTokenId).HasColumnName("CommentTokenID");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingMatchConnect).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMatch).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MatchLikeStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.PostId).HasColumnName("PostID");
            entity.Property(e => e.RemoteMobileNumberId).HasColumnName("RemoteMobileNumberID");
            entity.Property(e => e.RemoteUserId).HasColumnName("RemoteUserID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserPostAttachCommentList>(entity =>
        {
            entity.HasKey(e => e.CommentId);

            entity.ToTable("TLKN_USER_POST_ATTACH_COMMENT_LIST");

            entity.Property(e => e.CommentId).HasColumnName("CommentID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.AttachId).HasColumnName("AttachID");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.CommentCode).HasDefaultValueSql("(N'text')");
            entity.Property(e => e.CommentTextCss)
                .HasDefaultValueSql("(N'left')")
                .HasColumnName("CommentTextCSS");
            entity.Property(e => e.CommentTokenId).HasColumnName("CommentTokenID");
            entity.Property(e => e.CommentType).HasDefaultValueSql("(N'text')");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FileDuration).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.FileId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("FileID");
            entity.Property(e => e.FileUrl)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("FileURL");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingMatchConnect).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMatch).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MatchLikeStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.PostId).HasColumnName("PostID");
            entity.Property(e => e.PostTokenId).HasColumnName("PostTokenID");
            entity.Property(e => e.RemoteMobileNumberId).HasColumnName("RemoteMobileNumberID");
            entity.Property(e => e.RemoteUserId).HasColumnName("RemoteUserID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDateTimeUtc)
                .HasColumnType("smalldatetime")
                .HasColumnName("UploadDateTimeUTC");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadTime).HasDefaultValueSql("(N'00:00')");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UpostId).HasColumnName("UPostID");
            entity.Property(e => e.UpostTokenId).HasColumnName("UPostTokenID");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserPostAttachCommentReplyEventList>(entity =>
        {
            entity.HasKey(e => e.UreplyEventId);

            entity.ToTable("TLKN_USER_POST_ATTACH_COMMENT_REPLY_EVENT_LIST");

            entity.Property(e => e.UreplyEventId).HasColumnName("UReplyEventID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.AttachId).HasColumnName("AttachID");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.CommentId).HasColumnName("CommentID");
            entity.Property(e => e.CommentTokenId).HasColumnName("CommentTokenID");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingMatchConnect).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMatch).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MatchLikeStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.PostId).HasColumnName("PostID");
            entity.Property(e => e.RemoteMobileNumberId).HasColumnName("RemoteMobileNumberID");
            entity.Property(e => e.RemoteUserId).HasColumnName("RemoteUserID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.ReplyId).HasColumnName("ReplyID");
            entity.Property(e => e.ReplyTokenId).HasColumnName("ReplyTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserPostAttachCommentReplyList>(entity =>
        {
            entity.HasKey(e => e.ReplyId);

            entity.ToTable("TLKN_USER_POST_ATTACH_COMMENT_REPLY_LIST");

            entity.Property(e => e.ReplyId).HasColumnName("ReplyID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.AttachId).HasColumnName("AttachID");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.CommentId).HasColumnName("CommentID");
            entity.Property(e => e.CommentTokenId).HasColumnName("CommentTokenID");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FileDuration).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.FileId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("FileID");
            entity.Property(e => e.FileUrl)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("FileURL");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingMatchConnect).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMatch).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MatchLikeStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.PostId).HasColumnName("PostID");
            entity.Property(e => e.RemoteMobileNumberId).HasColumnName("RemoteMobileNumberID");
            entity.Property(e => e.RemoteUserId).HasColumnName("RemoteUserID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.ReplyCode).HasDefaultValueSql("(N'text')");
            entity.Property(e => e.ReplyTextCss)
                .HasDefaultValueSql("(N'left')")
                .HasColumnName("ReplyTextCSS");
            entity.Property(e => e.ReplyTokenId).HasColumnName("ReplyTokenID");
            entity.Property(e => e.ReplyType).HasDefaultValueSql("(N'text')");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDateTimeUtc)
                .HasColumnType("smalldatetime")
                .HasColumnName("UploadDateTimeUTC");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadTime).HasDefaultValueSql("(N'00:00')");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserPostAttachEventList>(entity =>
        {
            entity.HasKey(e => e.UattachEventId);

            entity.ToTable("TLKN_USER_POST_ATTACH_EVENT_LIST");

            entity.Property(e => e.UattachEventId).HasColumnName("UAttachEventID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.AttachId).HasColumnName("AttachID");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingMatchConnect).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMatch).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MatchLikeStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.PostId).HasColumnName("PostID");
            entity.Property(e => e.RemoteMobileNumberId).HasColumnName("RemoteMobileNumberID");
            entity.Property(e => e.RemoteUserId).HasColumnName("RemoteUserID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserPostAttachList>(entity =>
        {
            entity.HasKey(e => e.UattachId);

            entity.ToTable("TLKN_USER_POST_ATTACH_LIST");

            entity.Property(e => e.UattachId).HasColumnName("UAttachID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FileId).HasColumnName("FileID");
            entity.Property(e => e.FileThumUrl).HasColumnName("FileThumURL");
            entity.Property(e => e.FileUrl).HasColumnName("FileURL");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingMatchConnect).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMatch).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUserLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUserShare).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsViewOnly).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MatchLikeStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.MessageText).HasDefaultValueSql("(N'left')");
            entity.Property(e => e.MessageTextCss)
                .HasDefaultValueSql("(N'left')")
                .HasColumnName("MessageTextCSS");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.PostId).HasColumnName("PostID");
            entity.Property(e => e.PostTokenId).HasColumnName("PostTokenID");
            entity.Property(e => e.RemoteMobileNumberId).HasColumnName("RemoteMobileNumberID");
            entity.Property(e => e.RemoteUserId).HasColumnName("RemoteUserID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeUtc)
                .HasColumnType("smalldatetime")
                .HasColumnName("UploadDateTimeUTC");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadTime).HasDefaultValueSql("(N'00:00')");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UpostTokenId).HasColumnName("UPostTokenID");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.YouTubeChannelId).HasColumnName("YouTubeChannelID");
        });

        modelBuilder.Entity<TlknUserPostCommentEventList>(entity =>
        {
            entity.HasKey(e => e.UcommentEventId);

            entity.ToTable("TLKN_USER_POST_COMMENT_EVENT_LIST");

            entity.Property(e => e.UcommentEventId).HasColumnName("UCommentEventID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.CommentId).HasColumnName("CommentID");
            entity.Property(e => e.CommentTokenId).HasColumnName("CommentTokenID");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingMatchConnect).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMatch).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MatchLikeStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.PostId).HasColumnName("PostID");
            entity.Property(e => e.RemoteMobileNumberId).HasColumnName("RemoteMobileNumberID");
            entity.Property(e => e.RemoteUserId).HasColumnName("RemoteUserID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserPostCommentList>(entity =>
        {
            entity.HasKey(e => e.CommentId);

            entity.ToTable("TLKN_USER_POST_COMMENT_LIST");

            entity.Property(e => e.CommentId).HasColumnName("CommentID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.CommentCode).HasDefaultValueSql("(N'text')");
            entity.Property(e => e.CommentTextCss)
                .HasDefaultValueSql("(N'left')")
                .HasColumnName("CommentTextCSS");
            entity.Property(e => e.CommentTokenId).HasColumnName("CommentTokenID");
            entity.Property(e => e.CommentType).HasDefaultValueSql("(N'text')");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FileDuration).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.FileId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("FileID");
            entity.Property(e => e.FileUrl)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("FileURL");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingMatchConnect).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMatch).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MatchLikeStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.PostId).HasColumnName("PostID");
            entity.Property(e => e.PostTokenId).HasColumnName("PostTokenID");
            entity.Property(e => e.RemoteMobileNumberId).HasColumnName("RemoteMobileNumberID");
            entity.Property(e => e.RemoteUserId).HasColumnName("RemoteUserID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDateTimeUtc)
                .HasColumnType("smalldatetime")
                .HasColumnName("UploadDateTimeUTC");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadTime)
                .HasDefaultValueSql("(N'00:00')")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UpostId).HasColumnName("UPostID");
            entity.Property(e => e.UpostTokenId).HasColumnName("UPostTokenID");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserPostCommentReplyEventList>(entity =>
        {
            entity.HasKey(e => e.UreplyEventId).HasName("PK_TLKN_USER_POST_REPLY_EVENT_LIST");

            entity.ToTable("TLKN_USER_POST_COMMENT_REPLY_EVENT_LIST");

            entity.Property(e => e.UreplyEventId).HasColumnName("UReplyEventID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.CommentId).HasColumnName("CommentID");
            entity.Property(e => e.CommentTokenId).HasColumnName("CommentTokenID");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingMatchConnect).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMatch).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MatchLikeStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.PostId).HasColumnName("PostID");
            entity.Property(e => e.RemoteMobileNumberId).HasColumnName("RemoteMobileNumberID");
            entity.Property(e => e.RemoteUserId).HasColumnName("RemoteUserID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.ReplyId).HasColumnName("ReplyID");
            entity.Property(e => e.ReplyTokenId).HasColumnName("ReplyTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserPostCommentReplyList>(entity =>
        {
            entity.HasKey(e => e.ReplyId);

            entity.ToTable("TLKN_USER_POST_COMMENT_REPLY_LIST");

            entity.Property(e => e.ReplyId).HasColumnName("ReplyID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.CommentId).HasColumnName("CommentID");
            entity.Property(e => e.CommentTokenId).HasColumnName("CommentTokenID");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FileDuration).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.FileId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("FileID");
            entity.Property(e => e.FileUrl)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("FileURL");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingMatchConnect).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMatch).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MatchLikeStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.PostId).HasColumnName("PostID");
            entity.Property(e => e.RemoteMobileNumberId).HasColumnName("RemoteMobileNumberID");
            entity.Property(e => e.RemoteUserId).HasColumnName("RemoteUserID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.ReplyCode).HasDefaultValueSql("(N'text')");
            entity.Property(e => e.ReplyTextCss)
                .HasDefaultValueSql("(N'left')")
                .HasColumnName("ReplyTextCSS");
            entity.Property(e => e.ReplyTokenId).HasColumnName("ReplyTokenID");
            entity.Property(e => e.ReplyType).HasDefaultValueSql("(N'text')");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDateTimeUtc)
                .HasColumnType("smalldatetime")
                .HasColumnName("UploadDateTimeUTC");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadTime).HasDefaultValueSql("(N'00:00')");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserPostEventList>(entity =>
        {
            entity.HasKey(e => e.UpostEventId);

            entity.ToTable("TLKN_USER_POST_EVENT_LIST");

            entity.Property(e => e.UpostEventId).HasColumnName("UPostEventID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingMatchConnect).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMatch).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MatchLikeStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.PostId).HasColumnName("PostID");
            entity.Property(e => e.RemoteMobileNumberId).HasColumnName("RemoteMobileNumberID");
            entity.Property(e => e.RemoteUserId).HasColumnName("RemoteUserID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UpostTokenId).HasColumnName("UPostTokenID");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserPostLineList>(entity =>
        {
            entity.HasKey(e => e.UpostLineId);

            entity.ToTable("TLKN_USER_POST_LINE_LIST");

            entity.Property(e => e.UpostLineId).HasColumnName("UPostLineID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingMatchConnect).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMatch).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUserLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUserShare).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MatchLikeStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.PostId).HasColumnName("PostID");
            entity.Property(e => e.PostLineCss).HasColumnName("PostLineCSS");
            entity.Property(e => e.PostMessageTextCss)
                .HasDefaultValueSql("(N'left')")
                .HasColumnName("PostMessageTextCSS");
            entity.Property(e => e.PostTokenId).HasColumnName("PostTokenID");
            entity.Property(e => e.RemoteMobileNumberId).HasColumnName("RemoteMobileNumberID");
            entity.Property(e => e.RemoteUserId).HasColumnName("RemoteUserID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeUtc)
                .HasColumnType("smalldatetime")
                .HasColumnName("UploadDateTimeUTC");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadTime).HasDefaultValueSql("(N'00:00')");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UpostTokenId).HasColumnName("UPostTokenID");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserPostMessage>(entity =>
        {
            entity.HasKey(e => e.PostId);

            entity.ToTable("TLKN_USER_POST_MESSAGE");

            entity.Property(e => e.PostId).HasColumnName("PostID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FileId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("FileID");
            entity.Property(e => e.FileIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.FileServerUrl).HasColumnName("FileServerURL");
            entity.Property(e => e.FileUrl).HasColumnName("FileURL");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.ImageDefaultServerId).HasColumnName("ImageDefaultServerID");
            entity.Property(e => e.ImageDefaultServerUrl).HasColumnName("ImageDefaultServerURL");
            entity.Property(e => e.ImageFromMobileNumberId).HasColumnName("ImageFromMobileNumberID");
            entity.Property(e => e.ImageFromUserId).HasColumnName("ImageFromUserID");
            entity.Property(e => e.ImageIsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageIsLoading).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageIsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.ImageThumServerUrl).HasColumnName("ImageThumServerURL");
            entity.Property(e => e.ImageToMobileNumberId).HasColumnName("ImageToMobileNumberID");
            entity.Property(e => e.ImageToUserId).HasColumnName("ImageToUserID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsCreateNewChatLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingMatchConnect).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsHistoryLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMatch).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNewMessage).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsPostSave).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPostShare).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPostView).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSessionClosedLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsShareLocationAskRemoteEnable).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSpaceLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSubjectLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.LocationCountryFlagUrl).HasColumnName("LocationCountryFlagURL");
            entity.Property(e => e.LocationRequestFromRemoteUserId).HasColumnName("LocationRequestFromRemoteUserID");
            entity.Property(e => e.LocationRequestToRemoteUserId).HasColumnName("LocationRequestToRemoteUserID");
            entity.Property(e => e.MatchLikeStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.PostCode).HasDefaultValueSql("(N'text')");
            entity.Property(e => e.PostCss)
                .HasDefaultValueSql("(N'left')")
                .HasColumnName("PostCSS");
            entity.Property(e => e.PostDescriptionCss)
                .HasDefaultValueSql("(N'left')")
                .HasColumnName("PostDescriptionCSS");
            entity.Property(e => e.PostFullDescriptionCss)
                .HasDefaultValueSql("(N'left')")
                .HasColumnName("PostFullDescriptionCSS");
            entity.Property(e => e.PostLineCss)
                .HasDefaultValueSql("(N'left')")
                .HasColumnName("PostLineCSS");
            entity.Property(e => e.PostMessageTextCss)
                .HasDefaultValueSql("(N'left')")
                .HasColumnName("PostMessageTextCSS");
            entity.Property(e => e.PostMiniDescriptionCss)
                .HasDefaultValueSql("(N'left')")
                .HasColumnName("PostMiniDescriptionCSS");
            entity.Property(e => e.PostNameCss)
                .HasDefaultValueSql("(N'left')")
                .HasColumnName("PostNameCSS");
            entity.Property(e => e.PostTextCss)
                .HasDefaultValueSql("(N'left')")
                .HasColumnName("PostTextCSS");
            entity.Property(e => e.PostTitleCss)
                .HasDefaultValueSql("(N'left')")
                .HasColumnName("PostTitleCSS");
            entity.Property(e => e.PostTokenId).HasColumnName("PostTokenID");
            entity.Property(e => e.PostType).HasDefaultValueSql("(N'text')");
            entity.Property(e => e.PostUrl).HasColumnName("PostURL");
            entity.Property(e => e.RemoteMobileNumberId).HasColumnName("RemoteMobileNumberID");
            entity.Property(e => e.RemoteUserId).HasColumnName("RemoteUserID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.SuggestContactListFromRemoteUserId).HasColumnName("SuggestContactListFromRemoteUserID");
            entity.Property(e => e.SuggestContactListMobileNumberId).HasColumnName("SuggestContactListMobileNumberID");
            entity.Property(e => e.SuggestContactListToRemoteUserId).HasColumnName("SuggestContactListToRemoteUserID");
            entity.Property(e => e.SuggestContactListUserId).HasColumnName("SuggestContactListUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.VideoDefaultServerId).HasColumnName("VideoDefaultServerID");
            entity.Property(e => e.VideoDefaultServerUrl).HasColumnName("VideoDefaultServerURL");
            entity.Property(e => e.VideoFromMobileNumberId).HasColumnName("VideoFromMobileNumberID");
            entity.Property(e => e.VideoFromUserId).HasColumnName("VideoFromUserID");
            entity.Property(e => e.VideoIsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoIsLoading).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoIsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.VideoThumServerUrl).HasColumnName("VideoThumServerURL");
            entity.Property(e => e.VideoToMobileNumberId).HasColumnName("VideoToMobileNumberID");
            entity.Property(e => e.VideoToUserId).HasColumnName("VideoToUserID");
        });

        modelBuilder.Entity<TlknUserPostMessageLineList>(entity =>
        {
            entity.HasKey(e => e.UpostMessageLineId);

            entity.ToTable("TLKN_USER_POST_MESSAGE_LINE_LIST");

            entity.Property(e => e.UpostMessageLineId).HasColumnName("UPostMessageLineID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingMatchConnect).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMatch).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUserLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUserShare).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MatchLikeStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.PostId).HasColumnName("PostID");
            entity.Property(e => e.PostLineCss).HasColumnName("PostLineCSS");
            entity.Property(e => e.PostMessageTextCss)
                .HasDefaultValueSql("(N'left')")
                .HasColumnName("PostMessageTextCSS");
            entity.Property(e => e.PostTokenId).HasColumnName("PostTokenID");
            entity.Property(e => e.RemoteMobileNumberId).HasColumnName("RemoteMobileNumberID");
            entity.Property(e => e.RemoteUserId).HasColumnName("RemoteUserID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeUtc)
                .HasColumnType("smalldatetime")
                .HasColumnName("UploadDateTimeUTC");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadTime).HasDefaultValueSql("(N'00:00')");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UpostTokenId).HasColumnName("UPostTokenID");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserPostMessageList>(entity =>
        {
            entity.HasKey(e => e.UpostId);

            entity.ToTable("TLKN_USER_POST_MESSAGE_LIST");

            entity.Property(e => e.UpostId).HasColumnName("UPostID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingMatchConnect).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMatch).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUserLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUserShare).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MatchLikeStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.PostId).HasColumnName("PostID");
            entity.Property(e => e.PostLineCss).HasColumnName("PostLineCSS");
            entity.Property(e => e.PostTokenId).HasColumnName("PostTokenID");
            entity.Property(e => e.RemoteMobileNumberId).HasColumnName("RemoteMobileNumberID");
            entity.Property(e => e.RemoteUserId).HasColumnName("RemoteUserID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDateTimeUtc)
                .HasColumnType("smalldatetime")
                .HasColumnName("UploadDateTimeUTC");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadTime).HasDefaultValueSql("(N'00:00')");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UpostTokenId).HasColumnName("UPostTokenID");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserPostShareFilter>(entity =>
        {
            entity.HasKey(e => e.UpostFilterId);

            entity.ToTable("TLKN_USER_POST_SHARE_FILTER");

            entity.Property(e => e.UpostFilterId).HasColumnName("UPostFilterID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserMobileNumberId).HasColumnName("UserMobileNumberID");
        });

        modelBuilder.Entity<TlknUserPostShareImage>(entity =>
        {
            entity.HasKey(e => e.ImageId);

            entity.ToTable("TLKN_USER_POST_SHARE_IMAGE");

            entity.Property(e => e.ImageId).HasColumnName("ImageID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.ImageLargeUrl).HasColumnName("ImageLargeURL");
            entity.Property(e => e.ImageMidUrl).HasColumnName("ImageMidURL");
            entity.Property(e => e.ImageSmallAwayUrl).HasColumnName("ImageSmallAwayURL");
            entity.Property(e => e.ImageSmallLiveUrl).HasColumnName("ImageSmallLiveURL");
            entity.Property(e => e.ImageSmallUrl).HasColumnName("ImageSmallURL");
            entity.Property(e => e.ImageThmUrl1).HasColumnName("ImageThmURL1");
            entity.Property(e => e.ImageWebUrl).HasColumnName("ImageWebURL");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSave).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ScreenOwnerUserId).HasColumnName("ScreenOwnerUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserPostShareImageTrace>(entity =>
        {
            entity.HasKey(e => e.TraceId);

            entity.ToTable("TLKN_USER_POST_SHARE_IMAGE_TRACE");

            entity.Property(e => e.TraceId).HasColumnName("TraceID");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.ImageId).HasColumnName("ImageID");
            entity.Property(e => e.ImageLargeUrl).HasColumnName("ImageLargeURL");
            entity.Property(e => e.ImageMidUrl).HasColumnName("ImageMidURL");
            entity.Property(e => e.ImageSmallAwayUrl).HasColumnName("ImageSmallAwayURL");
            entity.Property(e => e.ImageSmallLiveUrl).HasColumnName("ImageSmallLiveURL");
            entity.Property(e => e.ImageSmallUrl).HasColumnName("ImageSmallURL");
            entity.Property(e => e.ImageThmUrl1).HasColumnName("ImageThmURL1");
            entity.Property(e => e.ImageWebUrl).HasColumnName("ImageWebURL");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSave).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ScreenOwnerUserId).HasColumnName("ScreenOwnerUserID");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserPostShareImageUserList>(entity =>
        {
            entity.HasKey(e => e.ShareId);

            entity.ToTable("TLKN_USER_POST_SHARE_IMAGE_USER_LIST");

            entity.Property(e => e.ShareId)
                .ValueGeneratedNever()
                .HasColumnName("ShareID");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.ImageId).HasColumnName("ImageID");
            entity.Property(e => e.ImageLargeUrl).HasColumnName("ImageLargeURL");
            entity.Property(e => e.ImageMidUrl).HasColumnName("ImageMidURL");
            entity.Property(e => e.ImageSmallAwayUrl).HasColumnName("ImageSmallAwayURL");
            entity.Property(e => e.ImageSmallLiveUrl).HasColumnName("ImageSmallLiveURL");
            entity.Property(e => e.ImageSmallUrl).HasColumnName("ImageSmallURL");
            entity.Property(e => e.ImageThmUrl1).HasColumnName("ImageThmURL1");
            entity.Property(e => e.ImageWebUrl).HasColumnName("ImageWebURL");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSave).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ScreenOwnerUserId).HasColumnName("ScreenOwnerUserID");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserPostShareSetting>(entity =>
        {
            entity.HasKey(e => e.UshareSettingId).HasName("PK_TLKN_USER_SHARE_SETTING");

            entity.ToTable("TLKN_USER_POST_SHARE_SETTING");

            entity.Property(e => e.UshareSettingId)
                .ValueGeneratedNever()
                .HasColumnName("UShareSettingID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'free')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserPostShareVideo>(entity =>
        {
            entity.HasKey(e => e.VideoId);

            entity.ToTable("TLKN_USER_POST_SHARE_VIDEO");

            entity.Property(e => e.VideoId).HasColumnName("VideoID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSave).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ScreenOwnerUserId).HasColumnName("ScreenOwnerUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.VideoLargeUrl).HasColumnName("VideoLargeURL");
            entity.Property(e => e.VideoMidUrl).HasColumnName("VideoMidURL");
            entity.Property(e => e.VideoSmallAwayUrl).HasColumnName("VideoSmallAwayURL");
            entity.Property(e => e.VideoSmallLiveUrl).HasColumnName("VideoSmallLiveURL");
            entity.Property(e => e.VideoSmallUrl).HasColumnName("VideoSmallURL");
            entity.Property(e => e.VideoThmUrl1).HasColumnName("VideoThmURL1");
            entity.Property(e => e.VideoWebUrl).HasColumnName("VideoWebURL");
        });

        modelBuilder.Entity<TlknUserPostShareVideoTrace>(entity =>
        {
            entity.HasKey(e => e.TraceId);

            entity.ToTable("TLKN_USER_POST_SHARE_VIDEO_TRACE");

            entity.Property(e => e.TraceId).HasColumnName("TraceID");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSave).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ScreenOwnerUserId).HasColumnName("ScreenOwnerUserID");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.VideoId).HasColumnName("VideoID");
            entity.Property(e => e.VideoLargeUrl).HasColumnName("VideoLargeURL");
            entity.Property(e => e.VideoMidUrl).HasColumnName("VideoMidURL");
            entity.Property(e => e.VideoSmallAwayUrl).HasColumnName("VideoSmallAwayURL");
            entity.Property(e => e.VideoSmallLiveUrl).HasColumnName("VideoSmallLiveURL");
            entity.Property(e => e.VideoSmallUrl).HasColumnName("VideoSmallURL");
            entity.Property(e => e.VideoThmUrl1).HasColumnName("VideoThmURL1");
            entity.Property(e => e.VideoWebUrl).HasColumnName("VideoWebURL");
        });

        modelBuilder.Entity<TlknUserPostShareVideoUserList>(entity =>
        {
            entity.HasKey(e => e.ShareId);

            entity.ToTable("TLKN_USER_POST_SHARE_VIDEO_USER_LIST");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSave).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ScreenOwnerUserId).HasColumnName("ScreenOwnerUserID");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.VideoId).HasColumnName("VideoID");
            entity.Property(e => e.VideoLargeUrl).HasColumnName("VideoLargeURL");
            entity.Property(e => e.VideoMidUrl).HasColumnName("VideoMidURL");
            entity.Property(e => e.VideoSmallAwayUrl).HasColumnName("VideoSmallAwayURL");
            entity.Property(e => e.VideoSmallLiveUrl).HasColumnName("VideoSmallLiveURL");
            entity.Property(e => e.VideoSmallUrl).HasColumnName("VideoSmallURL");
            entity.Property(e => e.VideoThmUrl1).HasColumnName("VideoThmURL1");
            entity.Property(e => e.VideoWebUrl).HasColumnName("VideoWebURL");
        });

        modelBuilder.Entity<TlknUserPostShareVideoYoutube>(entity =>
        {
            entity.HasKey(e => e.ShareYouTubeVideoId);

            entity.ToTable("TLKN_USER_POST_SHARE_VIDEO_YOUTUBE");

            entity.Property(e => e.ShareYouTubeVideoId)
                .ValueGeneratedNever()
                .HasColumnName("ShareYouTubeVideoID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSave).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ScreenOwnerUserId).HasColumnName("ScreenOwnerUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.VideoLargeUrl).HasColumnName("VideoLargeURL");
            entity.Property(e => e.VideoMidUrl).HasColumnName("VideoMidURL");
            entity.Property(e => e.VideoSmallAwayUrl).HasColumnName("VideoSmallAwayURL");
            entity.Property(e => e.VideoSmallLiveUrl).HasColumnName("VideoSmallLiveURL");
            entity.Property(e => e.VideoSmallUrl).HasColumnName("VideoSmallURL");
            entity.Property(e => e.VideoThmUrl1).HasColumnName("VideoThmURL1");
            entity.Property(e => e.VideoWebUrl).HasColumnName("VideoWebURL");
            entity.Property(e => e.YouTubeChannelId).HasColumnName("YouTubeChannelID");
            entity.Property(e => e.YouTubeVideoId).HasColumnName("YouTubeVideoID");
        });

        modelBuilder.Entity<TlknUserPostTraceList>(entity =>
        {
            entity.HasKey(e => e.UtraceId).HasName("PK_TLKN_USER_POST_TRACE");

            entity.ToTable("TLKN_USER_POST_TRACE_LIST");

            entity.Property(e => e.UtraceId).HasColumnName("UTraceID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FileId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("FileID");
            entity.Property(e => e.FileIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.FileServerUrl).HasColumnName("FileServerURL");
            entity.Property(e => e.FileUrl).HasColumnName("FileURL");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.ImageDefaultServerId).HasColumnName("ImageDefaultServerID");
            entity.Property(e => e.ImageDefaultServerUrl).HasColumnName("ImageDefaultServerURL");
            entity.Property(e => e.ImageFromMobileNumberId).HasColumnName("ImageFromMobileNumberID");
            entity.Property(e => e.ImageFromUserId).HasColumnName("ImageFromUserID");
            entity.Property(e => e.ImageIsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageIsLoading).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageIsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.ImageThumServerUrl).HasColumnName("ImageThumServerURL");
            entity.Property(e => e.ImageToMobileNumberId).HasColumnName("ImageToMobileNumberID");
            entity.Property(e => e.ImageToUserId).HasColumnName("ImageToUserID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsCreateNewChatLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingMatchConnect).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsHistoryLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMatch).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNewMessage).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsPostSave).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPostShare).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPostView).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSessionClosedLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsShareLocationAskRemoteEnable).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSpaceLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSubjectLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.LocationCountryFlagUrl).HasColumnName("LocationCountryFlagURL");
            entity.Property(e => e.LocationRequestFromRemoteUserId).HasColumnName("LocationRequestFromRemoteUserID");
            entity.Property(e => e.LocationRequestToRemoteUserId).HasColumnName("LocationRequestToRemoteUserID");
            entity.Property(e => e.MatchLikeStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.PostCode).HasDefaultValueSql("(N'text')");
            entity.Property(e => e.PostCss)
                .HasDefaultValueSql("(N'left')")
                .HasColumnName("PostCSS");
            entity.Property(e => e.PostDescriptionCss)
                .HasDefaultValueSql("(N'left')")
                .HasColumnName("PostDescriptionCSS");
            entity.Property(e => e.PostFullDescriptionCss)
                .HasDefaultValueSql("(N'left')")
                .HasColumnName("PostFullDescriptionCSS");
            entity.Property(e => e.PostId).HasColumnName("PostID");
            entity.Property(e => e.PostLineCss)
                .HasDefaultValueSql("(N'left')")
                .HasColumnName("PostLineCSS");
            entity.Property(e => e.PostMessageTextCss)
                .HasDefaultValueSql("(N'left')")
                .HasColumnName("PostMessageTextCSS");
            entity.Property(e => e.PostMiniDescriptionCss)
                .HasDefaultValueSql("(N'left')")
                .HasColumnName("PostMiniDescriptionCSS");
            entity.Property(e => e.PostNameCss)
                .HasDefaultValueSql("(N'left')")
                .HasColumnName("PostNameCSS");
            entity.Property(e => e.PostTextCss)
                .HasDefaultValueSql("(N'left')")
                .HasColumnName("PostTextCSS");
            entity.Property(e => e.PostTitleCss)
                .HasDefaultValueSql("(N'left')")
                .HasColumnName("PostTitleCSS");
            entity.Property(e => e.PostTokenId).HasColumnName("PostTokenID");
            entity.Property(e => e.PostType).HasDefaultValueSql("(N'text')");
            entity.Property(e => e.PostUrl).HasColumnName("PostURL");
            entity.Property(e => e.RemoteMobileNumberId).HasColumnName("RemoteMobileNumberID");
            entity.Property(e => e.RemoteUserId).HasColumnName("RemoteUserID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.SuggestContactListFromRemoteUserId).HasColumnName("SuggestContactListFromRemoteUserID");
            entity.Property(e => e.SuggestContactListMobileNumberId).HasColumnName("SuggestContactListMobileNumberID");
            entity.Property(e => e.SuggestContactListToRemoteUserId).HasColumnName("SuggestContactListToRemoteUserID");
            entity.Property(e => e.SuggestContactListUserId).HasColumnName("SuggestContactListUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.VideoDefaultServerId).HasColumnName("VideoDefaultServerID");
            entity.Property(e => e.VideoDefaultServerUrl).HasColumnName("VideoDefaultServerURL");
            entity.Property(e => e.VideoFromMobileNumberId).HasColumnName("VideoFromMobileNumberID");
            entity.Property(e => e.VideoFromUserId).HasColumnName("VideoFromUserID");
            entity.Property(e => e.VideoIsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoIsLoading).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoIsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.VideoThumServerUrl).HasColumnName("VideoThumServerURL");
            entity.Property(e => e.VideoToMobileNumberId).HasColumnName("VideoToMobileNumberID");
            entity.Property(e => e.VideoToUserId).HasColumnName("VideoToUserID");
        });

        modelBuilder.Entity<TlknUserPrivateshow>(entity =>
        {
            entity.HasKey(e => e.UprivateShowId);

            entity.ToTable("TLKN_USER_PRIVATESHOW");

            entity.Property(e => e.UprivateShowId).HasColumnName("UPrivateShowID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FromTlknUserId).HasColumnName("FromTlknUserID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsPrivateShowClose).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowEnd).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowInitiate).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowLoad).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowOpen).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowPending).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowSpend).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowStart).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PrivateShowCloseTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowEndTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PrivateShowID");
            entity.Property(e => e.PrivateShowInitiateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowOpenTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowPendingTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowSessionId).HasColumnName("PrivateShowSessionID");
            entity.Property(e => e.PrivateShowSpendTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowStartTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowTimeSpendHour).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.PrivateShowTimeSpendMinute).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.PrivateShowTimeSpendSecond).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.PrivateShowTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PrivateShowTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenId).HasColumnName("ScreenID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TlknUserId).HasColumnName("TlknUserID");
            entity.Property(e => e.ToTlknUserId).HasColumnName("ToTlknUserID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserPrivateshowInvitation>(entity =>
        {
            entity.HasKey(e => e.PrivateShowInviteId);

            entity.ToTable("TLKN_USER_PRIVATESHOW_INVITATION");

            entity.Property(e => e.PrivateShowInviteId).HasColumnName("PrivateShowInviteID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromTlknUserId).HasColumnName("FromTlknUserID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsNewOwner).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNewRemote).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsOpen).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowClose).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowEnd).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowInitiate).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowInviteOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowInviteShow).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowOpen).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowPending).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowSpend).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowStart).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsViewOwner).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsViewRemote).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisibleOwner).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisibleRemote).HasDefaultValueSql("((1))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PrivateShowCloseTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowEndTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowId).HasColumnName("PrivateShowID");
            entity.Property(e => e.PrivateShowInitiateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowInviteReset).HasColumnType("datetime");
            entity.Property(e => e.PrivateShowInviteStart).HasColumnType("datetime");
            entity.Property(e => e.PrivateShowOpenTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowPendingTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowSessionId).HasColumnName("PrivateShowSessionID");
            entity.Property(e => e.PrivateShowSpendTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowStartTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowTimeSpendHour).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.PrivateShowTimeSpendMinute).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.PrivateShowTimeSpendSecond).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.StartDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TlknUserId).HasColumnName("TlknUserID");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToTlknUserId).HasColumnName("ToTlknUserID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.TokenId).HasColumnName("TokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserPrivateshowLogin>(entity =>
        {
            entity.HasKey(e => e.LoginPrivateShowRoomId);

            entity.ToTable("TLKN_USER_PRIVATESHOW_LOGIN");

            entity.Property(e => e.LoginPrivateShowRoomId).HasColumnName("LoginPrivateShowRoomID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'dating')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsGuest).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsLogin).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PrivateShowId).HasColumnName("PrivateShowID");
            entity.Property(e => e.PrivateShowInviteId).HasColumnName("PrivateShowInviteID");
            entity.Property(e => e.PrivateShowSessionId).HasColumnName("PrivateShowSessionID");
            entity.Property(e => e.PrivateShowStatus).HasDefaultValueSql("(N'initial')");
            entity.Property(e => e.PrivateShowTicketId).HasColumnName("PrivateShowTicketID");
            entity.Property(e => e.ResetDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserRegisterDate).HasColumnType("smalldatetime");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.UserStatus).HasDefaultValueSql("(N'offline')");
        });

        modelBuilder.Entity<TlknUserPrivateshowOnline>(entity =>
        {
            entity.HasKey(e => e.PrivateShowLiveId).HasName("PK_TLKN_USER_PRIVATESHOW_LIVE");

            entity.ToTable("TLKN_USER_PRIVATESHOW_ONLINE");

            entity.Property(e => e.PrivateShowLiveId).HasColumnName("PrivateShowLiveID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowClose).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowEnd).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowInitiate).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowOpen).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowPending).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowSpend).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPrivateShowStart).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PrivateShowCloseTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowEndTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowId).HasColumnName("PrivateShowID");
            entity.Property(e => e.PrivateShowInitiateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowOpenTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowPendingTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowSessionId).HasColumnName("PrivateShowSessionID");
            entity.Property(e => e.PrivateShowSpendTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowStartTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowTicketId).HasColumnName("PrivateShowTicketID");
            entity.Property(e => e.PrivateShowTimeSpendHour).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.PrivateShowTimeSpendMinute).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.PrivateShowTimeSpendSecond).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.PrivateShowVideoId).HasColumnName("PrivateShowVideoID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserPrivateshowTicket>(entity =>
        {
            entity.HasKey(e => e.PrivateShowTicketId);

            entity.ToTable("TLKN_USER_PRIVATESHOW_TICKET");

            entity.Property(e => e.PrivateShowTicketId).HasColumnName("PrivateShowTicketID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsPrivateShowMaxInviteCount).HasDefaultValueSql("((0))");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PrivateShowId).HasColumnName("PrivateShowID");
            entity.Property(e => e.PrivateShowSessionId).HasColumnName("PrivateShowSessionID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenId).HasColumnName("ScreenID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserPrivateshowVideo>(entity =>
        {
            entity.HasKey(e => e.VideoId);

            entity.ToTable("TLKN_USER_PRIVATESHOW_VIDEO");

            entity.Property(e => e.VideoId).HasColumnName("VideoID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.CamFmsid).HasColumnName("CamFMSID");
            entity.Property(e => e.CamFmsurl).HasColumnName("CamFMSURL");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsModelStudio).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSend).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.PrivateShowId).HasColumnName("PrivateShowID");
            entity.Property(e => e.PrivateShowInviteId).HasColumnName("PrivateShowInviteID");
            entity.Property(e => e.PrivateShowSessionId).HasColumnName("PrivateShowSessionID");
            entity.Property(e => e.PrivateShowTicketId).HasColumnName("PrivateShowTicketID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.StudioId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("StudioID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserProfilePrivacyUserList>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TLKN_USER_PROFILE_PRIVACY_USER_LIST");

            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UprofilePrivacyId).HasColumnName("UProfilePrivacyID");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserMobileNumberId).HasColumnName("UserMobileNumberID");
        });

        modelBuilder.Entity<TlknUserProfileViewerList>(entity =>
        {
            entity.HasKey(e => e.ViewerId).HasName("PK_TLKN_USER_PROFILE_VIEWER");

            entity.ToTable("TLKN_USER_PROFILE_VIEWER_LIST");

            entity.Property(e => e.ViewerId).HasColumnName("ViewerID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.EventDateTimeEnd).HasColumnType("smalldatetime");
            entity.Property(e => e.EventDateTimeReset).HasColumnType("smalldatetime");
            entity.Property(e => e.EventDateTimeStart)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingMatchConnect).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMatch).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsNewOwner).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNewRemote).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsViewOwner).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsViewRemote).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisibleOwner).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisibleRemote).HasDefaultValueSql("((1))");
            entity.Property(e => e.MatchLikeStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDateTimeMilliSecEnd).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDateTimeMilliSecReset).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDateTimeMilliSecStart).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserMobileNumberId).HasColumnName("UserMobileNumberID");
        });

        modelBuilder.Entity<TlknUserProfileVisibleFilter>(entity =>
        {
            entity.HasKey(e => e.UprofileId).HasName("PK_TLKN_USER_PROFILE_VISIBLE_USER_LIST");

            entity.ToTable("TLKN_USER_PROFILE_VISIBLE_FILTER");

            entity.Property(e => e.UprofileId).HasColumnName("UProfileID");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserMobileNumberId).HasColumnName("UserMobileNumberID");
        });

        modelBuilder.Entity<TlknUserPurchasePaymentHistoryList>(entity =>
        {
            entity.HasKey(e => e.UpurchaseHistoryId);

            entity.ToTable("TLKN_USER_PURCHASE_PAYMENT_HISTORY_LIST");

            entity.Property(e => e.UpurchaseHistoryId).HasColumnName("UPurchaseHistoryID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'dating')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PaymentStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentTicketId).HasColumnName("PaymentTicketID");
            entity.Property(e => e.PaymentTicketStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PurchaseAgreementId).HasColumnName("PurchaseAgreementID");
            entity.Property(e => e.PurchaseApicontextId).HasColumnName("PurchaseAPIContextID");
            entity.Property(e => e.PurchaseEndDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.PurchasePackageTokenId).HasColumnName("PurchasePackageTokenID");
            entity.Property(e => e.PurchasePayerId).HasColumnName("PurchasePayerID");
            entity.Property(e => e.PurchasePaymentId).HasColumnName("PurchasePaymentID");
            entity.Property(e => e.PurchasePlanId).HasColumnName("PurchasePlanID");
            entity.Property(e => e.PurchaseRemindDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.PurchaseStartDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.PurchaseTicketTokenId).HasColumnName("PurchaseTicketTokenID");
            entity.Property(e => e.PurchaseUrlpaymentTokenId).HasColumnName("PurchaseURLPaymentTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.SiteTokenCostTotalValue).HasColumnType("money");
            entity.Property(e => e.SiteTokenPricePerOneValue).HasColumnType("money");
            entity.Property(e => e.TokenCostTotalValue).HasColumnType("money");
            entity.Property(e => e.TokenPricePerOneValue).HasColumnType("money");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserPurchasePaymentList>(entity =>
        {
            entity.HasKey(e => e.UpurchaseId);

            entity.ToTable("TLKN_USER_PURCHASE_PAYMENT_LIST");

            entity.Property(e => e.UpurchaseId).HasColumnName("UPurchaseID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'dating')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PaymentStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentTicketId).HasColumnName("PaymentTicketID");
            entity.Property(e => e.PaymentTicketStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PurchaseAgreementId).HasColumnName("PurchaseAgreementID");
            entity.Property(e => e.PurchaseApicontextId).HasColumnName("PurchaseAPIContextID");
            entity.Property(e => e.PurchaseEndDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.PurchasePackageTokenId).HasColumnName("PurchasePackageTokenID");
            entity.Property(e => e.PurchasePayerId).HasColumnName("PurchasePayerID");
            entity.Property(e => e.PurchasePaymentId).HasColumnName("PurchasePaymentID");
            entity.Property(e => e.PurchasePlanId).HasColumnName("PurchasePlanID");
            entity.Property(e => e.PurchaseRemindDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.PurchaseStartDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.PurchaseTicketTokenId).HasColumnName("PurchaseTicketTokenID");
            entity.Property(e => e.PurchaseUrlpaymentTokenId).HasColumnName("PurchaseURLPaymentTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.SiteTokenCostTotalValue).HasColumnType("money");
            entity.Property(e => e.SiteTokenPricePerOneValue).HasColumnType("money");
            entity.Property(e => e.TokenCostTotalValue).HasColumnType("money");
            entity.Property(e => e.TokenPricePerOneValue).HasColumnType("money");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserPurchasePaymentSuspendList>(entity =>
        {
            entity.HasKey(e => e.UpurchaseSuspendId);

            entity.ToTable("TLKN_USER_PURCHASE_PAYMENT_SUSPEND_LIST");

            entity.Property(e => e.UpurchaseSuspendId).HasColumnName("UPurchaseSuspendID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'dating')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PaymentStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentTicketId).HasColumnName("PaymentTicketID");
            entity.Property(e => e.PaymentTicketStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PurchaseAgreementId).HasColumnName("PurchaseAgreementID");
            entity.Property(e => e.PurchaseApicontextId).HasColumnName("PurchaseAPIContextID");
            entity.Property(e => e.PurchaseEndDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.PurchasePackageTokenId).HasColumnName("PurchasePackageTokenID");
            entity.Property(e => e.PurchasePayerId).HasColumnName("PurchasePayerID");
            entity.Property(e => e.PurchasePaymentId).HasColumnName("PurchasePaymentID");
            entity.Property(e => e.PurchasePlanId).HasColumnName("PurchasePlanID");
            entity.Property(e => e.PurchaseRemindDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.PurchaseStartDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.PurchaseTicketTokenId).HasColumnName("PurchaseTicketTokenID");
            entity.Property(e => e.PurchaseUrlpaymentTokenId).HasColumnName("PurchaseURLPaymentTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.SiteTokenCostTotalValue).HasColumnType("money");
            entity.Property(e => e.SiteTokenPricePerOneValue).HasColumnType("money");
            entity.Property(e => e.TokenCostTotalValue).HasColumnType("money");
            entity.Property(e => e.TokenPricePerOneValue).HasColumnType("money");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserPurchasePaymentTicketTokenList>(entity =>
        {
            entity.HasKey(e => e.UpurchaseTicketTokenId);

            entity.ToTable("TLKN_USER_PURCHASE_PAYMENT_TICKET_TOKEN_LIST");

            entity.Property(e => e.UpurchaseTicketTokenId).HasColumnName("UPurchaseTicketTokenID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'dating')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PaymentStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentTicketId).HasColumnName("PaymentTicketID");
            entity.Property(e => e.PaymentTicketStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PurchaseAgreementId).HasColumnName("PurchaseAgreementID");
            entity.Property(e => e.PurchaseApicontextId).HasColumnName("PurchaseAPIContextID");
            entity.Property(e => e.PurchaseEndDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.PurchasePackageTokenId).HasColumnName("PurchasePackageTokenID");
            entity.Property(e => e.PurchasePayerId).HasColumnName("PurchasePayerID");
            entity.Property(e => e.PurchasePaymentId).HasColumnName("PurchasePaymentID");
            entity.Property(e => e.PurchasePlanId).HasColumnName("PurchasePlanID");
            entity.Property(e => e.PurchaseRemindDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.PurchaseStartDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.PurchaseTicketTokenId).HasColumnName("PurchaseTicketTokenID");
            entity.Property(e => e.PurchaseUrlpaymentTokenId).HasColumnName("PurchaseURLPaymentTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.SiteTokenCostTotalValue).HasColumnType("money");
            entity.Property(e => e.SiteTokenPricePerOneValue).HasColumnType("money");
            entity.Property(e => e.TokenCostTotalValue).HasColumnType("money");
            entity.Property(e => e.TokenPricePerOneValue).HasColumnType("money");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserRequestList>(entity =>
        {
            entity.HasKey(e => e.UrequestId);

            entity.ToTable("TLKN_USER_REQUEST_LIST");

            entity.Property(e => e.UrequestId).HasColumnName("URequestID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingMatchConnect).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMatch).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.IsNewOwner).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNewRemote).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsReply).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsViewOwner).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsViewRemote).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisibleOwner).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisibleRemote).HasDefaultValueSql("((1))");
            entity.Property(e => e.MatchLikeStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RequestTokenId).HasColumnName("RequestTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeUtc)
                .HasColumnType("smalldatetime")
                .HasColumnName("UploadDateTimeUTC");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserMobileNumberId).HasColumnName("UserMobileNumberID");
        });

        modelBuilder.Entity<TlknUserScreenCallShow>(entity =>
        {
            entity.HasKey(e => e.ScreenCallShowId);

            entity.ToTable("TLKN_USER_SCREEN_CALL_SHOW");

            entity.Property(e => e.ScreenCallShowId).HasColumnName("ScreenCallShowID");
            entity.Property(e => e.FromTlknUserId).HasColumnName("FromTlknUserID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.GroupShowEndMessageId).HasColumnName("GroupShowEndMessageID");
            entity.Property(e => e.GroupShowId).HasColumnName("GroupShowID");
            entity.Property(e => e.GroupShowInviteId).HasColumnName("GroupShowInviteID");
            entity.Property(e => e.GroupShowSessionId).HasColumnName("GroupShowSessionID");
            entity.Property(e => e.GroupShowStartMessageId).HasColumnName("GroupShowStartMessageID");
            entity.Property(e => e.GroupShowTicketId).HasColumnName("GroupShowTicketID");
            entity.Property(e => e.InviteOwnerSessionId).HasColumnName("InviteOwnerSessionID");
            entity.Property(e => e.InviteOwnerUserId).HasColumnName("InviteOwnerUserID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNotificationShow).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsScreenOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.NotificationReset).HasColumnType("smalldatetime");
            entity.Property(e => e.NotificationStart)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowId).HasColumnName("PrivateShowID");
            entity.Property(e => e.PrivateShowSessionId).HasColumnName("PrivateShowSessionID");
            entity.Property(e => e.PrivateShowTicketId).HasColumnName("PrivateShowTicketID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ScreenOwnerUserId).HasColumnName("ScreenOwnerUserID");
            entity.Property(e => e.ShowId).HasColumnName("ShowID");
            entity.Property(e => e.ShowSessionId).HasColumnName("ShowSessionID");
            entity.Property(e => e.ShowTicketId).HasColumnName("ShowTicketID");
            entity.Property(e => e.TlknUserId).HasColumnName("TlknUserID");
            entity.Property(e => e.ToGroupId).HasColumnName("ToGroupID");
            entity.Property(e => e.ToTlknUserId).HasColumnName("ToTlknUserID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.VideoShowId).HasColumnName("VideoShowID");
            entity.Property(e => e.VideoShowSessionId).HasColumnName("VideoShowSessionID");
            entity.Property(e => e.VideoShowTicketId).HasColumnName("VideoShowTicketID");
            entity.Property(e => e.VoiceShowId).HasColumnName("VoiceShowID");
            entity.Property(e => e.VoiceShowSessionId).HasColumnName("VoiceShowSessionID");
            entity.Property(e => e.VoiceShowTicketId).HasColumnName("VoiceShowTicketID");
        });

        modelBuilder.Entity<TlknUserScreenCallShowTicket>(entity =>
        {
            entity.HasKey(e => e.ScreenCallShowTicketId);

            entity.ToTable("TLKN_USER_SCREEN_CALL_SHOW_TICKET");

            entity.Property(e => e.ScreenCallShowTicketId).HasColumnName("ScreenCallShowTicketID");
            entity.Property(e => e.CallTokenId)
                .HasDefaultValueSql("(N'close')")
                .HasColumnName("CallTokenID");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromTlknUserId).HasColumnName("FromTlknUserID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.GroupShowEndMessageId).HasColumnName("GroupShowEndMessageID");
            entity.Property(e => e.GroupShowId).HasColumnName("GroupShowID");
            entity.Property(e => e.GroupShowInviteId).HasColumnName("GroupShowInviteID");
            entity.Property(e => e.GroupShowSessionId).HasColumnName("GroupShowSessionID");
            entity.Property(e => e.GroupShowStartMessageId).HasColumnName("GroupShowStartMessageID");
            entity.Property(e => e.GroupShowTicketId).HasColumnName("GroupShowTicketID");
            entity.Property(e => e.InviteOwnerSessionId).HasColumnName("InviteOwnerSessionID");
            entity.Property(e => e.InviteOwnerUserId).HasColumnName("InviteOwnerUserID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNotificationShow).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsScreenOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.NotificationReset).HasColumnType("smalldatetime");
            entity.Property(e => e.NotificationStart)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowId).HasColumnName("PrivateShowID");
            entity.Property(e => e.PrivateShowSessionId).HasColumnName("PrivateShowSessionID");
            entity.Property(e => e.PrivateShowTicketId).HasColumnName("PrivateShowTicketID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenCallShowId).HasColumnName("ScreenCallShowID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ScreenOwnerUserId).HasColumnName("ScreenOwnerUserID");
            entity.Property(e => e.ShowId).HasColumnName("ShowID");
            entity.Property(e => e.ShowSessionId).HasColumnName("ShowSessionID");
            entity.Property(e => e.ShowTicketId).HasColumnName("ShowTicketID");
            entity.Property(e => e.TlknUserId).HasColumnName("TlknUserID");
            entity.Property(e => e.ToGroupId).HasColumnName("ToGroupID");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToTlknUserId).HasColumnName("ToTlknUserID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.VideoShowId).HasColumnName("VideoShowID");
            entity.Property(e => e.VideoShowSessionId).HasColumnName("VideoShowSessionID");
            entity.Property(e => e.VideoShowTicketId).HasColumnName("VideoShowTicketID");
            entity.Property(e => e.VoiceShowId).HasColumnName("VoiceShowID");
            entity.Property(e => e.VoiceShowSessionId).HasColumnName("VoiceShowSessionID");
            entity.Property(e => e.VoiceShowTicketId).HasColumnName("VoiceShowTicketID");
        });

        modelBuilder.Entity<TlknUserScreenChatShow>(entity =>
        {
            entity.HasKey(e => e.ScreenChatShowId).HasName("PK_TLKN_USER_SCREEN_HISTORY");

            entity.ToTable("TLKN_USER_SCREEN_CHAT_SHOW");

            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.FromTlknUserId).HasColumnName("FromTlknUserID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.GroupShowEndMessageId).HasColumnName("GroupShowEndMessageID");
            entity.Property(e => e.GroupShowId).HasColumnName("GroupShowID");
            entity.Property(e => e.GroupShowInviteId).HasColumnName("GroupShowInviteID");
            entity.Property(e => e.GroupShowSessionId).HasColumnName("GroupShowSessionID");
            entity.Property(e => e.GroupShowStartMessageId).HasColumnName("GroupShowStartMessageID");
            entity.Property(e => e.GroupShowTicketId).HasColumnName("GroupShowTicketID");
            entity.Property(e => e.InviteOwnerSessionId).HasColumnName("InviteOwnerSessionID");
            entity.Property(e => e.InviteOwnerUserId).HasColumnName("InviteOwnerUserID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNotificationShow).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsScreenOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.NotificationReset).HasColumnType("smalldatetime");
            entity.Property(e => e.NotificationStart)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowId).HasColumnName("PrivateShowID");
            entity.Property(e => e.PrivateShowSessionId).HasColumnName("PrivateShowSessionID");
            entity.Property(e => e.PrivateShowTicketId).HasColumnName("PrivateShowTicketID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ScreenOwnerUserId).HasColumnName("ScreenOwnerUserID");
            entity.Property(e => e.ShowId).HasColumnName("ShowID");
            entity.Property(e => e.ShowSessionId).HasColumnName("ShowSessionID");
            entity.Property(e => e.ShowTicketId).HasColumnName("ShowTicketID");
            entity.Property(e => e.TlknUserId).HasColumnName("TlknUserID");
            entity.Property(e => e.ToGroupId).HasColumnName("ToGroupID");
            entity.Property(e => e.ToTlknUserId).HasColumnName("ToTlknUserID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.VideoShowId).HasColumnName("VideoShowID");
            entity.Property(e => e.VideoShowSessionId).HasColumnName("VideoShowSessionID");
            entity.Property(e => e.VideoShowTicketId).HasColumnName("VideoShowTicketID");
            entity.Property(e => e.VoiceShowId).HasColumnName("VoiceShowID");
            entity.Property(e => e.VoiceShowSessionId).HasColumnName("VoiceShowSessionID");
            entity.Property(e => e.VoiceShowTicketId).HasColumnName("VoiceShowTicketID");
        });

        modelBuilder.Entity<TlknUserScreenChatShowGroupOnline>(entity =>
        {
            entity.HasKey(e => e.UgroupId);

            entity.ToTable("TLKN_USER_SCREEN_CHAT_SHOW_GROUP_ONLINE");

            entity.Property(e => e.UgroupId).HasColumnName("UGroupID");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.InviteOwnerMobileNumberId).HasColumnName("InviteOwnerMobileNumberID");
            entity.Property(e => e.InviteOwnerUserId).HasColumnName("InviteOwnerUserID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsOpen).HasDefaultValueSql("((1))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.MobileNumberId1).HasColumnName("MobileNumberID1");
            entity.Property(e => e.MobileNumberId2).HasColumnName("MobileNumberID2");
            entity.Property(e => e.MobileNumberId3).HasColumnName("MobileNumberID3");
            entity.Property(e => e.MobileNumberId4).HasColumnName("MobileNumberID4");
            entity.Property(e => e.MobileNumberId5).HasColumnName("MobileNumberID5");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserId1).HasColumnName("UserID1");
            entity.Property(e => e.UserId2).HasColumnName("UserID2");
            entity.Property(e => e.UserId3).HasColumnName("UserID3");
            entity.Property(e => e.UserId4).HasColumnName("UserID4");
            entity.Property(e => e.UserId5).HasColumnName("UserID5");
        });

        modelBuilder.Entity<TlknUserScreenChatShowGroupUserTemp>(entity =>
        {
            entity.HasKey(e => e.ScreenChatShowGroupUserTempId);

            entity.ToTable("TLKN_USER_SCREEN_CHAT_SHOW_GROUP_USER_TEMP");

            entity.Property(e => e.ScreenChatShowGroupUserTempId).HasColumnName("ScreenChatShowGroupUserTempID");
            entity.Property(e => e.FromTlknUserId).HasColumnName("FromTlknUserID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.InviteOwnerRequestUserId).HasColumnName("InviteOwnerRequestUserID");
            entity.Property(e => e.InviteOwnerSessionId).HasColumnName("InviteOwnerSessionID");
            entity.Property(e => e.InviteOwnerUserId).HasColumnName("InviteOwnerUserID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsOpen).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ScreenChatShowTicketLineId).HasColumnName("ScreenChatShowTicketLineID");
            entity.Property(e => e.ScreenChatShowTicketTempId).HasColumnName("ScreenChatShowTicketTempID");
            entity.Property(e => e.ScreenOwnerUserId).HasColumnName("ScreenOwnerUserID");
            entity.Property(e => e.TlknUserId).HasColumnName("TlknUserID");
            entity.Property(e => e.ToGroupId).HasColumnName("ToGroupID");
            entity.Property(e => e.ToTlknUserId).HasColumnName("ToTlknUserID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserScreenChatShowInvitation>(entity =>
        {
            entity.HasKey(e => e.ScreenChatShowInviteId);

            entity.ToTable("TLKN_USER_SCREEN_CHAT_SHOW_INVITATION");

            entity.Property(e => e.ScreenChatShowInviteId).HasColumnName("ScreenChatShowInviteID");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromTlknUserId).HasColumnName("FromTlknUserID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.InviteOwnerMobileNumberId).HasColumnName("InviteOwnerMobileNumberID");
            entity.Property(e => e.InviteOwnerUserId).HasColumnName("InviteOwnerUserID");
            entity.Property(e => e.InviteOwnerUserSessionId).HasColumnName("InviteOwnerUserSessionID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsScreenChatShowClose).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsScreenChatShowEnd).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsScreenChatShowInitiate).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsScreenChatShowInviteOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsScreenChatShowInviteShow).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsScreenChatShowOpen).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsScreenChatShowPending).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsScreenChatShowSpend).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsScreenChatShowStart).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsScreenOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowCloseTime).HasColumnType("smalldatetime");
            entity.Property(e => e.ScreenChatShowEndTime).HasColumnType("smalldatetime");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowInitiateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.ScreenChatShowInviteReset).HasColumnType("datetime");
            entity.Property(e => e.ScreenChatShowInviteStart).HasColumnType("datetime");
            entity.Property(e => e.ScreenChatShowOpenTime).HasColumnType("smalldatetime");
            entity.Property(e => e.ScreenChatShowPendingTime).HasColumnType("smalldatetime");
            entity.Property(e => e.ScreenChatShowSpendTime).HasColumnType("smalldatetime");
            entity.Property(e => e.ScreenChatShowStartTime).HasColumnType("smalldatetime");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ScreenChatShowTicketTempId).HasColumnName("ScreenChatShowTicketTempID");
            entity.Property(e => e.ScreenChatShowTimeSpendHour).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.ScreenChatShowTimeSpendMinute).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.ScreenChatShowTimeSpendSecond).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.ScreenOwnerUserId).HasColumnName("ScreenOwnerUserID");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TlknUserId).HasColumnName("TlknUserID");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToTlknUserId).HasColumnName("ToTlknUserID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.VideoShowId).HasColumnName("VideoShowID");
            entity.Property(e => e.VideoShowSessionId).HasColumnName("VideoShowSessionID");
        });

        modelBuilder.Entity<TlknUserScreenChatShowInvite>(entity =>
        {
            entity.HasKey(e => e.HistoryId);

            entity.ToTable("TLKN_USER_SCREEN_CHAT_SHOW_INVITE");

            entity.Property(e => e.HistoryId).HasColumnName("HistoryID");
            entity.Property(e => e.FromTlknUserId).HasColumnName("FromTlknUserID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.GroupShowEndMessageId).HasColumnName("GroupShowEndMessageID");
            entity.Property(e => e.GroupShowId).HasColumnName("GroupShowID");
            entity.Property(e => e.GroupShowInviteId).HasColumnName("GroupShowInviteID");
            entity.Property(e => e.GroupShowSessionId).HasColumnName("GroupShowSessionID");
            entity.Property(e => e.GroupShowStartMessageId).HasColumnName("GroupShowStartMessageID");
            entity.Property(e => e.GroupShowTicketId).HasColumnName("GroupShowTicketID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNotificationShow).HasDefaultValueSql("((0))");
            entity.Property(e => e.NotificationReset).HasColumnType("smalldatetime");
            entity.Property(e => e.NotificationStart)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowId).HasColumnName("PrivateShowID");
            entity.Property(e => e.PrivateShowSessionId).HasColumnName("PrivateShowSessionID");
            entity.Property(e => e.PrivateShowTicketId).HasColumnName("PrivateShowTicketID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ShowId).HasColumnName("ShowID");
            entity.Property(e => e.ShowSessionId).HasColumnName("ShowSessionID");
            entity.Property(e => e.ShowTicketId).HasColumnName("ShowTicketID");
            entity.Property(e => e.TlknUserId).HasColumnName("TlknUserID");
            entity.Property(e => e.ToTlknUserId).HasColumnName("ToTlknUserID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.UploadDate).HasColumnType("smalldatetime");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.VideoShowId).HasColumnName("VideoShowID");
            entity.Property(e => e.VideoShowSessionId).HasColumnName("VideoShowSessionID");
            entity.Property(e => e.VideoShowTicketId).HasColumnName("VideoShowTicketID");
            entity.Property(e => e.VoiceShowId).HasColumnName("VoiceShowID");
            entity.Property(e => e.VoiceShowSessionId).HasColumnName("VoiceShowSessionID");
            entity.Property(e => e.VoiceShowTicketId).HasColumnName("VoiceShowTicketID");
        });

        modelBuilder.Entity<TlknUserScreenChatShowLogin>(entity =>
        {
            entity.HasKey(e => e.ScreenLoginId).HasName("PK_TLKN_USER_SCREEN_LOGIN");

            entity.ToTable("TLKN_USER_SCREEN_CHAT_SHOW_LOGIN");

            entity.Property(e => e.ScreenLoginId).HasColumnName("ScreenLoginID");
            entity.Property(e => e.FromTlknUserId).HasColumnName("FromTlknUserID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.GroupShowId).HasColumnName("GroupShowID");
            entity.Property(e => e.GroupShowInviteId).HasColumnName("GroupShowInviteID");
            entity.Property(e => e.GroupShowSessionId).HasColumnName("GroupShowSessionID");
            entity.Property(e => e.GroupShowTicketId).HasColumnName("GroupShowTicketID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsLogin).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNotificationShow).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsScreenOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.NotificationReset).HasColumnType("smalldatetime");
            entity.Property(e => e.NotificationStart)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowId).HasColumnName("PrivateShowID");
            entity.Property(e => e.PrivateShowSessionId).HasColumnName("PrivateShowSessionID");
            entity.Property(e => e.PrivateShowTicketId).HasColumnName("PrivateShowTicketID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ScreenChatShowTicketTempId).HasColumnName("ScreenChatShowTicketTempID");
            entity.Property(e => e.ShowId).HasColumnName("ShowID");
            entity.Property(e => e.ShowSessionId).HasColumnName("ShowSessionID");
            entity.Property(e => e.ShowTicketId).HasColumnName("ShowTicketID");
            entity.Property(e => e.TlknUserId).HasColumnName("TlknUserID");
            entity.Property(e => e.ToTlknUserId).HasColumnName("ToTlknUserID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.VideoShowId).HasColumnName("VideoShowID");
            entity.Property(e => e.VideoShowSessionId).HasColumnName("VideoShowSessionID");
            entity.Property(e => e.VideoShowTicketId).HasColumnName("VideoShowTicketID");
            entity.Property(e => e.VoiceShowId).HasColumnName("VoiceShowID");
            entity.Property(e => e.VoiceShowSessionId).HasColumnName("VoiceShowSessionID");
            entity.Property(e => e.VoiceShowTicketId).HasColumnName("VoiceShowTicketID");
        });

        modelBuilder.Entity<TlknUserScreenChatShowMessage>(entity =>
        {
            entity.HasKey(e => e.MsgScreenChatShowId);

            entity.ToTable("TLKN_USER_SCREEN_CHAT_SHOW_MESSAGE");

            entity.Property(e => e.MsgScreenChatShowId).HasColumnName("MsgScreenChatShowID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FileId).HasColumnName("FileID");
            entity.Property(e => e.FileIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.GroupType).HasDefaultValueSql("(N'private')");
            entity.Property(e => e.ImageDefaultServerId).HasColumnName("ImageDefaultServerID");
            entity.Property(e => e.ImageDefaultServerUrl).HasColumnName("ImageDefaultServerURL");
            entity.Property(e => e.ImageFromMobileNumberId).HasColumnName("ImageFromMobileNumberID");
            entity.Property(e => e.ImageFromUserId).HasColumnName("ImageFromUserID");
            entity.Property(e => e.ImageIsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageIsLoading).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageIsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.ImageIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.ImageThumServerUrl).HasColumnName("ImageThumServerURL");
            entity.Property(e => e.ImageToMobileNumberId).HasColumnName("ImageToMobileNumberID");
            entity.Property(e => e.ImageToUserId).HasColumnName("ImageToUserID");
            entity.Property(e => e.InviteOwnerMobileNumberId).HasColumnName("InviteOwnerMobileNumberID");
            entity.Property(e => e.InviteOwnerUserId).HasColumnName("InviteOwnerUserID");
            entity.Property(e => e.InviteTag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsCreateNewChatLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDelivered).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsHistoryLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNewMessage).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSessionClosedLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsShareLocationAskRemoteEnable).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSpaceLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSubjectLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.LocationCountryFlagUrl).HasColumnName("LocationCountryFlagURL");
            entity.Property(e => e.LocationRequestFromRemoteUserId).HasColumnName("LocationRequestFromRemoteUserID");
            entity.Property(e => e.LocationRequestToRemoteUserId).HasColumnName("LocationRequestToRemoteUserID");
            entity.Property(e => e.MessageTokenId).HasColumnName("MessageTokenID");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowId1).HasColumnName("ScreenChatShowID1");
            entity.Property(e => e.ScreenChatShowId2).HasColumnName("ScreenChatShowID2");
            entity.Property(e => e.ScreenChatShowId3).HasColumnName("ScreenChatShowID3");
            entity.Property(e => e.ScreenChatShowId4).HasColumnName("ScreenChatShowID4");
            entity.Property(e => e.ScreenChatShowId5).HasColumnName("ScreenChatShowID5");
            entity.Property(e => e.ScreenChatShowId6).HasColumnName("ScreenChatShowID6");
            entity.Property(e => e.ScreenChatShowId7).HasColumnName("ScreenChatShowID7");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.StaticMapUrl).HasColumnName("StaticMapURL");
            entity.Property(e => e.SuggestContactListFromRemoteUserId).HasColumnName("SuggestContactListFromRemoteUserID");
            entity.Property(e => e.SuggestContactListMobileNumberId).HasColumnName("SuggestContactListMobileNumberID");
            entity.Property(e => e.SuggestContactListToRemoteUserId).HasColumnName("SuggestContactListToRemoteUserID");
            entity.Property(e => e.SuggestContactListUserId).HasColumnName("SuggestContactListUserID");
            entity.Property(e => e.Tag).HasDefaultValueSql("(N'chat')");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDateTimeUtc)
                .HasColumnType("smalldatetime")
                .HasColumnName("UploadDateTimeUTC");
            entity.Property(e => e.UploadDateUtc)
                .HasColumnType("smalldatetime")
                .HasColumnName("UploadDateUTC");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadDayUtc)
                .HasColumnType("money")
                .HasColumnName("UploadDayUTC");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadMonthUtc).HasColumnName("UploadMonthUTC");
            entity.Property(e => e.UploadTimeUtc).HasColumnName("UploadTimeUTC");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UploadYearUtc).HasColumnName("UploadYearUTC");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.VideoDefaultServerId).HasColumnName("VideoDefaultServerID");
            entity.Property(e => e.VideoDefaultServerUrl).HasColumnName("VideoDefaultServerURL");
            entity.Property(e => e.VideoFromMobileNumberId).HasColumnName("VideoFromMobileNumberID");
            entity.Property(e => e.VideoFromUserId).HasColumnName("VideoFromUserID");
            entity.Property(e => e.VideoIsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoIsLoading).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoIsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.VideoIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.VideoShowInviteId).HasColumnName("VideoShowInviteID");
            entity.Property(e => e.VideoThumServerUrl).HasColumnName("VideoThumServerURL");
            entity.Property(e => e.VideoToMobileNumberId).HasColumnName("VideoToMobileNumberID");
            entity.Property(e => e.VideoToUserId).HasColumnName("VideoToUserID");
            entity.Property(e => e.VoiceDefaultServerId).HasColumnName("VoiceDefaultServerID");
            entity.Property(e => e.VoiceDefaultServerUrl).HasColumnName("VoiceDefaultServerURL");
            entity.Property(e => e.VoiceFromMobileNumberId).HasColumnName("VoiceFromMobileNumberID");
            entity.Property(e => e.VoiceFromUserId).HasColumnName("VoiceFromUserID");
            entity.Property(e => e.VoiceIsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.VoiceIsLoading).HasDefaultValueSql("((0))");
            entity.Property(e => e.VoiceIsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.VoiceIsViewOnly).HasDefaultValueSql("((1))");
            entity.Property(e => e.VoiceShowInviteId).HasColumnName("VoiceShowInviteID");
            entity.Property(e => e.VoiceThumServerUrl).HasColumnName("VoiceThumServerURL");
            entity.Property(e => e.VoiceToMobileNumberId).HasColumnName("VoiceToMobileNumberID");
            entity.Property(e => e.VoiceToUserId).HasColumnName("VoiceToUserID");
        });

        modelBuilder.Entity<TlknUserScreenChatShowOwnerTemp>(entity =>
        {
            entity.HasKey(e => e.OwnerTempId).HasName("PK_TLKN_USER_SCREEN_CHAT_SHOW_OWNER_TEMP_1");

            entity.ToTable("TLKN_USER_SCREEN_CHAT_SHOW_OWNER_TEMP");

            entity.Property(e => e.OwnerTempId).HasColumnName("OwnerTempID");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FromTlknUserId).HasColumnName("FromTlknUserID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.InviteOwnerRequestUserId).HasColumnName("InviteOwnerRequestUserID");
            entity.Property(e => e.InviteOwnerSessionId).HasColumnName("InviteOwnerSessionID");
            entity.Property(e => e.InviteOwnerUserId).HasColumnName("InviteOwnerUserID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAdmin).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ScreenChatShowTicketLineId).HasColumnName("ScreenChatShowTicketLineID");
            entity.Property(e => e.ScreenChatShowTicketTempId).HasColumnName("ScreenChatShowTicketTempID");
            entity.Property(e => e.ScreenOwnerUserId).HasColumnName("ScreenOwnerUserID");
            entity.Property(e => e.TlknUserId).HasColumnName("TlknUserID");
            entity.Property(e => e.ToGroupId).HasColumnName("ToGroupID");
            entity.Property(e => e.ToTlknUserId).HasColumnName("ToTlknUserID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserScreenChatShowSeparatorLine>(entity =>
        {
            entity.HasKey(e => e.ScreenChatShowLineId).HasName("PK_TLKN_USER_SCREEN_CHAT_SHOW_LINE");

            entity.ToTable("TLKN_USER_SCREEN_CHAT_SHOW_SEPARATOR_LINE");

            entity.Property(e => e.ScreenChatShowLineId).HasColumnName("ScreenChatShowLineID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ScreenOwnerUserId).HasColumnName("ScreenOwnerUserID");
            entity.Property(e => e.TempGroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("TempGroupID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserScreenChatShowTicket>(entity =>
        {
            entity.HasKey(e => e.ScreenChatShowTicketId);

            entity.ToTable("TLKN_USER_SCREEN_CHAT_SHOW_TICKET");

            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.FromTlknUserId).HasColumnName("FromTlknUserID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.GroupShowEndMessageId).HasColumnName("GroupShowEndMessageID");
            entity.Property(e => e.GroupShowId).HasColumnName("GroupShowID");
            entity.Property(e => e.GroupShowInviteId).HasColumnName("GroupShowInviteID");
            entity.Property(e => e.GroupShowSessionId).HasColumnName("GroupShowSessionID");
            entity.Property(e => e.GroupShowStartMessageId).HasColumnName("GroupShowStartMessageID");
            entity.Property(e => e.GroupShowTicketId).HasColumnName("GroupShowTicketID");
            entity.Property(e => e.InviteOwnerSessionId).HasColumnName("InviteOwnerSessionID");
            entity.Property(e => e.InviteOwnerUserId).HasColumnName("InviteOwnerUserID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNotificationShow).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsScreenOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.NotificationReset).HasColumnType("smalldatetime");
            entity.Property(e => e.NotificationStart)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowId).HasColumnName("PrivateShowID");
            entity.Property(e => e.PrivateShowSessionId).HasColumnName("PrivateShowSessionID");
            entity.Property(e => e.PrivateShowTicketId).HasColumnName("PrivateShowTicketID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenOwnerUserId).HasColumnName("ScreenOwnerUserID");
            entity.Property(e => e.ShowId).HasColumnName("ShowID");
            entity.Property(e => e.ShowSessionId).HasColumnName("ShowSessionID");
            entity.Property(e => e.ShowTicketId).HasColumnName("ShowTicketID");
            entity.Property(e => e.TlknUserId).HasColumnName("TlknUserID");
            entity.Property(e => e.ToGroupId).HasColumnName("ToGroupID");
            entity.Property(e => e.ToTlknUserId).HasColumnName("ToTlknUserID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.VideoShowId).HasColumnName("VideoShowID");
            entity.Property(e => e.VideoShowSessionId).HasColumnName("VideoShowSessionID");
            entity.Property(e => e.VideoShowTicketId).HasColumnName("VideoShowTicketID");
            entity.Property(e => e.VoiceShowId).HasColumnName("VoiceShowID");
            entity.Property(e => e.VoiceShowSessionId).HasColumnName("VoiceShowSessionID");
            entity.Property(e => e.VoiceShowTicketId).HasColumnName("VoiceShowTicketID");
        });

        modelBuilder.Entity<TlknUserSession>(entity =>
        {
            entity.HasKey(e => e.UsessionId);

            entity.ToTable("TLKN_USER_SESSION");

            entity.Property(e => e.UsessionId).HasColumnName("USessionID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.GuestId).HasColumnName("GuestID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginUserIp).HasColumnName("LoginUserIP");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.SessionId).HasColumnName("SessionID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserIp).HasColumnName("UserIP");
            entity.Property(e => e.UserLoginStatus).HasDefaultValueSql("(N'NotApproved')");
            entity.Property(e => e.UserMoodStatus).HasDefaultValueSql("(N'NotApproved')");
        });

        modelBuilder.Entity<TlknUserShareContactList>(entity =>
        {
            entity.HasKey(e => e.UshareListId);

            entity.ToTable("TLKN_USER_SHARE_CONTACT_LIST");

            entity.Property(e => e.UshareListId)
                .ValueGeneratedNever()
                .HasColumnName("UShareListID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingMatchConnect).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMatch).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MatchLikeStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserMobileNumberId).HasColumnName("UserMobileNumberID");
        });

        modelBuilder.Entity<TlknUserShareFile>(entity =>
        {
            entity.HasKey(e => e.FileId);

            entity.ToTable("TLKN_USER_SHARE_FILE");

            entity.Property(e => e.FileId).HasColumnName("FileID");
            entity.Property(e => e.FileLargeUrl).HasColumnName("FileLargeURL");
            entity.Property(e => e.FileSmallAwayUrl).HasColumnName("FileSmallAwayURL");
            entity.Property(e => e.FileSmallLiveUrl).HasColumnName("FileSmallLiveURL");
            entity.Property(e => e.FileSmallUrl).HasColumnName("FileSmallURL");
            entity.Property(e => e.FileThmUrl1).HasColumnName("FileThmURL1");
            entity.Property(e => e.FileWebUrl).HasColumnName("FileWebURL");
            entity.Property(e => e.FileeMidUrl).HasColumnName("FileeMidURL");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSave).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ScreenOwnerUserId).HasColumnName("ScreenOwnerUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserShareFileTrace>(entity =>
        {
            entity.HasKey(e => e.TraceId);

            entity.ToTable("TLKN_USER_SHARE_FILE_TRACE");

            entity.Property(e => e.TraceId).HasColumnName("TraceID");
            entity.Property(e => e.FileId).HasColumnName("FileID");
            entity.Property(e => e.FileLargeUrl).HasColumnName("FileLargeURL");
            entity.Property(e => e.FileMidUrl).HasColumnName("FileMidURL");
            entity.Property(e => e.FileSmallAwayUrl).HasColumnName("FileSmallAwayURL");
            entity.Property(e => e.FileSmallLiveUrl).HasColumnName("FileSmallLiveURL");
            entity.Property(e => e.FileSmallUrl).HasColumnName("FileSmallURL");
            entity.Property(e => e.FileThmUrl1).HasColumnName("FileThmURL1");
            entity.Property(e => e.FileWebUrl).HasColumnName("FileWebURL");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSave).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ScreenOwnerUserId).HasColumnName("ScreenOwnerUserID");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserShareFileUserList>(entity =>
        {
            entity.HasKey(e => e.ShareId);

            entity.ToTable("TLKN_USER_SHARE_FILE_USER_LIST");

            entity.Property(e => e.ShareId).HasColumnName("ShareID");
            entity.Property(e => e.FileId).HasColumnName("FileID");
            entity.Property(e => e.FileLargeUrl).HasColumnName("FileLargeURL");
            entity.Property(e => e.FileMidUrl).HasColumnName("FileMidURL");
            entity.Property(e => e.FileSmallAwayUrl).HasColumnName("FileSmallAwayURL");
            entity.Property(e => e.FileSmallLiveUrl).HasColumnName("FileSmallLiveURL");
            entity.Property(e => e.FileSmallUrl).HasColumnName("FileSmallURL");
            entity.Property(e => e.FileThmUrl1).HasColumnName("FileThmURL1");
            entity.Property(e => e.FileWebUrl).HasColumnName("FileWebURL");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSave).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ScreenOwnerUserId).HasColumnName("ScreenOwnerUserID");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeUtc)
                .HasColumnType("smalldatetime")
                .HasColumnName("UploadDateTimeUTC");
            entity.Property(e => e.UploadDateUtc)
                .HasColumnType("smalldatetime")
                .HasColumnName("UploadDateUTC");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadDayUtc)
                .HasColumnType("money")
                .HasColumnName("UploadDayUTC");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadMonthUtc).HasColumnName("UploadMonthUTC");
            entity.Property(e => e.UploadTimeUtc).HasColumnName("UploadTimeUTC");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UploadYearUtc).HasColumnName("UploadYearUTC");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserShareImage>(entity =>
        {
            entity.HasKey(e => e.ImageId);

            entity.ToTable("TLKN_USER_SHARE_IMAGE");

            entity.Property(e => e.ImageId)
                .ValueGeneratedNever()
                .HasColumnName("ImageID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.ImageLargeUrl).HasColumnName("ImageLargeURL");
            entity.Property(e => e.ImageMidUrl).HasColumnName("ImageMidURL");
            entity.Property(e => e.ImageSmallAwayUrl).HasColumnName("ImageSmallAwayURL");
            entity.Property(e => e.ImageSmallLiveUrl).HasColumnName("ImageSmallLiveURL");
            entity.Property(e => e.ImageSmallUrl).HasColumnName("ImageSmallURL");
            entity.Property(e => e.ImageThmUrl1).HasColumnName("ImageThmURL1");
            entity.Property(e => e.ImageWebUrl).HasColumnName("ImageWebURL");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSave).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ScreenOwnerUserId).HasColumnName("ScreenOwnerUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserShareImageTrace>(entity =>
        {
            entity.HasKey(e => e.TraceId);

            entity.ToTable("TLKN_USER_SHARE_IMAGE_TRACE");

            entity.Property(e => e.TraceId)
                .ValueGeneratedNever()
                .HasColumnName("TraceID");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.ImageId).HasColumnName("ImageID");
            entity.Property(e => e.ImageLargeUrl).HasColumnName("ImageLargeURL");
            entity.Property(e => e.ImageMidUrl).HasColumnName("ImageMidURL");
            entity.Property(e => e.ImageSmallAwayUrl).HasColumnName("ImageSmallAwayURL");
            entity.Property(e => e.ImageSmallLiveUrl).HasColumnName("ImageSmallLiveURL");
            entity.Property(e => e.ImageSmallUrl).HasColumnName("ImageSmallURL");
            entity.Property(e => e.ImageThmUrl1).HasColumnName("ImageThmURL1");
            entity.Property(e => e.ImageWebUrl).HasColumnName("ImageWebURL");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSave).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ScreenOwnerUserId).HasColumnName("ScreenOwnerUserID");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserShareImageUserList>(entity =>
        {
            entity.HasKey(e => e.ShareId);

            entity.ToTable("TLKN_USER_SHARE_IMAGE_USER_LIST");

            entity.Property(e => e.ShareId)
                .ValueGeneratedNever()
                .HasColumnName("ShareID");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.ImageId).HasColumnName("ImageID");
            entity.Property(e => e.ImageLargeUrl).HasColumnName("ImageLargeURL");
            entity.Property(e => e.ImageMidUrl).HasColumnName("ImageMidURL");
            entity.Property(e => e.ImageSmallAwayUrl).HasColumnName("ImageSmallAwayURL");
            entity.Property(e => e.ImageSmallLiveUrl).HasColumnName("ImageSmallLiveURL");
            entity.Property(e => e.ImageSmallUrl).HasColumnName("ImageSmallURL");
            entity.Property(e => e.ImageThmUrl1).HasColumnName("ImageThmURL1");
            entity.Property(e => e.ImageWebUrl).HasColumnName("ImageWebURL");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSave).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ScreenOwnerUserId).HasColumnName("ScreenOwnerUserID");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserShareLocation>(entity =>
        {
            entity.HasKey(e => e.UlocationId);

            entity.ToTable("TLKN_USER_SHARE_LOCATION");

            entity.Property(e => e.UlocationId).HasColumnName("ULocationID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.ImageLargeUrl).HasColumnName("ImageLargeURL");
            entity.Property(e => e.ImageMidUrl).HasColumnName("ImageMidURL");
            entity.Property(e => e.ImageSmallAwayUrl).HasColumnName("ImageSmallAwayURL");
            entity.Property(e => e.ImageSmallLiveUrl).HasColumnName("ImageSmallLiveURL");
            entity.Property(e => e.ImageSmallUrl).HasColumnName("ImageSmallURL");
            entity.Property(e => e.ImageThmUrl1).HasColumnName("ImageThmURL1");
            entity.Property(e => e.ImageWebUrl).HasColumnName("ImageWebURL");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSave).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ScreenOwnerUserId).HasColumnName("ScreenOwnerUserID");
            entity.Property(e => e.StreetLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.StreetLine1).HasDefaultValueSql("((0))");
            entity.Property(e => e.StreetLine2).HasDefaultValueSql("((0))");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserShareVideo>(entity =>
        {
            entity.HasKey(e => e.VideoId);

            entity.ToTable("TLKN_USER_SHARE_VIDEO");

            entity.Property(e => e.VideoId)
                .ValueGeneratedNever()
                .HasColumnName("VideoID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSave).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ScreenOwnerUserId).HasColumnName("ScreenOwnerUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.VideoLargeUrl).HasColumnName("VideoLargeURL");
            entity.Property(e => e.VideoMidUrl).HasColumnName("VideoMidURL");
            entity.Property(e => e.VideoSmallAwayUrl).HasColumnName("VideoSmallAwayURL");
            entity.Property(e => e.VideoSmallLiveUrl).HasColumnName("VideoSmallLiveURL");
            entity.Property(e => e.VideoSmallUrl).HasColumnName("VideoSmallURL");
            entity.Property(e => e.VideoThmUrl1).HasColumnName("VideoThmURL1");
            entity.Property(e => e.VideoWebUrl).HasColumnName("VideoWebURL");
        });

        modelBuilder.Entity<TlknUserShareVideoTrace>(entity =>
        {
            entity.HasKey(e => e.TraceId);

            entity.ToTable("TLKN_USER_SHARE_VIDEO_TRACE");

            entity.Property(e => e.TraceId)
                .ValueGeneratedNever()
                .HasColumnName("TraceID");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSave).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ScreenOwnerUserId).HasColumnName("ScreenOwnerUserID");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.VideoId).HasColumnName("VideoID");
            entity.Property(e => e.VideoLargeUrl).HasColumnName("VideoLargeURL");
            entity.Property(e => e.VideoMidUrl).HasColumnName("VideoMidURL");
            entity.Property(e => e.VideoSmallAwayUrl).HasColumnName("VideoSmallAwayURL");
            entity.Property(e => e.VideoSmallLiveUrl).HasColumnName("VideoSmallLiveURL");
            entity.Property(e => e.VideoSmallUrl).HasColumnName("VideoSmallURL");
            entity.Property(e => e.VideoThmUrl1).HasColumnName("VideoThmURL1");
            entity.Property(e => e.VideoWebUrl).HasColumnName("VideoWebURL");
        });

        modelBuilder.Entity<TlknUserShareVideoUserList>(entity =>
        {
            entity.HasKey(e => e.ShareId);

            entity.ToTable("TLKN_USER_SHARE_VIDEO_USER_LIST");

            entity.Property(e => e.ShareId)
                .ValueGeneratedNever()
                .HasColumnName("ShareID");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.GroupId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDownload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSave).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.ScreenChatShowTicketId).HasColumnName("ScreenChatShowTicketID");
            entity.Property(e => e.ScreenOwnerUserId).HasColumnName("ScreenOwnerUserID");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.VideoId).HasColumnName("VideoID");
            entity.Property(e => e.VideoLargeUrl).HasColumnName("VideoLargeURL");
            entity.Property(e => e.VideoMidUrl).HasColumnName("VideoMidURL");
            entity.Property(e => e.VideoSmallAwayUrl).HasColumnName("VideoSmallAwayURL");
            entity.Property(e => e.VideoSmallLiveUrl).HasColumnName("VideoSmallLiveURL");
            entity.Property(e => e.VideoSmallUrl).HasColumnName("VideoSmallURL");
            entity.Property(e => e.VideoThmUrl1).HasColumnName("VideoThmURL1");
            entity.Property(e => e.VideoWebUrl).HasColumnName("VideoWebURL");
        });

        modelBuilder.Entity<TlknUserShopStickerList>(entity =>
        {
            entity.HasKey(e => e.UshopStickerId);

            entity.ToTable("TLKN_USER_SHOP_STICKER_LIST");

            entity.Property(e => e.UshopStickerId).HasColumnName("UShopStickerID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.CostPrice)
                .HasDefaultValueSql("(N'0')")
                .HasColumnType("money");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsApproved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsCostFree).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTlknEmotion).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PaymentEarnTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("PaymentEarnTokenID");
            entity.Property(e => e.PaymentTicketId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PaymentTicketID");
            entity.Property(e => e.PaymentTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("PaymentTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.StickerCategoryId).HasColumnName("StickerCategoryID");
            entity.Property(e => e.StickerId).HasColumnName("StickerID");
            entity.Property(e => e.StickerImageLargeUrl).HasColumnName("StickerImageLargeURL");
            entity.Property(e => e.StickerImageMidUrl).HasColumnName("StickerImageMidURL");
            entity.Property(e => e.StickerImageSmallUrl).HasColumnName("StickerImageSmallURL");
            entity.Property(e => e.StickerSetId).HasColumnName("StickerSetID");
            entity.Property(e => e.StickerSetTokenId).HasColumnName("StickerSetTokenID");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserType).HasDefaultValueSql("(N'owner')");
        });

        modelBuilder.Entity<TlknUserShopThemeList>(entity =>
        {
            entity.HasKey(e => e.UthemeId);

            entity.ToTable("TLKN_USER_SHOP_THEME_LIST");

            entity.Property(e => e.UthemeId).HasColumnName("UThemeID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.CostPrice)
                .HasDefaultValueSql("(N'0')")
                .HasColumnType("money");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsApproved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsCostFree).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTlknEmotion).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PaymentEarnTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("PaymentEarnTokenID");
            entity.Property(e => e.PaymentTicketId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PaymentTicketID");
            entity.Property(e => e.PaymentTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("PaymentTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ThemeCategoryId).HasColumnName("ThemeCategoryID");
            entity.Property(e => e.ThemeId).HasColumnName("ThemeID");
            entity.Property(e => e.ThemeImageLargeUrl).HasColumnName("ThemeImageLargeURL");
            entity.Property(e => e.ThemeImageMidUrl).HasColumnName("ThemeImageMidURL");
            entity.Property(e => e.ThemeImageSmallUrl).HasColumnName("ThemeImageSmallURL");
            entity.Property(e => e.ThemeSetId).HasColumnName("ThemeSetID");
            entity.Property(e => e.ThemeTokenId).HasColumnName("ThemeTokenID");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserType).HasDefaultValueSql("(N'owner')");
        });

        modelBuilder.Entity<TlknUserShopWallpaperList>(entity =>
        {
            entity.HasKey(e => e.UshopWallpaperId);

            entity.ToTable("TLKN_USER_SHOP_WALLPAPER_LIST");

            entity.Property(e => e.UshopWallpaperId).HasColumnName("UShopWallpaperID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.CostPrice)
                .HasDefaultValueSql("(N'0')")
                .HasColumnType("money");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsApproved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsCostFree).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTlknEmotion).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PaymentEarnTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("PaymentEarnTokenID");
            entity.Property(e => e.PaymentTicketId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PaymentTicketID");
            entity.Property(e => e.PaymentTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("PaymentTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserType).HasDefaultValueSql("(N'owner')");
            entity.Property(e => e.WallpaperCategoryId).HasColumnName("WallpaperCategoryID");
            entity.Property(e => e.WallpaperId).HasColumnName("WallpaperID");
            entity.Property(e => e.WallpaperImageLargeUrl).HasColumnName("WallpaperImageLargeURL");
            entity.Property(e => e.WallpaperImageMidUrl).HasColumnName("WallpaperImageMidURL");
            entity.Property(e => e.WallpaperImageSmallUrl).HasColumnName("WallpaperImageSmallURL");
            entity.Property(e => e.WallpaperSetId).HasColumnName("WallpaperSetID");
            entity.Property(e => e.WallpaperSetTokenId).HasColumnName("WallpaperSetTokenID");
        });

        modelBuilder.Entity<TlknUserShowFile>(entity =>
        {
            entity.HasKey(e => e.FileId);

            entity.ToTable("TLKN_USER_SHOW_FILE");

            entity.Property(e => e.FileId).HasColumnName("FileID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ShowId).HasColumnName("ShowID");
            entity.Property(e => e.ShowSessionId).HasColumnName("ShowSessionID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserShowHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId);

            entity.ToTable("TLKN_USER_SHOW_HISTORY");

            entity.Property(e => e.HistoryId).HasColumnName("HistoryID");
            entity.Property(e => e.FromTlknUserId).HasColumnName("FromTlknUserID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.GroupShowEndMessageId).HasColumnName("GroupShowEndMessageID");
            entity.Property(e => e.GroupShowId).HasColumnName("GroupShowID");
            entity.Property(e => e.GroupShowInviteId).HasColumnName("GroupShowInviteID");
            entity.Property(e => e.GroupShowSessionId).HasColumnName("GroupShowSessionID");
            entity.Property(e => e.GroupShowStartMessageId).HasColumnName("GroupShowStartMessageID");
            entity.Property(e => e.GroupShowTicketId).HasColumnName("GroupShowTicketID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNotificationShow).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.NotificationReset).HasColumnType("smalldatetime");
            entity.Property(e => e.NotificationStart)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowId).HasColumnName("PrivateShowID");
            entity.Property(e => e.PrivateShowSessionId).HasColumnName("PrivateShowSessionID");
            entity.Property(e => e.PrivateShowTicketId).HasColumnName("PrivateShowTicketID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ShowId).HasColumnName("ShowID");
            entity.Property(e => e.ShowSessionId).HasColumnName("ShowSessionID");
            entity.Property(e => e.ShowTicketId).HasColumnName("ShowTicketID");
            entity.Property(e => e.TlknUserId).HasColumnName("TlknUserID");
            entity.Property(e => e.ToTlknUserId).HasColumnName("ToTlknUserID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.UploadDate).HasColumnType("smalldatetime");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.VideoShowId).HasColumnName("VideoShowID");
            entity.Property(e => e.VideoShowSessionId).HasColumnName("VideoShowSessionID");
            entity.Property(e => e.VideoShowTicketId).HasColumnName("VideoShowTicketID");
            entity.Property(e => e.VoiceShowId).HasColumnName("VoiceShowID");
            entity.Property(e => e.VoiceShowSessionId).HasColumnName("VoiceShowSessionID");
            entity.Property(e => e.VoiceShowTicketId).HasColumnName("VoiceShowTicketID");
        });

        modelBuilder.Entity<TlknUserShowLogin>(entity =>
        {
            entity.HasKey(e => e.LoginId);

            entity.ToTable("TLKN_USER_SHOW_LOGIN");

            entity.Property(e => e.LoginId).HasColumnName("LoginID");
            entity.Property(e => e.FromTlknUserId).HasColumnName("FromTlknUserID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.GroupShowId).HasColumnName("GroupShowID");
            entity.Property(e => e.GroupShowInviteId).HasColumnName("GroupShowInviteID");
            entity.Property(e => e.GroupShowSessionId).HasColumnName("GroupShowSessionID");
            entity.Property(e => e.GroupShowTicketId).HasColumnName("GroupShowTicketID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsNotificationShow).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.NotificationReset).HasColumnType("smalldatetime");
            entity.Property(e => e.NotificationStart)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.PrivateShowId).HasColumnName("PrivateShowID");
            entity.Property(e => e.PrivateShowSessionId).HasColumnName("PrivateShowSessionID");
            entity.Property(e => e.PrivateShowTicketId).HasColumnName("PrivateShowTicketID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ShowId).HasColumnName("ShowID");
            entity.Property(e => e.ShowSessionId).HasColumnName("ShowSessionID");
            entity.Property(e => e.ShowTicketId).HasColumnName("ShowTicketID");
            entity.Property(e => e.TlknUserId).HasColumnName("TlknUserID");
            entity.Property(e => e.ToTlknUserId).HasColumnName("ToTlknUserID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.VideoShowId).HasColumnName("VideoShowID");
            entity.Property(e => e.VideoShowSessionId).HasColumnName("VideoShowSessionID");
            entity.Property(e => e.VideoShowTicketId).HasColumnName("VideoShowTicketID");
            entity.Property(e => e.VoiceShowId).HasColumnName("VoiceShowID");
            entity.Property(e => e.VoiceShowSessionId).HasColumnName("VoiceShowSessionID");
            entity.Property(e => e.VoiceShowTicketId).HasColumnName("VoiceShowTicketID");
        });

        modelBuilder.Entity<TlknUserShowYoutubevideo>(entity =>
        {
            entity.HasKey(e => e.VideoId).HasName("PK_TLKN_USER_SHOW_VIDEO");

            entity.ToTable("TLKN_USER_SHOW_YOUTUBEVIDEO");

            entity.Property(e => e.VideoId).HasColumnName("VideoID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsShareAll).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ShowId).HasColumnName("ShowID");
            entity.Property(e => e.ShowSessionId).HasColumnName("ShowSessionID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.YouTubeVideoId).HasColumnName("YouTubeVideoID");
            entity.Property(e => e.YouTubeVideoUrl).HasColumnName("YouTubeVideoURL");
        });

        modelBuilder.Entity<TlknUserSound>(entity =>
        {
            entity.HasKey(e => e.UsoundId);

            entity.ToTable("TLKN_USER_SOUND");

            entity.Property(e => e.UsoundId).HasColumnName("USoundID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.SoundId).HasColumnName("SoundID");
            entity.Property(e => e.UploadDate).HasColumnType("smalldatetime");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserSoundEvent>(entity =>
        {
            entity.HasKey(e => e.EventSoundId);

            entity.ToTable("TLKN_USER_SOUND_EVENT");

            entity.Property(e => e.EventSoundId).HasColumnName("EventSoundID");
            entity.Property(e => e.EventSoundShowId).HasColumnName("EventSoundShowID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((0))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate).HasColumnType("smalldatetime");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserStickerCategoryList>(entity =>
        {
            entity.HasKey(e => e.UstickerCategoryId).HasName("PK_TLKN_USER_STICKER_CATEGORY_LIST_1");

            entity.ToTable("TLKN_USER_STICKER_CATEGORY_LIST");

            entity.Property(e => e.UstickerCategoryId).HasColumnName("UStickerCategoryID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.CategoryOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.CategoryTokenId).HasColumnName("CategoryTokenID");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.ImageCount).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDefault).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.StickerImageLargeUrl).HasColumnName("StickerImageLargeURL");
            entity.Property(e => e.StickerImageMidUrl).HasColumnName("StickerImageMidURL");
            entity.Property(e => e.StickerImageSmallUrl).HasColumnName("StickerImageSmallURL");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserStickerCountList>(entity =>
        {
            entity.HasKey(e => e.UstickerCountId);

            entity.ToTable("TLKN_USER_STICKER_COUNT_LIST");

            entity.Property(e => e.UstickerCountId).HasColumnName("UStickerCountID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.CategoryOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.CostPrice)
                .HasDefaultValueSql("(N'0')")
                .HasColumnType("money");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.ImageCount).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsCostFree).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDefault).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.StickerImageLargeUrl).HasColumnName("StickerImageLargeURL");
            entity.Property(e => e.StickerImageMidUrl).HasColumnName("StickerImageMidURL");
            entity.Property(e => e.StickerImageSmallUrl).HasColumnName("StickerImageSmallURL");
            entity.Property(e => e.StickerSetId).HasColumnName("StickerSetID");
            entity.Property(e => e.StickerSetTokenId).HasColumnName("StickerSetTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserStickerImageList>(entity =>
        {
            entity.HasKey(e => e.UstickerId).HasName("PK_TLKN_USER_STICKER_LIST_1");

            entity.ToTable("TLKN_USER_STICKER_IMAGE_LIST");

            entity.Property(e => e.UstickerId).HasColumnName("UStickerID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.ImageLargeUrl).HasColumnName("ImageLargeURL");
            entity.Property(e => e.ImageMidUrl).HasColumnName("ImageMidURL");
            entity.Property(e => e.ImageSmallAwayUrl).HasColumnName("ImageSmallAwayURL");
            entity.Property(e => e.ImageSmallLiveUrl).HasColumnName("ImageSmallLiveURL");
            entity.Property(e => e.ImageSmallUrl).HasColumnName("ImageSmallURL");
            entity.Property(e => e.ImageTokenId).HasColumnName("ImageTokenID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAnimate).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsApproved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTlknEmotion).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.StickerCategoryId).HasColumnName("StickerCategoryID");
            entity.Property(e => e.StickerImageLargeUrl).HasColumnName("StickerImageLargeURL");
            entity.Property(e => e.StickerImageMidUrl).HasColumnName("StickerImageMidURL");
            entity.Property(e => e.StickerImageSmallUrl).HasColumnName("StickerImageSmallURL");
            entity.Property(e => e.StickerImageUrl).HasColumnName("StickerImageURL");
            entity.Property(e => e.StickerSetId).HasColumnName("StickerSetID");
            entity.Property(e => e.StickerSetTokenId).HasColumnName("StickerSetTokenID");
            entity.Property(e => e.StickerTokenId).HasColumnName("StickerTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserStickerLikeList>(entity =>
        {
            entity.HasKey(e => e.UlikeId);

            entity.ToTable("TLKN_USER_STICKER_LIKE_LIST");

            entity.Property(e => e.UlikeId).HasColumnName("ULikeID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.ImageLargeUrl).HasColumnName("ImageLargeURL");
            entity.Property(e => e.ImageMidUrl).HasColumnName("ImageMidURL");
            entity.Property(e => e.ImageSmallAwayUrl).HasColumnName("ImageSmallAwayURL");
            entity.Property(e => e.ImageSmallLiveUrl).HasColumnName("ImageSmallLiveURL");
            entity.Property(e => e.ImageSmallUrl).HasColumnName("ImageSmallURL");
            entity.Property(e => e.ImageTokenId).HasColumnName("ImageTokenID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsApproved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTlknEmotion).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.StickerCategoryId).HasColumnName("StickerCategoryID");
            entity.Property(e => e.StickerId).HasColumnName("StickerID");
            entity.Property(e => e.StickerImageLargeUrl).HasColumnName("StickerImageLargeURL");
            entity.Property(e => e.StickerImageMidUrl).HasColumnName("StickerImageMidURL");
            entity.Property(e => e.StickerImageSmallUrl).HasColumnName("StickerImageSmallURL");
            entity.Property(e => e.StickerSetId).HasColumnName("StickerSetID");
            entity.Property(e => e.StickerSetTokenId).HasColumnName("StickerSetTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserStickerPreviewList>(entity =>
        {
            entity.HasKey(e => e.UpreviewId);

            entity.ToTable("TLKN_USER_STICKER_PREVIEW_LIST");

            entity.Property(e => e.UpreviewId).HasColumnName("UPreviewID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.ImageLargeUrl).HasColumnName("ImageLargeURL");
            entity.Property(e => e.ImageMidUrl).HasColumnName("ImageMidURL");
            entity.Property(e => e.ImageSmallAwayUrl).HasColumnName("ImageSmallAwayURL");
            entity.Property(e => e.ImageSmallLiveUrl).HasColumnName("ImageSmallLiveURL");
            entity.Property(e => e.ImageSmallUrl).HasColumnName("ImageSmallURL");
            entity.Property(e => e.ImageTokenId).HasColumnName("ImageTokenID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsApproved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTlknEmotion).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.StickerCategoryId).HasColumnName("StickerCategoryID");
            entity.Property(e => e.StickerId).HasColumnName("StickerID");
            entity.Property(e => e.StickerImageLargeUrl).HasColumnName("StickerImageLargeURL");
            entity.Property(e => e.StickerImageMidUrl).HasColumnName("StickerImageMidURL");
            entity.Property(e => e.StickerImageSmallUrl).HasColumnName("StickerImageSmallURL");
            entity.Property(e => e.StickerSetId).HasColumnName("StickerSetID");
            entity.Property(e => e.StickerSetTokenId).HasColumnName("StickerSetTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserStickerRateList>(entity =>
        {
            entity.HasKey(e => e.UrateId);

            entity.ToTable("TLKN_USER_STICKER_RATE_LIST");

            entity.Property(e => e.UrateId).HasColumnName("URateID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.ImageLargeUrl).HasColumnName("ImageLargeURL");
            entity.Property(e => e.ImageMidUrl).HasColumnName("ImageMidURL");
            entity.Property(e => e.ImageSmallAwayUrl).HasColumnName("ImageSmallAwayURL");
            entity.Property(e => e.ImageSmallLiveUrl).HasColumnName("ImageSmallLiveURL");
            entity.Property(e => e.ImageSmallUrl).HasColumnName("ImageSmallURL");
            entity.Property(e => e.ImageTokenId).HasColumnName("ImageTokenID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsApproved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTlknEmotion).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.StickerCategoryId).HasColumnName("StickerCategoryID");
            entity.Property(e => e.StickerImageLargeUrl).HasColumnName("StickerImageLargeURL");
            entity.Property(e => e.StickerImageMidUrl).HasColumnName("StickerImageMidURL");
            entity.Property(e => e.StickerImageSmallUrl).HasColumnName("StickerImageSmallURL");
            entity.Property(e => e.StickerSetId).HasColumnName("StickerSetID");
            entity.Property(e => e.StickerSetTokenId).HasColumnName("StickerSetTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UstickerId).HasColumnName("UStickerID");
        });

        modelBuilder.Entity<TlknUserStickerSetList>(entity =>
        {
            entity.HasKey(e => e.UstickerSetId);

            entity.ToTable("TLKN_USER_STICKER_SET_LIST");

            entity.Property(e => e.UstickerSetId).HasColumnName("UStickerSetID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.CategoryOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.CostPrice)
                .HasDefaultValueSql("(N'0')")
                .HasColumnType("money");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.ImageCount).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAdultContent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsCostFree).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDefault).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.StickerImageLargeUrl).HasColumnName("StickerImageLargeURL");
            entity.Property(e => e.StickerImageMidUrl).HasColumnName("StickerImageMidURL");
            entity.Property(e => e.StickerImageSmallUrl).HasColumnName("StickerImageSmallURL");
            entity.Property(e => e.StickerSetTokenId).HasColumnName("StickerSetTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserStickerShareList>(entity =>
        {
            entity.HasKey(e => e.UshareId);

            entity.ToTable("TLKN_USER_STICKER_SHARE_LIST");

            entity.Property(e => e.UshareId).HasColumnName("UShareID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.ImageLargeUrl).HasColumnName("ImageLargeURL");
            entity.Property(e => e.ImageMidUrl).HasColumnName("ImageMidURL");
            entity.Property(e => e.ImageSmallAwayUrl).HasColumnName("ImageSmallAwayURL");
            entity.Property(e => e.ImageSmallLiveUrl).HasColumnName("ImageSmallLiveURL");
            entity.Property(e => e.ImageSmallUrl).HasColumnName("ImageSmallURL");
            entity.Property(e => e.ImageTokenId).HasColumnName("ImageTokenID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsApproved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTlknEmotion).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.StickerCategoryId).HasColumnName("StickerCategoryID");
            entity.Property(e => e.StickerImageLargeUrl).HasColumnName("StickerImageLargeURL");
            entity.Property(e => e.StickerImageMidUrl).HasColumnName("StickerImageMidURL");
            entity.Property(e => e.StickerImageSmallUrl).HasColumnName("StickerImageSmallURL");
            entity.Property(e => e.StickerSetId).HasColumnName("StickerSetID");
            entity.Property(e => e.StickerSetTokenId).HasColumnName("StickerSetTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UstickerId).HasColumnName("UStickerID");
        });

        modelBuilder.Entity<TlknUserStickerTopList>(entity =>
        {
            entity.HasKey(e => e.UstickerTopCountId);

            entity.ToTable("TLKN_USER_STICKER_TOP_LIST");

            entity.Property(e => e.UstickerTopCountId).HasColumnName("UStickerTopCountID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsApproved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTlknEmotion).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.StickerCategoryId).HasColumnName("StickerCategoryID");
            entity.Property(e => e.StickerImageLargeUrl).HasColumnName("StickerImageLargeURL");
            entity.Property(e => e.StickerImageMidUrl).HasColumnName("StickerImageMidURL");
            entity.Property(e => e.StickerImageSmallUrl).HasColumnName("StickerImageSmallURL");
            entity.Property(e => e.StickerImageUrl).HasColumnName("StickerImageURL");
            entity.Property(e => e.StickerSetId).HasColumnName("StickerSetID");
            entity.Property(e => e.StickerSetTokenId).HasColumnName("StickerSetTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserStickerViewList>(entity =>
        {
            entity.HasKey(e => e.UviewId);

            entity.ToTable("TLKN_USER_STICKER_VIEW_LIST");

            entity.Property(e => e.UviewId).HasColumnName("UViewID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.ImageLargeUrl).HasColumnName("ImageLargeURL");
            entity.Property(e => e.ImageMidUrl).HasColumnName("ImageMidURL");
            entity.Property(e => e.ImageSmallAwayUrl).HasColumnName("ImageSmallAwayURL");
            entity.Property(e => e.ImageSmallLiveUrl).HasColumnName("ImageSmallLiveURL");
            entity.Property(e => e.ImageSmallUrl).HasColumnName("ImageSmallURL");
            entity.Property(e => e.ImageTokenId).HasColumnName("ImageTokenID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsApproved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTlknEmotion).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.StickerCategoryId).HasColumnName("StickerCategoryID");
            entity.Property(e => e.StickerId).HasColumnName("StickerID");
            entity.Property(e => e.StickerImageLargeUrl).HasColumnName("StickerImageLargeURL");
            entity.Property(e => e.StickerImageMidUrl).HasColumnName("StickerImageMidURL");
            entity.Property(e => e.StickerImageSmallUrl).HasColumnName("StickerImageSmallURL");
            entity.Property(e => e.StickerSetId).HasColumnName("StickerSetID");
            entity.Property(e => e.StickerSetTokenId).HasColumnName("StickerSetTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserSubscriptionMessageList>(entity =>
        {
            entity.HasKey(e => e.UsubscriptionId);

            entity.ToTable("TLKN_USER_SUBSCRIPTION_MESSAGE_LIST");

            entity.Property(e => e.UsubscriptionId).HasColumnName("USubscriptionID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'dating')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PaymentStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentTicketId).HasColumnName("PaymentTicketID");
            entity.Property(e => e.PaymentTicketStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.SiteTokenCostTotalValue).HasColumnType("money");
            entity.Property(e => e.SiteTokenPricePerOneValue).HasColumnType("money");
            entity.Property(e => e.SubscriptionAgreementId).HasColumnName("SubscriptionAgreementID");
            entity.Property(e => e.SubscriptionAmount).HasDefaultValueSql("((0))");
            entity.Property(e => e.SubscriptionApicontextId).HasColumnName("SubscriptionAPIContextID");
            entity.Property(e => e.SubscriptionEndDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.SubscriptionGateway).HasDefaultValueSql("((0))");
            entity.Property(e => e.SubscriptionPayerId).HasColumnName("SubscriptionPayerID");
            entity.Property(e => e.SubscriptionPlanId).HasColumnName("SubscriptionPlanID");
            entity.Property(e => e.SubscriptionRemindDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.SubscriptionStartDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.SubscriptionTicketTokenId).HasColumnName("SubscriptionTicketTokenID");
            entity.Property(e => e.SubscriptionUrlpaymentTokenId).HasColumnName("SubscriptionURLPaymentTokenID");
            entity.Property(e => e.TokenCostTotalValue).HasColumnType("money");
            entity.Property(e => e.TokenPricePerOneValue).HasColumnType("money");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserSubscriptionPaymentHistoryList>(entity =>
        {
            entity.HasKey(e => e.UsubscriptionHistoryId);

            entity.ToTable("TLKN_USER_SUBSCRIPTION_PAYMENT_HISTORY_LIST");

            entity.Property(e => e.UsubscriptionHistoryId).HasColumnName("USubscriptionHistoryID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'dating')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PaymentStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentTicketId).HasColumnName("PaymentTicketID");
            entity.Property(e => e.PaymentTicketStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.SiteTokenCostTotalValue).HasColumnType("money");
            entity.Property(e => e.SiteTokenPricePerOneValue).HasColumnType("money");
            entity.Property(e => e.SubscriptionAgreementId).HasColumnName("SubscriptionAgreementID");
            entity.Property(e => e.SubscriptionAmount).HasDefaultValueSql("((0))");
            entity.Property(e => e.SubscriptionApicontextId).HasColumnName("SubscriptionAPIContextID");
            entity.Property(e => e.SubscriptionEndDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.SubscriptionGateway).HasDefaultValueSql("((0))");
            entity.Property(e => e.SubscriptionPayerId).HasColumnName("SubscriptionPayerID");
            entity.Property(e => e.SubscriptionPlanId).HasColumnName("SubscriptionPlanID");
            entity.Property(e => e.SubscriptionRemindDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.SubscriptionStartDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.SubscriptionTicketTokenId).HasColumnName("SubscriptionTicketTokenID");
            entity.Property(e => e.SubscriptionUrlpaymentTokenId).HasColumnName("SubscriptionURLPaymentTokenID");
            entity.Property(e => e.TokenCostTotalValue).HasColumnType("money");
            entity.Property(e => e.TokenPricePerOneValue).HasColumnType("money");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserSubscriptionPaymentList>(entity =>
        {
            entity.HasKey(e => e.UsubscriptionId);

            entity.ToTable("TLKN_USER_SUBSCRIPTION_PAYMENT_LIST");

            entity.Property(e => e.UsubscriptionId).HasColumnName("USubscriptionID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'dating')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PaymentStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentTicketId).HasColumnName("PaymentTicketID");
            entity.Property(e => e.PaymentTicketStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.SiteTokenCostTotalValue).HasColumnType("money");
            entity.Property(e => e.SiteTokenPricePerOneValue).HasColumnType("money");
            entity.Property(e => e.SubscriptionAgreementId).HasColumnName("SubscriptionAgreementID");
            entity.Property(e => e.SubscriptionAmount).HasDefaultValueSql("((0))");
            entity.Property(e => e.SubscriptionApicontextId).HasColumnName("SubscriptionAPIContextID");
            entity.Property(e => e.SubscriptionEndDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.SubscriptionGateway).HasDefaultValueSql("((0))");
            entity.Property(e => e.SubscriptionPayerId).HasColumnName("SubscriptionPayerID");
            entity.Property(e => e.SubscriptionPlanId).HasColumnName("SubscriptionPlanID");
            entity.Property(e => e.SubscriptionRemindDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.SubscriptionStartDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.SubscriptionTicketTokenId).HasColumnName("SubscriptionTicketTokenID");
            entity.Property(e => e.SubscriptionUrlpaymentTokenId).HasColumnName("SubscriptionURLPaymentTokenID");
            entity.Property(e => e.TokenCostTotalValue).HasColumnType("money");
            entity.Property(e => e.TokenPricePerOneValue).HasColumnType("money");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserSubscriptionPaymentSuspendList>(entity =>
        {
            entity.HasKey(e => e.UsubscriptionSuspendId);

            entity.ToTable("TLKN_USER_SUBSCRIPTION_PAYMENT_SUSPEND_LIST");

            entity.Property(e => e.UsubscriptionSuspendId).HasColumnName("USubscriptionSuspendID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'dating')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PaymentStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentTicketId).HasColumnName("PaymentTicketID");
            entity.Property(e => e.PaymentTicketStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.SiteTokenCostTotalValue).HasColumnType("money");
            entity.Property(e => e.SiteTokenPricePerOneValue).HasColumnType("money");
            entity.Property(e => e.SubscriptionAgreementId).HasColumnName("SubscriptionAgreementID");
            entity.Property(e => e.SubscriptionAmount).HasDefaultValueSql("((0))");
            entity.Property(e => e.SubscriptionApicontextId).HasColumnName("SubscriptionAPIContextID");
            entity.Property(e => e.SubscriptionEndDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.SubscriptionGateway).HasDefaultValueSql("((0))");
            entity.Property(e => e.SubscriptionPayerId).HasColumnName("SubscriptionPayerID");
            entity.Property(e => e.SubscriptionPlanId).HasColumnName("SubscriptionPlanID");
            entity.Property(e => e.SubscriptionRemindDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.SubscriptionStartDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.SubscriptionTicketTokenId).HasColumnName("SubscriptionTicketTokenID");
            entity.Property(e => e.SubscriptionUrlpaymentTokenId).HasColumnName("SubscriptionURLPaymentTokenID");
            entity.Property(e => e.TokenCostTotalValue).HasColumnType("money");
            entity.Property(e => e.TokenPricePerOneValue).HasColumnType("money");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserSubscriptionPaymentTicketTokenList>(entity =>
        {
            entity.HasKey(e => e.UsubscriptionTicketTokenId);

            entity.ToTable("TLKN_USER_SUBSCRIPTION_PAYMENT_TICKET_TOKEN_LIST");

            entity.Property(e => e.UsubscriptionTicketTokenId).HasColumnName("USubscriptionTicketTokenID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'dating')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PaymentStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentTicketId).HasColumnName("PaymentTicketID");
            entity.Property(e => e.PaymentTicketStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.SiteTokenCostTotalValue).HasColumnType("money");
            entity.Property(e => e.SiteTokenPricePerOneValue).HasColumnType("money");
            entity.Property(e => e.SubscriptionAgreementId).HasColumnName("SubscriptionAgreementID");
            entity.Property(e => e.SubscriptionAmount).HasDefaultValueSql("((0))");
            entity.Property(e => e.SubscriptionApicontextId).HasColumnName("SubscriptionAPIContextID");
            entity.Property(e => e.SubscriptionEndDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.SubscriptionGateway).HasDefaultValueSql("((0))");
            entity.Property(e => e.SubscriptionPayerId).HasColumnName("SubscriptionPayerID");
            entity.Property(e => e.SubscriptionPlanId).HasColumnName("SubscriptionPlanID");
            entity.Property(e => e.SubscriptionRemindDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.SubscriptionStartDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.SubscriptionTicketTokenId).HasColumnName("SubscriptionTicketTokenID");
            entity.Property(e => e.SubscriptionUrlpaymentTokenId).HasColumnName("SubscriptionURLPaymentTokenID");
            entity.Property(e => e.TokenCostTotalValue).HasColumnType("money");
            entity.Property(e => e.TokenPricePerOneValue).HasColumnType("money");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserSuggestList>(entity =>
        {
            entity.HasKey(e => e.UsuggestId);

            entity.ToTable("TLKN_USER_SUGGEST_LIST");

            entity.Property(e => e.UsuggestId).HasColumnName("USuggestID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingMatchConnect).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMatch).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsNewOwner).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNewRemote).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsReply).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsViewOwner).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsViewRemote).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisibleOwner).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisibleRemote).HasDefaultValueSql("((1))");
            entity.Property(e => e.MatchLikeStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.TokenId).HasColumnName("TokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeUtc)
                .HasColumnType("smalldatetime")
                .HasColumnName("UploadDateTimeUTC");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserMobileNumberId).HasColumnName("UserMobileNumberID");
        });

        modelBuilder.Entity<TlknUserTempList>(entity =>
        {
            entity.HasKey(e => e.TempUserId);

            entity.ToTable("TLKN_USER_TEMP_LIST");

            entity.Property(e => e.TempUserId).HasColumnName("TempUserID");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'NotApproved')");
            entity.Property(e => e.ActiveViewed).HasDefaultValueSql("((0))");
            entity.Property(e => e.AndroidId).HasColumnName("AndroidID");
            entity.Property(e => e.BirthDate).HasColumnType("smalldatetime");
            entity.Property(e => e.BirthDateDay).HasDefaultValueSql("((0))");
            entity.Property(e => e.BirthDateMonth).HasDefaultValueSql("((0))");
            entity.Property(e => e.BirthDateYear).HasDefaultValueSql("((0))");
            entity.Property(e => e.DeviceGlobalId).HasColumnName("DeviceGlobalID");
            entity.Property(e => e.Gcmid).HasColumnName("GCMID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsAutoLogin).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDeviceOnline).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsEmailVerify).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsFirstLogin).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRemeberMe).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsValidateEmailAddress).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsValidateMobileNumber).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoginStatus).HasDefaultValueSql("(N'offline')");
            entity.Property(e => e.Notes).HasDefaultValueSql("(N'N/A')");
            entity.Property(e => e.OnlineStatus).HasDefaultValueSql("(N'offline')");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.StreetLine).HasDefaultValueSql("((0))");
            entity.Property(e => e.StreetLine1).HasDefaultValueSql("((0))");
            entity.Property(e => e.StreetLine2).HasDefaultValueSql("((0))");
            entity.Property(e => e.TlknUserId).HasColumnName("TlknUserID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserGcmid).HasColumnName("UserGCMID");
            entity.Property(e => e.UserLoginStatus).HasDefaultValueSql("(N'online')");
            entity.Property(e => e.UserMoodStatus).HasDefaultValueSql("(N'Hello Tlkn2')");
            entity.Property(e => e.UserNotificationKeyId).HasColumnName("UserNotificationKeyID");
            entity.Property(e => e.UserRole).HasMaxLength(50);
            entity.Property(e => e.VisibleStatus).HasDefaultValueSql("(N'offline')");
        });

        modelBuilder.Entity<TlknUserThemeCategoryList>(entity =>
        {
            entity.HasKey(e => e.UthemeCategoryId).HasName("PK_TLKN_USER_THEME_CATEGORY_LIST_1");

            entity.ToTable("TLKN_USER_THEME_CATEGORY_LIST");

            entity.Property(e => e.UthemeCategoryId).HasColumnName("UThemeCategoryID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.CategoryOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.ImageCount).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDefault).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ThemeCategoryTokenId).HasColumnName("ThemeCategoryTokenID");
            entity.Property(e => e.ThemeImageLargeUrl).HasColumnName("ThemeImageLargeURL");
            entity.Property(e => e.ThemeImageMidUrl).HasColumnName("ThemeImageMidURL");
            entity.Property(e => e.ThemeImageSmallUrl).HasColumnName("ThemeImageSmallURL");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserThemeCountList>(entity =>
        {
            entity.HasKey(e => e.UthemeCountId);

            entity.ToTable("TLKN_USER_THEME_COUNT_LIST");

            entity.Property(e => e.UthemeCountId).HasColumnName("UThemeCountID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.CategoryOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.CostPrice)
                .HasDefaultValueSql("(N'0')")
                .HasColumnType("money");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.ImageCount).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsCostFree).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDefault).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ThemeImageLargeUrl).HasColumnName("ThemeImageLargeURL");
            entity.Property(e => e.ThemeImageMidUrl).HasColumnName("ThemeImageMidURL");
            entity.Property(e => e.ThemeImageSmallUrl).HasColumnName("ThemeImageSmallURL");
            entity.Property(e => e.ThemeSetId).HasColumnName("ThemeSetID");
            entity.Property(e => e.ThemeSetTokenId).HasColumnName("ThemeSetTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserThemeList>(entity =>
        {
            entity.HasKey(e => e.UthemeId).HasName("PK_TLKN_USER_THEME_LIST_1");

            entity.ToTable("TLKN_USER_THEME_LIST");

            entity.Property(e => e.UthemeId).HasColumnName("UThemeID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsApproved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTlknEmotion).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ThemeCategoryId).HasColumnName("ThemeCategoryID");
            entity.Property(e => e.ThemeImageLargeUrl).HasColumnName("ThemeImageLargeURL");
            entity.Property(e => e.ThemeImageMidUrl).HasColumnName("ThemeImageMidURL");
            entity.Property(e => e.ThemeImageSmallUrl).HasColumnName("ThemeImageSmallURL");
            entity.Property(e => e.ThemeSetId).HasColumnName("ThemeSetID");
            entity.Property(e => e.ThemeTokenId).HasColumnName("ThemeTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserThemeSetList>(entity =>
        {
            entity.HasKey(e => e.UthemeSetId);

            entity.ToTable("TLKN_USER_THEME_SET_LIST");

            entity.Property(e => e.UthemeSetId).HasColumnName("UThemeSetID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.CategoryOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.CostPrice)
                .HasDefaultValueSql("(N'0')")
                .HasColumnType("money");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.ImageCount).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsCostFree).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDefault).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ThemeImageLargeUrl).HasColumnName("ThemeImageLargeURL");
            entity.Property(e => e.ThemeImageMidUrl).HasColumnName("ThemeImageMidURL");
            entity.Property(e => e.ThemeImageSmallUrl).HasColumnName("ThemeImageSmallURL");
            entity.Property(e => e.ThemeSetTokenId).HasColumnName("ThemeSetTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserTokenCreditBalance>(entity =>
        {
            entity.HasKey(e => e.UbalanceId).HasName("PK_TLKN_USER_TOKEN_BALANCE");

            entity.ToTable("TLKN_USER_TOKEN_CREDIT_BALANCE");

            entity.Property(e => e.UbalanceId).HasColumnName("UBalanceID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTokenCreditBalance).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserTokenEarn>(entity =>
        {
            entity.HasKey(e => e.UearnId);

            entity.ToTable("TLKN_USER_TOKEN_EARN");

            entity.Property(e => e.UearnId).HasColumnName("UEarnID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.CancelDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsNotificationSend).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.ModelTokenCost).HasColumnType("money");
            entity.Property(e => e.ModelTokenPrice).HasColumnType("money");
            entity.Property(e => e.PaymentStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentTicketId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("PaymentTicketID");
            entity.Property(e => e.PaymentTicketStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("PaymentTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.SiteTokenCost).HasColumnType("money");
            entity.Property(e => e.SiteTokenPrice).HasColumnType("money");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.TokenCost).HasColumnType("money");
            entity.Property(e => e.TokenEarnStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.TokenPrice).HasColumnType("money");
            entity.Property(e => e.TokenTime).HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserTokenPurchaseList>(entity =>
        {
            entity.HasKey(e => e.UpurchaseId).HasName("PK_TLKN_USER_TOKEN_PURCHASE");

            entity.ToTable("TLKN_USER_TOKEN_PURCHASE_LIST");

            entity.Property(e => e.UpurchaseId).HasColumnName("UPurchaseID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PaymentStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentTicketId).HasColumnName("PaymentTicketID");
            entity.Property(e => e.PaymentTicketStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PurchaseOrderId).HasColumnName("PurchaseOrderID");
            entity.Property(e => e.PurchasePackageTicketId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("PurchasePackageTicketID");
            entity.Property(e => e.PurchasePackageTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("PurchasePackageTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.SiteTokenCostTotalValue).HasColumnType("money");
            entity.Property(e => e.SiteTokenPricePerOneValue).HasColumnType("money");
            entity.Property(e => e.TokenCode).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.TokenCostTotalValue).HasColumnType("money");
            entity.Property(e => e.TokenPricePerOneValue).HasColumnType("money");
            entity.Property(e => e.TokenTag).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.TokenTagId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("TokenTagID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserTokenSpend>(entity =>
        {
            entity.HasKey(e => e.UspendId).HasName("PK_TLKN_USER_TOKEN_CONUSUME");

            entity.ToTable("TLKN_USER_TOKEN_SPEND");

            entity.Property(e => e.UspendId).HasColumnName("USpendID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsModelStudio).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.ModelTokenCostTotalValue).HasColumnType("money");
            entity.Property(e => e.ModelTokenPricePerOneValue).HasColumnType("money");
            entity.Property(e => e.PaymentStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentTicketId).HasColumnName("PaymentTicketID");
            entity.Property(e => e.PaymentTicketStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.RoomId).HasColumnName("RoomID");
            entity.Property(e => e.RoomSessionId).HasColumnName("RoomSessionID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.SiteTokenCostTotalValue).HasColumnType("money");
            entity.Property(e => e.SiteTokenPricePerOneValue).HasColumnType("money");
            entity.Property(e => e.StudioId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("StudioID");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.TokenCostTotalValue).HasColumnType("money");
            entity.Property(e => e.TokenPricePerOneValue).HasColumnType("money");
            entity.Property(e => e.TokenTime).HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserTokenStatus>(entity =>
        {
            entity.HasKey(e => e.UstatusId);

            entity.ToTable("TLKN_USER_TOKEN_STATUS");

            entity.Property(e => e.UstatusId).HasColumnName("UStatusID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTokenCreditBalance).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TlknUserTokenTransactionLineList>(entity =>
        {
            entity.HasKey(e => e.UtokenTransactionLineId);

            entity.ToTable("TLKN_USER_TOKEN_TRANSACTION_LINE_LIST");

            entity.Property(e => e.UtokenTransactionLineId).HasColumnName("UTokenTransactionLineID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PaymentStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentTicketId).HasColumnName("PaymentTicketID");
            entity.Property(e => e.PaymentTicketStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentTokenId).HasColumnName("PaymentTokenID");
            entity.Property(e => e.PurchasePackageTicketId).HasColumnName("PurchasePackageTicketID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.SiteTokenCost).HasColumnType("money");
            entity.Property(e => e.SiteTokenPrice).HasColumnType("money");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.TokenBalanceCost).HasColumnType("money");
            entity.Property(e => e.TokenBalancePrice).HasColumnType("money");
            entity.Property(e => e.TokenCost).HasColumnType("money");
            entity.Property(e => e.TokenPrice).HasColumnType("money");
            entity.Property(e => e.TokenTransactionTicketId).HasColumnName("TokenTransactionTicketID");
            entity.Property(e => e.TransactionTicketId).HasColumnName("TransactionTicketID");
            entity.Property(e => e.TransactionTokenId).HasColumnName("TransactionTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserTokenTransactionList>(entity =>
        {
            entity.HasKey(e => e.UtokenTransactionId);

            entity.ToTable("TLKN_USER_TOKEN_TRANSACTION_LIST");

            entity.Property(e => e.UtokenTransactionId).HasColumnName("UTokenTransactionID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PaymentStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentTicketId).HasColumnName("PaymentTicketID");
            entity.Property(e => e.PaymentTicketStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentTokenId).HasColumnName("PaymentTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.SiteTokenCost).HasColumnType("money");
            entity.Property(e => e.SiteTokenPrice).HasColumnType("money");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.TokenBalanceCost).HasColumnType("money");
            entity.Property(e => e.TokenBalancePrice).HasColumnType("money");
            entity.Property(e => e.TokenCost).HasColumnType("money");
            entity.Property(e => e.TokenPrice).HasColumnType("money");
            entity.Property(e => e.TransactionTicketId).HasColumnName("TransactionTicketID");
            entity.Property(e => e.TransactionTokenId).HasColumnName("TransactionTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserTokenTransfer>(entity =>
        {
            entity.HasKey(e => e.UtransferId).HasName("PK_TLKN_USER_TOKEN_TRANSFER_1");

            entity.ToTable("TLKN_USER_TOKEN_TRANSFER");

            entity.Property(e => e.UtransferId).HasColumnName("UTransferID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.CancelDateTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsNotificationSend).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PaymentStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentTicketId).HasColumnName("PaymentTicketID");
            entity.Property(e => e.PaymentTicketStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentTokenId)
                .HasDefaultValueSql("(N'notset')")
                .HasColumnName("PaymentTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.SiteTokenCost).HasColumnType("money");
            entity.Property(e => e.SiteTokenPrice).HasColumnType("money");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.TokenBalanceCost).HasColumnType("money");
            entity.Property(e => e.TokenBalancePrice).HasColumnType("money");
            entity.Property(e => e.TokenCost).HasColumnType("money");
            entity.Property(e => e.TokenPrice).HasColumnType("money");
            entity.Property(e => e.TokenTransferStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.TransferTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("TransferTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserTokenTransferBalance>(entity =>
        {
            entity.HasKey(e => e.UtransferBalanceId).HasName("PK_TLKN_USER_TOKEN_TRANSFER_BALANCE_1");

            entity.ToTable("TLKN_USER_TOKEN_TRANSFER_BALANCE");

            entity.Property(e => e.UtransferBalanceId).HasColumnName("UTransferBalanceID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PaymentStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentTicketId).HasColumnName("PaymentTicketID");
            entity.Property(e => e.PaymentTicketStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentTokenId).HasColumnName("PaymentTokenID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.SiteTokenCost).HasColumnType("money");
            entity.Property(e => e.SiteTokenPrice).HasColumnType("money");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.TokenBalanceCost).HasColumnType("money");
            entity.Property(e => e.TokenBalancePrice).HasColumnType("money");
            entity.Property(e => e.TokenCost).HasColumnType("money");
            entity.Property(e => e.TokenPrice).HasColumnType("money");
            entity.Property(e => e.TransferTokenId).HasColumnName("TransferTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlknUserTraceAction>(entity =>
        {
            entity.HasKey(e => e.TuraceActionId);

            entity.ToTable("TLKN_USER_TRACE_ACTION");

            entity.Property(e => e.TuraceActionId).HasColumnName("TUraceActionID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'personal')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.GuestId).HasColumnName("GuestID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisibleOwner).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVisibleRemote).HasDefaultValueSql("((1))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.PageUrl).HasColumnName("PageURL");
            entity.Property(e => e.RemoteMobileNumberId).HasColumnName("RemoteMobileNumberID");
            entity.Property(e => e.RemoteUserId).HasColumnName("RemoteUserID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.SessionId).HasColumnName("SessionID");
            entity.Property(e => e.TokenId)
                .HasDefaultValueSql("(N'personal')")
                .HasColumnName("TokenID");
            entity.Property(e => e.TraceTokenId).HasColumnName("TraceTokenID");
            entity.Property(e => e.TraceUpdateDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.TraceUpdateDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TraceUpdateMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TraceUpdateYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserIp)
                .HasDefaultValueSql("(N'127.0.0.1')")
                .HasColumnName("UserIP");
        });

        modelBuilder.Entity<TlknUserTraceCallStatus>(entity =>
        {
            entity.HasKey(e => e.UtraceCallId);

            entity.ToTable("TLKN_USER_TRACE_CALL_STATUS");

            entity.Property(e => e.UtraceCallId).HasColumnName("UTraceCallID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.CallScreenType).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.CallTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("CallTokenID");
            entity.Property(e => e.CancelDateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FromMobileNumberId).HasColumnName("FromMobileNumberID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsNotificationSend).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsOpen).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.PaymentStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentTicketId).HasColumnName("PaymentTicketID");
            entity.Property(e => e.PaymentTicketStatus).HasDefaultValueSql("(N'notset')");
            entity.Property(e => e.PaymentTokenId)
                .HasDefaultValueSql("(N'notset')")
                .HasColumnName("PaymentTokenID");
            entity.Property(e => e.RemoteMobileNumberId).HasColumnName("RemoteMobileNumberID");
            entity.Property(e => e.RemoteUserId).HasColumnName("RemoteUserID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenCallShowStatus).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.SiteTokenCost).HasColumnType("money");
            entity.Property(e => e.SiteTokenPrice).HasColumnType("money");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.ToMobileNumberId).HasColumnName("ToMobileNumberID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.TokenBalanceCost).HasColumnType("money");
            entity.Property(e => e.TokenBalancePrice).HasColumnType("money");
            entity.Property(e => e.TokenCost).HasColumnType("money");
            entity.Property(e => e.TokenPrice).HasColumnType("money");
            entity.Property(e => e.TokenTransferStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.TransferTokenId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("TransferTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.UserType).HasDefaultValueSql("(N'0')");
        });

        modelBuilder.Entity<TlknUserTracePageStatus>(entity =>
        {
            entity.HasKey(e => e.UpageTraceId);

            entity.ToTable("TLKN_USER_TRACE_PAGE_STATUS");

            entity.Property(e => e.UpageTraceId).HasColumnName("UPageTraceID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'personal')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.GuestId).HasColumnName("GuestID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PageUrl).HasColumnName("PageURL");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.SessionId).HasColumnName("SessionID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserIp)
                .HasDefaultValueSql("(N'127.0.0.1')")
                .HasColumnName("UserIP");
        });

        modelBuilder.Entity<TlknUserTraceStatus>(entity =>
        {
            entity.HasKey(e => e.UtraceId);

            entity.ToTable("TLKN_USER_TRACE_STATUS");

            entity.Property(e => e.UtraceId).HasColumnName("UTraceID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'personal')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.GuestId).HasColumnName("GuestID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.PageUrl).HasColumnName("PageURL");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.SessionId).HasColumnName("SessionID");
            entity.Property(e => e.TraceUpdateDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.TraceUpdateDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TraceUpdateMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TraceUpdateYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserIp)
                .HasDefaultValueSql("(N'127.0.0.1')")
                .HasColumnName("UserIP");
        });

        modelBuilder.Entity<TlknUserVideoshow>(entity =>
        {
            entity.HasKey(e => e.VideoShowId);

            entity.ToTable("TLKN_USER_VIDEOSHOW");

            entity.Property(e => e.VideoShowId).HasColumnName("VideoShowID");
            entity.Property(e => e.FromTlknUserId).HasColumnName("FromTlknUserID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVideoShowClose).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVideoShowEnd).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVideoShowInitiate).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVideoShowLoad).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVideoShowOpen).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVideoShowPending).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVideoShowSpend).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVideoShowStart).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TlknUserId).HasColumnName("TlknUserID");
            entity.Property(e => e.ToTlknUserId).HasColumnName("ToTlknUserID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.VideoShowCloseTime).HasColumnType("smalldatetime");
            entity.Property(e => e.VideoShowEndTime).HasColumnType("smalldatetime");
            entity.Property(e => e.VideoShowInitiateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.VideoShowOpenTime).HasColumnType("smalldatetime");
            entity.Property(e => e.VideoShowPendingTime).HasColumnType("smalldatetime");
            entity.Property(e => e.VideoShowSessionId).HasColumnName("VideoShowSessionID");
            entity.Property(e => e.VideoShowSpendTime).HasColumnType("smalldatetime");
            entity.Property(e => e.VideoShowStartTime).HasColumnType("smalldatetime");
            entity.Property(e => e.VideoShowTimeSpendHour).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.VideoShowTimeSpendMinute).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.VideoShowTimeSpendSecond).HasDefaultValueSql("(datepart(day,getdate()))");
        });

        modelBuilder.Entity<TlknUserVideoshowArchive>(entity =>
        {
            entity.HasKey(e => e.ArchiveVideoShowId);

            entity.ToTable("TLKN_USER_VIDEOSHOW_ARCHIVE");

            entity.Property(e => e.ArchiveVideoShowId).HasColumnName("ArchiveVideoShowID");
            entity.Property(e => e.CamFmsurl).HasColumnName("CamFMSURL");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.MemberId).HasColumnName("MemberID");
            entity.Property(e => e.MemberSessionId).HasColumnName("MemberSessionID");
            entity.Property(e => e.ModelId).HasColumnName("ModelID");
            entity.Property(e => e.ModelSessionId).HasColumnName("ModelSessionID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.VideoShowId).HasColumnName("VideoShowID");
            entity.Property(e => e.VideoShowSessionId).HasColumnName("VideoShowSessionID");
            entity.Property(e => e.VideoShowTicketId).HasColumnName("VideoShowTicketID");
        });

        modelBuilder.Entity<TlknUserVideoshowInvitation>(entity =>
        {
            entity.HasKey(e => e.VideoShowInviteId);

            entity.ToTable("TLKN_USER_VIDEOSHOW_INVITATION");

            entity.Property(e => e.VideoShowInviteId).HasColumnName("VideoShowInviteID");
            entity.Property(e => e.FromTlknUserId).HasColumnName("FromTlknUserID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.InviteOwnerUserId).HasColumnName("InviteOwnerUserID");
            entity.Property(e => e.InviteOwnerUserSessionId).HasColumnName("InviteOwnerUserSessionID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVideoShowClose).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVideoShowEnd).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVideoShowInitiate).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVideoShowInviteOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVideoShowInviteShow).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVideoShowOpen).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVideoShowPending).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVideoShowSpend).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVideoShowStart).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TlknUserId).HasColumnName("TlknUserID");
            entity.Property(e => e.ToTlknUserId).HasColumnName("ToTlknUserID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.VideoShowCloseTime).HasColumnType("smalldatetime");
            entity.Property(e => e.VideoShowEndTime).HasColumnType("smalldatetime");
            entity.Property(e => e.VideoShowId).HasColumnName("VideoShowID");
            entity.Property(e => e.VideoShowInitiateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.VideoShowInviteReset).HasColumnType("datetime");
            entity.Property(e => e.VideoShowInviteStart).HasColumnType("datetime");
            entity.Property(e => e.VideoShowOpenTime).HasColumnType("smalldatetime");
            entity.Property(e => e.VideoShowPendingTime).HasColumnType("smalldatetime");
            entity.Property(e => e.VideoShowSessionId).HasColumnName("VideoShowSessionID");
            entity.Property(e => e.VideoShowSpendTime).HasColumnType("smalldatetime");
            entity.Property(e => e.VideoShowStartTime).HasColumnType("smalldatetime");
            entity.Property(e => e.VideoShowTimeSpendHour).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.VideoShowTimeSpendMinute).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.VideoShowTimeSpendSecond).HasDefaultValueSql("(datepart(day,getdate()))");
        });

        modelBuilder.Entity<TlknUserVideoshowLive>(entity =>
        {
            entity.HasKey(e => e.VideoShowLiveId);

            entity.ToTable("TLKN_USER_VIDEOSHOW_LIVE");

            entity.Property(e => e.VideoShowLiveId).HasColumnName("VideoShowLiveID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVideoShowClose).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVideoShowEnd).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVideoShowInitiate).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVideoShowOpen).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVideoShowPending).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVideoShowSpend).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVideoShowStart).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.VideoShowCloseTime).HasColumnType("smalldatetime");
            entity.Property(e => e.VideoShowEndTime).HasColumnType("smalldatetime");
            entity.Property(e => e.VideoShowId).HasColumnName("VideoShowID");
            entity.Property(e => e.VideoShowInitiateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.VideoShowOpenTime).HasColumnType("smalldatetime");
            entity.Property(e => e.VideoShowPendingTime).HasColumnType("smalldatetime");
            entity.Property(e => e.VideoShowSessionId).HasColumnName("VideoShowSessionID");
            entity.Property(e => e.VideoShowSpendTime).HasColumnType("smalldatetime");
            entity.Property(e => e.VideoShowStartTime).HasColumnType("smalldatetime");
            entity.Property(e => e.VideoShowTimeSpendHour).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.VideoShowTimeSpendMinute).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.VideoShowTimeSpendSecond).HasDefaultValueSql("(datepart(day,getdate()))");
        });

        modelBuilder.Entity<TlknUserVideoshowLogin>(entity =>
        {
            entity.HasKey(e => e.LoginVideoShowroomId);

            entity.ToTable("TLKN_USER_VIDEOSHOW_LOGIN");

            entity.Property(e => e.LoginVideoShowroomId).HasColumnName("LoginVideoSHOWRoomID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsGuest).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsLogin).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.ResetDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserRegisterDate).HasColumnType("smalldatetime");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.UserStatus).HasDefaultValueSql("(N'offline')");
            entity.Property(e => e.VideoShowId).HasColumnName("VideoShowID");
            entity.Property(e => e.VideoShowInviteId).HasColumnName("VideoShowInviteID");
            entity.Property(e => e.VideoShowSessionId).HasColumnName("VideoShowSessionID");
            entity.Property(e => e.VideoShowTicketId).HasColumnName("VideoShowTicketID");
        });

        modelBuilder.Entity<TlknUserVideoshowMessage>(entity =>
        {
            entity.HasKey(e => e.MsgVideoShowId);

            entity.ToTable("TLKN_USER_VIDEOSHOW_MESSAGE");

            entity.Property(e => e.MsgVideoShowId).HasColumnName("MsgVideoShowID");
            entity.Property(e => e.CamFmsurl).HasColumnName("CamFMSURL");
            entity.Property(e => e.GuestLoginId).HasColumnName("GuestLoginID");
            entity.Property(e => e.GuestLoginSessionId).HasColumnName("GuestLoginSessionID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsGuest).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsGuestMute).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMessageOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRead).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsToken).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTokenVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTopic).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUserAdmin).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUserBlacklist).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUserStudio).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.ResetDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.SessionId).HasColumnName("SessionID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserLoginId).HasColumnName("UserLoginID");
            entity.Property(e => e.UserLoginSessionId).HasColumnName("UserLoginSessionID");
            entity.Property(e => e.VideoShowId).HasColumnName("VideoShowID");
            entity.Property(e => e.VideoShowInviteId).HasColumnName("VideoShowInviteID");
            entity.Property(e => e.VideoShowSessionId).HasColumnName("VideoShowSessionID");
            entity.Property(e => e.VideoShowTicketId).HasColumnName("VideoShowTicketID");
        });

        modelBuilder.Entity<TlknUserVideoshowTicket>(entity =>
        {
            entity.HasKey(e => e.VideoShowTicketId);

            entity.ToTable("TLKN_USER_VIDEOSHOW_TICKET");

            entity.Property(e => e.VideoShowTicketId).HasColumnName("VideoShowTicketID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.VideoShowId).HasColumnName("VideoShowID");
            entity.Property(e => e.VideoShowSessionId).HasColumnName("VideoShowSessionID");
        });

        modelBuilder.Entity<TlknUserVideoshowVideo>(entity =>
        {
            entity.HasKey(e => e.VideoId);

            entity.ToTable("TLKN_USER_VIDEOSHOW_VIDEO");

            entity.Property(e => e.VideoId).HasColumnName("VideoID");
            entity.Property(e => e.CamFmsid).HasColumnName("CamFMSID");
            entity.Property(e => e.CamFmsurl).HasColumnName("CamFMSURL");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsModelStudio).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.StudioId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("StudioID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.VideoShowId).HasColumnName("VideoShowID");
            entity.Property(e => e.VideoShowInviteId).HasColumnName("VideoShowInviteID");
            entity.Property(e => e.VideoShowSessionId).HasColumnName("VideoShowSessionID");
            entity.Property(e => e.VideoShowTicketId).HasColumnName("VideoShowTicketID");
        });

        modelBuilder.Entity<TlknUserVideoshowVideoTicket>(entity =>
        {
            entity.HasKey(e => e.VideoVideoId);

            entity.ToTable("TLKN_USER_VIDEOSHOW_VIDEO_TICKET");

            entity.Property(e => e.VideoVideoId).HasColumnName("VideoVideoID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<TlknUserViewerList>(entity =>
        {
            entity.HasKey(e => e.UfriendD).HasName("PK_TLKN_USER_DATING_MATCH_VIEWER_LIST");

            entity.ToTable("TLKN_USER_VIEWER_LIST");

            entity.Property(e => e.UfriendD)
                .ValueGeneratedNever()
                .HasColumnName("UFriendD");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.BlackListStatus).HasDefaultValueSql("(N'active')");
            entity.Property(e => e.DateAdd).HasColumnType("smalldatetime");
            entity.Property(e => e.DateRemove).HasColumnType("smalldatetime");
            entity.Property(e => e.FriendId).HasColumnName("FriendID");
            entity.Property(e => e.FriendMobileNumberId).HasColumnName("FriendMobileNumberID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsBlackList).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDating).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDatingMatchConnect).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsLike).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMatch).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSaved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTemp).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");
            entity.Property(e => e.MatchLikeStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.OwnerMobileNumberId).HasColumnName("OwnerMobileNumberID");
            entity.Property(e => e.OwnerUserId).HasColumnName("OwnerUserID");
            entity.Property(e => e.RemoveDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RemoveDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.RemoveMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.RemoveYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserMobileNumberId).HasColumnName("UserMobileNumberID");
        });

        modelBuilder.Entity<TlknUserVoiceshow>(entity =>
        {
            entity.HasKey(e => e.VoiceShowId);

            entity.ToTable("TLKN_USER_VOICESHOW");

            entity.Property(e => e.VoiceShowId).HasColumnName("VoiceShowID");
            entity.Property(e => e.FromTlknUserId).HasColumnName("FromTlknUserID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVoiceShowClose).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVoiceShowEnd).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVoiceShowInitiate).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVoiceShowLoad).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVoiceShowOpen).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVoiceShowPending).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVoiceShowSpend).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVoiceShowStart).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TlknUserId).HasColumnName("TlknUserID");
            entity.Property(e => e.ToTlknUserId).HasColumnName("ToTlknUserID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.VoiceShowCloseTime).HasColumnType("smalldatetime");
            entity.Property(e => e.VoiceShowEndTime).HasColumnType("smalldatetime");
            entity.Property(e => e.VoiceShowInitiateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.VoiceShowOpenTime).HasColumnType("smalldatetime");
            entity.Property(e => e.VoiceShowPendingTime).HasColumnType("smalldatetime");
            entity.Property(e => e.VoiceShowSessionId).HasColumnName("VoiceShowSessionID");
            entity.Property(e => e.VoiceShowSpendTime).HasColumnType("smalldatetime");
            entity.Property(e => e.VoiceShowStartTime).HasColumnType("smalldatetime");
            entity.Property(e => e.VoiceShowTimeSpendHour).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.VoiceShowTimeSpendMinute).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.VoiceShowTimeSpendSecond).HasDefaultValueSql("(datepart(day,getdate()))");
        });

        modelBuilder.Entity<TlknUserVoiceshowArchive>(entity =>
        {
            entity.HasKey(e => e.ArchiveVoiceShowId);

            entity.ToTable("TLKN_USER_VOICESHOW_ARCHIVE");

            entity.Property(e => e.ArchiveVoiceShowId).HasColumnName("ArchiveVoiceShowID");
            entity.Property(e => e.CamFmsurl).HasColumnName("CamFMSURL");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.MemberId).HasColumnName("MemberID");
            entity.Property(e => e.MemberSessionId).HasColumnName("MemberSessionID");
            entity.Property(e => e.ModelId).HasColumnName("ModelID");
            entity.Property(e => e.ModelSessionId).HasColumnName("ModelSessionID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.VoiceShowId).HasColumnName("VoiceShowID");
            entity.Property(e => e.VoiceShowSessionId).HasColumnName("VoiceShowSessionID");
            entity.Property(e => e.VoiceShowTicketId).HasColumnName("VoiceShowTicketID");
        });

        modelBuilder.Entity<TlknUserVoiceshowInvitation>(entity =>
        {
            entity.HasKey(e => e.VoiceShowInviteId);

            entity.ToTable("TLKN_USER_VOICESHOW_INVITATION");

            entity.Property(e => e.VoiceShowInviteId).HasColumnName("VoiceShowInviteID");
            entity.Property(e => e.FromTlknUserId).HasColumnName("FromTlknUserID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.InviteOwnerUserId).HasColumnName("InviteOwnerUserID");
            entity.Property(e => e.InviteOwnerUserSessionId).HasColumnName("InviteOwnerUserSessionID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVoiceShowClose).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVoiceShowEnd).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVoiceShowInitiate).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVoiceShowInviteOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVoiceShowInviteShow).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVoiceShowOpen).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVoiceShowPending).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVoiceShowSpend).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVoiceShowStart).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TlknUserId).HasColumnName("TlknUserID");
            entity.Property(e => e.ToTlknUserId).HasColumnName("ToTlknUserID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.VoiceShowCloseTime).HasColumnType("smalldatetime");
            entity.Property(e => e.VoiceShowEndTime).HasColumnType("smalldatetime");
            entity.Property(e => e.VoiceShowId).HasColumnName("VoiceShowID");
            entity.Property(e => e.VoiceShowInitiateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.VoiceShowInviteReset).HasColumnType("datetime");
            entity.Property(e => e.VoiceShowInviteStart).HasColumnType("datetime");
            entity.Property(e => e.VoiceShowOpenTime).HasColumnType("smalldatetime");
            entity.Property(e => e.VoiceShowPendingTime).HasColumnType("smalldatetime");
            entity.Property(e => e.VoiceShowSessionId).HasColumnName("VoiceShowSessionID");
            entity.Property(e => e.VoiceShowSpendTime).HasColumnType("smalldatetime");
            entity.Property(e => e.VoiceShowStartTime).HasColumnType("smalldatetime");
            entity.Property(e => e.VoiceShowTimeSpendHour).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.VoiceShowTimeSpendMinute).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.VoiceShowTimeSpendSecond).HasDefaultValueSql("(datepart(day,getdate()))");
        });

        modelBuilder.Entity<TlknUserVoiceshowLive>(entity =>
        {
            entity.HasKey(e => e.VoiceshowliveId);

            entity.ToTable("TLKN_USER_VOICESHOW_LIVE");

            entity.Property(e => e.VoiceshowliveId).HasColumnName("VOICESHOWLiveID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsVoiceshowclose)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IsVOICESHOWClose");
            entity.Property(e => e.IsVoiceshowend)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IsVOICESHOWEnd");
            entity.Property(e => e.IsVoiceshowinitiate)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IsVOICESHOWInitiate");
            entity.Property(e => e.IsVoiceshowopen)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IsVOICESHOWOpen");
            entity.Property(e => e.IsVoiceshowpending)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IsVOICESHOWPending");
            entity.Property(e => e.IsVoiceshowspend)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IsVOICESHOWSpend");
            entity.Property(e => e.IsVoiceshowstart)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IsVOICESHOWStart");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.VoiceshowcloseTime)
                .HasColumnType("smalldatetime")
                .HasColumnName("VOICESHOWCloseTime");
            entity.Property(e => e.VoiceshowendTime)
                .HasColumnType("smalldatetime")
                .HasColumnName("VOICESHOWEndTime");
            entity.Property(e => e.Voiceshowid).HasColumnName("VOICESHOWID");
            entity.Property(e => e.VoiceshowinitiateTime)
                .HasColumnType("smalldatetime")
                .HasColumnName("VOICESHOWInitiateTime");
            entity.Property(e => e.VoiceshowopenTime)
                .HasColumnType("smalldatetime")
                .HasColumnName("VOICESHOWOpenTime");
            entity.Property(e => e.VoiceshowpendingTime)
                .HasColumnType("smalldatetime")
                .HasColumnName("VOICESHOWPendingTime");
            entity.Property(e => e.VoiceshowsessionId).HasColumnName("VOICESHOWSessionID");
            entity.Property(e => e.VoiceshowspendTime)
                .HasColumnType("smalldatetime")
                .HasColumnName("VOICESHOWSpendTime");
            entity.Property(e => e.VoiceshowstartTime)
                .HasColumnType("smalldatetime")
                .HasColumnName("VOICESHOWStartTime");
            entity.Property(e => e.Voiceshowstatus).HasColumnName("VOICESHOWStatus");
            entity.Property(e => e.VoiceshowtimeSpendHour)
                .HasDefaultValueSql("(datepart(day,getdate()))")
                .HasColumnName("VOICESHOWTimeSpendHour");
            entity.Property(e => e.VoiceshowtimeSpendMinute)
                .HasDefaultValueSql("(datepart(day,getdate()))")
                .HasColumnName("VOICESHOWTimeSpendMinute");
            entity.Property(e => e.VoiceshowtimeSpendSecond)
                .HasDefaultValueSql("(datepart(day,getdate()))")
                .HasColumnName("VOICESHOWTimeSpendSecond");
        });

        modelBuilder.Entity<TlknUserVoiceshowLogin>(entity =>
        {
            entity.HasKey(e => e.LoginVoiceShowRoomId);

            entity.ToTable("TLKN_USER_VOICESHOW_LOGIN");

            entity.Property(e => e.LoginVoiceShowRoomId).HasColumnName("LoginVoiceShowRoomID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsGuest).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsLogin).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.ResetDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.TimeEndDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeEndDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeEndMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeEndYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.TimeStartDate).HasColumnType("smalldatetime");
            entity.Property(e => e.TimeStartDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.TimeStartMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.TimeStartYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.UserRegisterDate).HasColumnType("smalldatetime");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.UserStatus).HasDefaultValueSql("(N'offline')");
            entity.Property(e => e.VoiceShowId).HasColumnName("VoiceShowID");
            entity.Property(e => e.VoiceShowInviteId).HasColumnName("VoiceShowInviteID");
            entity.Property(e => e.VoiceShowSessionId).HasColumnName("VoiceShowSessionID");
            entity.Property(e => e.VoiceShowTicketId).HasColumnName("VoiceShowTicketID");
        });

        modelBuilder.Entity<TlknUserVoiceshowMessage>(entity =>
        {
            entity.HasKey(e => e.MsgVoiceShowId);

            entity.ToTable("TLKN_USER_VOICESHOW_MESSAGE");

            entity.Property(e => e.MsgVoiceShowId).HasColumnName("MsgVoiceShowID");
            entity.Property(e => e.CamFmsurl).HasColumnName("CamFMSURL");
            entity.Property(e => e.GuestLoginId).HasColumnName("GuestLoginID");
            entity.Property(e => e.GuestLoginSessionId).HasColumnName("GuestLoginSessionID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsGuest).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsGuestMute).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsMessageOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRead).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsToken).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTokenVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTopic).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUserAdmin).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUserBlacklist).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUserStudio).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.ResetDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.SessionId).HasColumnName("SessionID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserLoginId).HasColumnName("UserLoginID");
            entity.Property(e => e.UserLoginSessionId).HasColumnName("UserLoginSessionID");
            entity.Property(e => e.VoiceShowId).HasColumnName("VoiceShowID");
            entity.Property(e => e.VoiceShowInviteId).HasColumnName("VoiceShowInviteID");
            entity.Property(e => e.VoiceShowSessionId).HasColumnName("VoiceShowSessionID");
            entity.Property(e => e.VoiceShowTicketId).HasColumnName("VoiceShowTicketID");
        });

        modelBuilder.Entity<TlknUserVoiceshowTicket>(entity =>
        {
            entity.HasKey(e => e.VoiceShowTicketId);

            entity.ToTable("TLKN_USER_VOICESHOW_TICKET");

            entity.Property(e => e.VoiceShowTicketId).HasColumnName("VoiceShowTicketID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.VoiceShowId).HasColumnName("VoiceShowID");
            entity.Property(e => e.VoiceShowSessionId).HasColumnName("VoiceShowSessionID");
        });

        modelBuilder.Entity<TlknUserVoiceshowVideo>(entity =>
        {
            entity.HasKey(e => e.VideoId);

            entity.ToTable("TLKN_USER_VOICESHOW_VIDEO");

            entity.Property(e => e.VideoId).HasColumnName("VideoID");
            entity.Property(e => e.CamFmsid).HasColumnName("CamFMSID");
            entity.Property(e => e.CamFmsurl).HasColumnName("CamFMSURL");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsModelStudio).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LoginDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.LoginMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.LoginYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.StudioId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("StudioID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
            entity.Property(e => e.VoiceShowId).HasColumnName("VoiceShowID");
            entity.Property(e => e.VoiceShowInviteId).HasColumnName("VoiceShowInviteID");
            entity.Property(e => e.VoiceShowSessionId).HasColumnName("VoiceShowSessionID");
            entity.Property(e => e.VoiceShowTicketId).HasColumnName("VoiceShowTicketID");
        });

        modelBuilder.Entity<TlknUserVoiceshowVideoTicket>(entity =>
        {
            entity.HasKey(e => e.VoiceVideoId);

            entity.ToTable("TLKN_USER_VOICESHOW_VIDEO_TICKET");

            entity.Property(e => e.VoiceVideoId).HasColumnName("VoiceVideoID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ScreenChatShowId).HasColumnName("ScreenChatShowID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
        });

        modelBuilder.Entity<TlknUserWallpaperCategoryList>(entity =>
        {
            entity.HasKey(e => e.UwallpaperCategoryId).HasName("PK_TLKN_USER_WALLPAPER_CATEGORY_LIST_1");

            entity.ToTable("TLKN_USER_WALLPAPER_CATEGORY_LIST");

            entity.Property(e => e.UwallpaperCategoryId).HasColumnName("UWallpaperCategoryID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.CategoryOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.ImageCount).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDefault).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.WallpaperCategoryTokenId).HasColumnName("WallpaperCategoryTokenID");
            entity.Property(e => e.WallpaperImageLargeUrl).HasColumnName("WallpaperImageLargeURL");
            entity.Property(e => e.WallpaperImageMidUrl).HasColumnName("WallpaperImageMidURL");
            entity.Property(e => e.WallpaperImageSmallUrl).HasColumnName("WallpaperImageSmallURL");
        });

        modelBuilder.Entity<TlknUserWallpaperCountList>(entity =>
        {
            entity.HasKey(e => e.UwallpaperCountId);

            entity.ToTable("TLKN_USER_WALLPAPER_COUNT_LIST");

            entity.Property(e => e.UwallpaperCountId)
                .ValueGeneratedNever()
                .HasColumnName("UWallpaperCountID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.CategoryOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.CostPrice)
                .HasDefaultValueSql("(N'0')")
                .HasColumnType("money");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.ImageCount).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsCostFree).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDefault).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.IwallpapermageSmallUrl).HasColumnName("IWallpapermageSmallURL");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.WallpaperImageLargeUrl).HasColumnName("WallpaperImageLargeURL");
            entity.Property(e => e.WallpaperImageMidUrl).HasColumnName("WallpaperImageMidURL");
            entity.Property(e => e.WallpaperSetId).HasColumnName("WallpaperSetID");
            entity.Property(e => e.WallpaperSetTokenId).HasColumnName("WallpaperSetTokenID");
        });

        modelBuilder.Entity<TlknUserWallpaperImageList>(entity =>
        {
            entity.HasKey(e => e.UwallpaperId).HasName("PK_TLKN_USER_WALLPAPER_LIST_1");

            entity.ToTable("TLKN_USER_WALLPAPER_IMAGE_LIST");

            entity.Property(e => e.UwallpaperId).HasColumnName("UWallpaperID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.ImageLargeUrl).HasColumnName("ImageLargeURL");
            entity.Property(e => e.ImageMidUrl).HasColumnName("ImageMidURL");
            entity.Property(e => e.ImageSmallAwayUrl).HasColumnName("ImageSmallAwayURL");
            entity.Property(e => e.ImageSmallLiveUrl).HasColumnName("ImageSmallLiveURL");
            entity.Property(e => e.ImageSmallUrl).HasColumnName("ImageSmallURL");
            entity.Property(e => e.ImageTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ImageTokenID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAnimate).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsApproved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTlknEmotion).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.WallpaperCategoryId).HasColumnName("WallpaperCategoryID");
            entity.Property(e => e.WallpaperImageLargeUrl).HasColumnName("WallpaperImageLargeURL");
            entity.Property(e => e.WallpaperImageMidUrl).HasColumnName("WallpaperImageMidURL");
            entity.Property(e => e.WallpaperImageSmallUrl).HasColumnName("WallpaperImageSmallURL");
            entity.Property(e => e.WallpaperImageUrl).HasColumnName("WallpaperImageURL");
            entity.Property(e => e.WallpaperSetId).HasColumnName("WallpaperSetID");
            entity.Property(e => e.WallpaperSetTokenId).HasColumnName("WallpaperSetTokenID");
        });

        modelBuilder.Entity<TlknUserWallpaperLikeList>(entity =>
        {
            entity.HasKey(e => e.UlikeId);

            entity.ToTable("TLKN_USER_WALLPAPER_LIKE_LIST");

            entity.Property(e => e.UlikeId).HasColumnName("ULikeID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.ImageLargeUrl).HasColumnName("ImageLargeURL");
            entity.Property(e => e.ImageMidUrl).HasColumnName("ImageMidURL");
            entity.Property(e => e.ImageSmallAwayUrl).HasColumnName("ImageSmallAwayURL");
            entity.Property(e => e.ImageSmallLiveUrl).HasColumnName("ImageSmallLiveURL");
            entity.Property(e => e.ImageSmallUrl).HasColumnName("ImageSmallURL");
            entity.Property(e => e.ImageTokenId).HasColumnName("ImageTokenID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsApproved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTlknEmotion).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.WallpaperCategoryId).HasColumnName("WallpaperCategoryID");
            entity.Property(e => e.WallpaperId).HasColumnName("WallpaperID");
            entity.Property(e => e.WallpaperImageLargeUrl).HasColumnName("WallpaperImageLargeURL");
            entity.Property(e => e.WallpaperImageMidUrl).HasColumnName("WallpaperImageMidURL");
            entity.Property(e => e.WallpaperImageSmallUrl).HasColumnName("WallpaperImageSmallURL");
            entity.Property(e => e.WallpaperImageUrl).HasColumnName("WallpaperImageURL");
            entity.Property(e => e.WallpaperSetId).HasColumnName("WallpaperSetID");
            entity.Property(e => e.WallpaperSetTokenId).HasColumnName("WallpaperSetTokenID");
        });

        modelBuilder.Entity<TlknUserWallpaperPreviewList>(entity =>
        {
            entity.HasKey(e => e.UpreviewId);

            entity.ToTable("TLKN_USER_WALLPAPER_PREVIEW_LIST");

            entity.Property(e => e.UpreviewId).HasColumnName("UPreviewID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.ImageLargeUrl).HasColumnName("ImageLargeURL");
            entity.Property(e => e.ImageMidUrl).HasColumnName("ImageMidURL");
            entity.Property(e => e.ImageSmallAwayUrl).HasColumnName("ImageSmallAwayURL");
            entity.Property(e => e.ImageSmallLiveUrl).HasColumnName("ImageSmallLiveURL");
            entity.Property(e => e.ImageSmallUrl).HasColumnName("ImageSmallURL");
            entity.Property(e => e.ImageTokenId).HasColumnName("ImageTokenID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsApproved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTlknEmotion).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.WallpaperId).HasColumnName("WallpaperID");
            entity.Property(e => e.WallpaperImageLargeUrl).HasColumnName("WallpaperImageLargeURL");
            entity.Property(e => e.WallpaperImageMidUrl).HasColumnName("WallpaperImageMidURL");
            entity.Property(e => e.WallpaperImageSmallUrl).HasColumnName("WallpaperImageSmallURL");
            entity.Property(e => e.WallpaperImageUrl).HasColumnName("WallpaperImageURL");
            entity.Property(e => e.WallpaperSetId).HasColumnName("WallpaperSetID");
            entity.Property(e => e.WallpaperSetTokenId).HasColumnName("WallpaperSetTokenID");
        });

        modelBuilder.Entity<TlknUserWallpaperRateList>(entity =>
        {
            entity.HasKey(e => e.UrateId);

            entity.ToTable("TLKN_USER_WALLPAPER_RATE_LIST");

            entity.Property(e => e.UrateId).HasColumnName("URateID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.ImageLargeUrl).HasColumnName("ImageLargeURL");
            entity.Property(e => e.ImageMidUrl).HasColumnName("ImageMidURL");
            entity.Property(e => e.ImageSmallAwayUrl).HasColumnName("ImageSmallAwayURL");
            entity.Property(e => e.ImageSmallLiveUrl).HasColumnName("ImageSmallLiveURL");
            entity.Property(e => e.ImageSmallUrl).HasColumnName("ImageSmallURL");
            entity.Property(e => e.ImageTokenId).HasColumnName("ImageTokenID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsApproved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTlknEmotion).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UwallpaperId).HasColumnName("UWallpaperID");
            entity.Property(e => e.WallpaperCategoryId).HasColumnName("WallpaperCategoryID");
            entity.Property(e => e.WallpaperImageLargeUrl).HasColumnName("WallpaperImageLargeURL");
            entity.Property(e => e.WallpaperImageMidUrl).HasColumnName("WallpaperImageMidURL");
            entity.Property(e => e.WallpaperImageSmallUrl).HasColumnName("WallpaperImageSmallURL");
            entity.Property(e => e.WallpaperImageUrl).HasColumnName("WallpaperImageURL");
            entity.Property(e => e.WallpaperSetId).HasColumnName("WallpaperSetID");
            entity.Property(e => e.WallpaperSetTokenId).HasColumnName("WallpaperSetTokenID");
            entity.Property(e => e.WallpaperTokenId).HasColumnName("WallpaperTokenID");
        });

        modelBuilder.Entity<TlknUserWallpaperSetList>(entity =>
        {
            entity.HasKey(e => e.UwallpaperSetId);

            entity.ToTable("TLKN_USER_WALLPAPER_SET_LIST");

            entity.Property(e => e.UwallpaperSetId).HasColumnName("UWallpaperSetID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.CategoryOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.CostPrice)
                .HasDefaultValueSql("(N'0')")
                .HasColumnType("money");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.ImageCount).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAdultContent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsCostFree).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDefault).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.WallpaperImageLargeUrl).HasColumnName("WallpaperImageLargeURL");
            entity.Property(e => e.WallpaperImageMidUrl).HasColumnName("WallpaperImageMidURL");
            entity.Property(e => e.WallpaperImageSmallUrl).HasColumnName("WallpaperImageSmallURL");
            entity.Property(e => e.WallpaperSetTokenId).HasColumnName("WallpaperSetTokenID");
        });

        modelBuilder.Entity<TlknUserWallpaperShareList>(entity =>
        {
            entity.HasKey(e => e.UshareId);

            entity.ToTable("TLKN_USER_WALLPAPER_SHARE_LIST");

            entity.Property(e => e.UshareId).HasColumnName("UShareID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.ImageLargeUrl).HasColumnName("ImageLargeURL");
            entity.Property(e => e.ImageMidUrl).HasColumnName("ImageMidURL");
            entity.Property(e => e.ImageSmallAwayUrl).HasColumnName("ImageSmallAwayURL");
            entity.Property(e => e.ImageSmallLiveUrl).HasColumnName("ImageSmallLiveURL");
            entity.Property(e => e.ImageSmallUrl).HasColumnName("ImageSmallURL");
            entity.Property(e => e.ImageTokenId).HasColumnName("ImageTokenID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsApproved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTlknEmotion).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UwallpaperId).HasColumnName("UWallpaperID");
            entity.Property(e => e.WallpaperCategoryId).HasColumnName("WallpaperCategoryID");
            entity.Property(e => e.WallpaperImageLargeUrl).HasColumnName("WallpaperImageLargeURL");
            entity.Property(e => e.WallpaperImageMidUrl).HasColumnName("WallpaperImageMidURL");
            entity.Property(e => e.WallpaperImageSmallUrl).HasColumnName("WallpaperImageSmallURL");
            entity.Property(e => e.WallpaperImageUrl).HasColumnName("WallpaperImageURL");
            entity.Property(e => e.WallpaperSetId).HasColumnName("WallpaperSetID");
            entity.Property(e => e.WallpaperSetTokenId).HasColumnName("WallpaperSetTokenID");
            entity.Property(e => e.WallpaperTokenId).HasColumnName("WallpaperTokenID");
        });

        modelBuilder.Entity<TlknUserWallpaperTopList>(entity =>
        {
            entity.HasKey(e => e.UwallpaperTopCountId);

            entity.ToTable("TLKN_USER_WALLPAPER_TOP_LIST");

            entity.Property(e => e.UwallpaperTopCountId).HasColumnName("UWallpaperTopCountID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsApproved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTlknEmotion).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.WallpaperCategoryId).HasColumnName("WallpaperCategoryID");
            entity.Property(e => e.WallpaperImageLargeUrl).HasColumnName("WallpaperImageLargeURL");
            entity.Property(e => e.WallpaperImageMidUrl).HasColumnName("WallpaperImageMidURL");
            entity.Property(e => e.WallpaperImageSmallUrl).HasColumnName("WallpaperImageSmallURL");
            entity.Property(e => e.WallpaperImageUrl).HasColumnName("WallpaperImageURL");
            entity.Property(e => e.WallpaperSetId).HasColumnName("WallpaperSetID");
            entity.Property(e => e.WallpaperSetTokenId).HasColumnName("WallpaperSetTokenID");
        });

        modelBuilder.Entity<TlknUserWallpaperViewList>(entity =>
        {
            entity.HasKey(e => e.UviewId);

            entity.ToTable("TLKN_USER_WALLPAPER_VIEW_LIST");

            entity.Property(e => e.UviewId).HasColumnName("UViewID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.ImageLargeUrl).HasColumnName("ImageLargeURL");
            entity.Property(e => e.ImageMidUrl).HasColumnName("ImageMidURL");
            entity.Property(e => e.ImageSmallAwayUrl).HasColumnName("ImageSmallAwayURL");
            entity.Property(e => e.ImageSmallLiveUrl).HasColumnName("ImageSmallLiveURL");
            entity.Property(e => e.ImageSmallUrl).HasColumnName("ImageSmallURL");
            entity.Property(e => e.ImageTokenId).HasColumnName("ImageTokenID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsApproved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTlknEmotion).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.WallpaperId).HasColumnName("WallpaperID");
            entity.Property(e => e.WallpaperImageLargeUrl).HasColumnName("WallpaperImageLargeURL");
            entity.Property(e => e.WallpaperImageMidUrl).HasColumnName("WallpaperImageMidURL");
            entity.Property(e => e.WallpaperImageSmallUrl).HasColumnName("WallpaperImageSmallURL");
            entity.Property(e => e.WallpaperImageUrl).HasColumnName("WallpaperImageURL");
            entity.Property(e => e.WallpaperSetId).HasColumnName("WallpaperSetID");
            entity.Property(e => e.WallpaperSetTokenId).HasColumnName("WallpaperSetTokenID");
        });

        modelBuilder.Entity<TlknWallpaperCategoryList>(entity =>
        {
            entity.HasKey(e => e.UwallpaperCategoryId).HasName("PK_TLKN_USER_WALLPAPER_CATEGORY_LIST");

            entity.ToTable("TLKN_WALLPAPER_CATEGORY_LIST");

            entity.Property(e => e.UwallpaperCategoryId).HasColumnName("UWallpaperCategoryID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.CategoryOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.ImageCount).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDefault).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.WallpaperCategoryTokenId).HasColumnName("WallpaperCategoryTokenID");
            entity.Property(e => e.WallpaperImageLargeUrl).HasColumnName("WallpaperImageLargeURL");
            entity.Property(e => e.WallpaperImageMidUrl).HasColumnName("WallpaperImageMidURL");
            entity.Property(e => e.WallpaperImageSmallUrl).HasColumnName("WallpaperImageSmallURL");
        });

        modelBuilder.Entity<TlknWallpaperImageList>(entity =>
        {
            entity.HasKey(e => e.UwallpaperId).HasName("PK_TLKN_USER_WALLPAPER_LIST");

            entity.ToTable("TLKN_WALLPAPER_IMAGE_LIST");

            entity.Property(e => e.UwallpaperId).HasColumnName("UWallpaperID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.ActiveStatus).HasDefaultValueSql("(N'pending')");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.ImageLargeUrl).HasColumnName("ImageLargeURL");
            entity.Property(e => e.ImageMidUrl).HasColumnName("ImageMidURL");
            entity.Property(e => e.ImageSmallAwayUrl).HasColumnName("ImageSmallAwayURL");
            entity.Property(e => e.ImageSmallLiveUrl).HasColumnName("ImageSmallLiveURL");
            entity.Property(e => e.ImageSmallUrl).HasColumnName("ImageSmallURL");
            entity.Property(e => e.ImageTokenId).HasColumnName("ImageTokenID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAnimate).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsApproved).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsTlknEmotion).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUpload).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsView).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.WallpaperCategoryId).HasColumnName("WallpaperCategoryID");
            entity.Property(e => e.WallpaperImageLargeUrl).HasColumnName("WallpaperImageLargeURL");
            entity.Property(e => e.WallpaperImageMidUrl).HasColumnName("WallpaperImageMidURL");
            entity.Property(e => e.WallpaperImageSmallUrl).HasColumnName("WallpaperImageSmallURL");
            entity.Property(e => e.WallpaperImageUrl).HasColumnName("WallpaperImageURL");
            entity.Property(e => e.WallpaperSetId).HasColumnName("WallpaperSetID");
            entity.Property(e => e.WallpaperSetTokenId).HasColumnName("WallpaperSetTokenID");
        });

        modelBuilder.Entity<TlknWallpaperSetList>(entity =>
        {
            entity.HasKey(e => e.UwallpaperSetId);

            entity.ToTable("TLKN_WALLPAPER_SET_LIST");

            entity.Property(e => e.UwallpaperSetId).HasColumnName("UWallpaperSetID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.CategoryOrder).HasDefaultValueSql("((0))");
            entity.Property(e => e.CostPrice)
                .HasDefaultValueSql("(N'0')")
                .HasColumnType("money");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("(N'0')")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.ImageCount).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsAdultContent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsAvatar).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsCostFree).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsDefault).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsGallery).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsPersonal).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsRecent).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsSystem).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsVisible).HasDefaultValueSql("((0))");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDateTimeMilliSec).HasDefaultValueSql("(N'0')");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.WallpaperImageLargeUrl).HasColumnName("WallpaperImageLargeURL");
            entity.Property(e => e.WallpaperImageMidUrl).HasColumnName("WallpaperImageMidURL");
            entity.Property(e => e.WallpaperImageSmallUrl).HasColumnName("WallpaperImageSmallURL");
            entity.Property(e => e.WallpaperSetTokenId).HasColumnName("WallpaperSetTokenID");
        });

        modelBuilder.Entity<TlnkUserCamera>(entity =>
        {
            entity.HasKey(e => e.CamId);

            entity.ToTable("TLNK_USER_CAMERA");

            entity.Property(e => e.CamId).HasColumnName("CamID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.CamFmsid).HasColumnName("CamFMSID");
            entity.Property(e => e.CamFmsurl).HasColumnName("CamFMSURL");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserSessionId).HasColumnName("UserSessionID");
        });

        modelBuilder.Entity<TlnkUserCameraViewer>(entity =>
        {
            entity.HasKey(e => e.UcamId);

            entity.ToTable("TLNK_USER_CAMERA_VIEWER");

            entity.Property(e => e.UcamId).HasColumnName("UCamID");
            entity.Property(e => e.AccountType).HasDefaultValueSql("(N'personal')");
            entity.Property(e => e.CamFmsid).HasColumnName("CamFMSID");
            entity.Property(e => e.CamFmsurl).HasColumnName("CamFMSURL");
            entity.Property(e => e.CamId).HasColumnName("CamID");
            entity.Property(e => e.DeviceGlobalId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("DeviceGlobalID");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.FromUserSessionId).HasColumnName("FromUserSessionID");
            entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            entity.Property(e => e.IsModelPmchat)
                .HasDefaultValueSql("((0))")
                .HasColumnName("IsModelPMChat");
            entity.Property(e => e.IsNew).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNewBoundFromUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsNewBoundToUser).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsOnline).HasDefaultValueSql("((0))");
            entity.Property(e => e.IsOpen).HasDefaultValueSql("((0))");
            entity.Property(e => e.LoginDate).HasColumnType("smalldatetime");
            entity.Property(e => e.LogoutDate).HasColumnType("smalldatetime");
            entity.Property(e => e.MobileNumberId).HasColumnName("MobileNumberID");
            entity.Property(e => e.RowDataTokenId)
                .HasDefaultValueSql("((0))")
                .HasColumnName("RowDataTokenID");
            entity.Property(e => e.RowViewTokenId)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("RowViewTokenID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.ToUserSessionId).HasColumnName("ToUserSessionID");
            entity.Property(e => e.UploadDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.UploadDay).HasDefaultValueSql("(datepart(day,getdate()))");
            entity.Property(e => e.UploadMonth).HasDefaultValueSql("(datepart(month,getdate()))");
            entity.Property(e => e.UploadYear).HasDefaultValueSql("(datepart(year,getdate()))");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<UserLogin>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.MailId }).HasName("PK__UserLogi__54C6CB550CBAE877");

            entity.ToTable("UserLogin");

            entity.Property(e => e.UserId).HasColumnName("userID");
            entity.Property(e => e.MailId)
                .HasMaxLength(45)
                .IsUnicode(false)
                .HasColumnName("mailId");
            entity.Property(e => e.Age).HasColumnName("age");
            entity.Property(e => e.BackgroundImage)
                .HasColumnType("image")
                .HasColumnName("backgroundImage");
            entity.Property(e => e.City)
                .HasMaxLength(45)
                .IsUnicode(false)
                .HasColumnName("city");
            entity.Property(e => e.Country)
                .HasMaxLength(45)
                .IsUnicode(false)
                .HasColumnName("country");
            entity.Property(e => e.FirstName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("firstName");
            entity.Property(e => e.Gender)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("gender");
            entity.Property(e => e.LoginType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('Tlkn2')")
                .HasColumnName("loginType");
            entity.Property(e => e.LookingFor)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("lookingFor");
            entity.Property(e => e.MyStatus)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValueSql("('Add your today status here.')")
                .HasColumnName("myStatus");
            entity.Property(e => e.OnlineStatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("onlineStatus");
            entity.Property(e => e.Password)
                .HasMaxLength(45)
                .IsUnicode(false)
                .HasColumnName("password");
            entity.Property(e => e.ProfileLanguageId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("profileLanguageId");
            entity.Property(e => e.ProfilePicture)
                .HasColumnType("image")
                .HasColumnName("profilePicture");
            entity.Property(e => e.ProfilePictureStatus)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("profilePictureStatus");
            entity.Property(e => e.RegistrationDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("date");
            entity.Property(e => e.RegistrationTime).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.SecretAnswer)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("secretAnswer");
            entity.Property(e => e.SecretQuestion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("secretQuestion");
            entity.Property(e => e.SocialUserId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("socialUSerID");
            entity.Property(e => e.SocialUserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("socialUSerName");
            entity.Property(e => e.States)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasDefaultValueSql("((2))")
                .HasColumnName("status");
            entity.Property(e => e.Themes)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasDefaultValueSql("('NO')")
                .HasColumnName("themes");
            entity.Property(e => e.TodayFeeling)
                .IsUnicode(false)
                .HasColumnName("todayFeeling");
            entity.Property(e => e.UserMood)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('90')")
                .HasColumnName("userMood");
            entity.Property(e => e.UserPopular)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('1')")
                .HasColumnName("userPopular");
            entity.Property(e => e.ZipCode).HasColumnName("zipCode");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
